
Master_SPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000032d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001b4  00800060  000032d2  00003366  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  00800214  00800214  0000351a  2**0
                  ALLOC
  3 .stab         00002bc8  00000000  00000000  0000351c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001058  00000000  00000000  000060e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  0000713c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d1  00000000  00000000  000072bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002010  00000000  00000000  0000748d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001161  00000000  00000000  0000949d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001003  00000000  00000000  0000a5fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000b604  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002be  00000000  00000000  0000b7a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000090e  00000000  00000000  0000ba62  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c370  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ed       	ldi	r30, 0xD2	; 210
      68:	f2 e3       	ldi	r31, 0x32	; 50
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 31       	cpi	r26, 0x14	; 20
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a4 e1       	ldi	r26, 0x14	; 20
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 32       	cpi	r26, 0x26	; 38
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 cc 18 	call	0x3198	; 0x3198 <main>
      8a:	0c 94 67 19 	jmp	0x32ce	; 0x32ce <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 30 19 	jmp	0x3260	; 0x3260 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab ee       	ldi	r26, 0xEB	; 235
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 4c 19 	jmp	0x3298	; 0x3298 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 3c 19 	jmp	0x3278	; 0x3278 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 58 19 	jmp	0x32b0	; 0x32b0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 3c 19 	jmp	0x3278	; 0x3278 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 58 19 	jmp	0x32b0	; 0x32b0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 30 19 	jmp	0x3260	; 0x3260 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8b ee       	ldi	r24, 0xEB	; 235
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 4c 19 	jmp	0x3298	; 0x3298 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 3c 19 	jmp	0x3278	; 0x3278 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 58 19 	jmp	0x32b0	; 0x32b0 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 3c 19 	jmp	0x3278	; 0x3278 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 58 19 	jmp	0x32b0	; 0x32b0 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 3c 19 	jmp	0x3278	; 0x3278 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 58 19 	jmp	0x32b0	; 0x32b0 <__epilogue_restores__+0x18>

00000752 <__floatsisf>:
     752:	a8 e0       	ldi	r26, 0x08	; 8
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 39 19 	jmp	0x3272	; 0x3272 <__prologue_saves__+0x12>
     75e:	9b 01       	movw	r18, r22
     760:	ac 01       	movw	r20, r24
     762:	83 e0       	ldi	r24, 0x03	; 3
     764:	89 83       	std	Y+1, r24	; 0x01
     766:	da 01       	movw	r26, r20
     768:	c9 01       	movw	r24, r18
     76a:	88 27       	eor	r24, r24
     76c:	b7 fd       	sbrc	r27, 7
     76e:	83 95       	inc	r24
     770:	99 27       	eor	r25, r25
     772:	aa 27       	eor	r26, r26
     774:	bb 27       	eor	r27, r27
     776:	b8 2e       	mov	r11, r24
     778:	21 15       	cp	r18, r1
     77a:	31 05       	cpc	r19, r1
     77c:	41 05       	cpc	r20, r1
     77e:	51 05       	cpc	r21, r1
     780:	19 f4       	brne	.+6      	; 0x788 <__floatsisf+0x36>
     782:	82 e0       	ldi	r24, 0x02	; 2
     784:	89 83       	std	Y+1, r24	; 0x01
     786:	3a c0       	rjmp	.+116    	; 0x7fc <__floatsisf+0xaa>
     788:	88 23       	and	r24, r24
     78a:	a9 f0       	breq	.+42     	; 0x7b6 <__floatsisf+0x64>
     78c:	20 30       	cpi	r18, 0x00	; 0
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	38 07       	cpc	r19, r24
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	48 07       	cpc	r20, r24
     796:	80 e8       	ldi	r24, 0x80	; 128
     798:	58 07       	cpc	r21, r24
     79a:	29 f4       	brne	.+10     	; 0x7a6 <__floatsisf+0x54>
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	9f ec       	ldi	r25, 0xCF	; 207
     7a4:	30 c0       	rjmp	.+96     	; 0x806 <__floatsisf+0xb4>
     7a6:	ee 24       	eor	r14, r14
     7a8:	ff 24       	eor	r15, r15
     7aa:	87 01       	movw	r16, r14
     7ac:	e2 1a       	sub	r14, r18
     7ae:	f3 0a       	sbc	r15, r19
     7b0:	04 0b       	sbc	r16, r20
     7b2:	15 0b       	sbc	r17, r21
     7b4:	02 c0       	rjmp	.+4      	; 0x7ba <__floatsisf+0x68>
     7b6:	79 01       	movw	r14, r18
     7b8:	8a 01       	movw	r16, r20
     7ba:	8e e1       	ldi	r24, 0x1E	; 30
     7bc:	c8 2e       	mov	r12, r24
     7be:	d1 2c       	mov	r13, r1
     7c0:	dc 82       	std	Y+4, r13	; 0x04
     7c2:	cb 82       	std	Y+3, r12	; 0x03
     7c4:	ed 82       	std	Y+5, r14	; 0x05
     7c6:	fe 82       	std	Y+6, r15	; 0x06
     7c8:	0f 83       	std	Y+7, r16	; 0x07
     7ca:	18 87       	std	Y+8, r17	; 0x08
     7cc:	c8 01       	movw	r24, r16
     7ce:	b7 01       	movw	r22, r14
     7d0:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__clzsi2>
     7d4:	01 97       	sbiw	r24, 0x01	; 1
     7d6:	18 16       	cp	r1, r24
     7d8:	19 06       	cpc	r1, r25
     7da:	84 f4       	brge	.+32     	; 0x7fc <__floatsisf+0xaa>
     7dc:	08 2e       	mov	r0, r24
     7de:	04 c0       	rjmp	.+8      	; 0x7e8 <__floatsisf+0x96>
     7e0:	ee 0c       	add	r14, r14
     7e2:	ff 1c       	adc	r15, r15
     7e4:	00 1f       	adc	r16, r16
     7e6:	11 1f       	adc	r17, r17
     7e8:	0a 94       	dec	r0
     7ea:	d2 f7       	brpl	.-12     	; 0x7e0 <__floatsisf+0x8e>
     7ec:	ed 82       	std	Y+5, r14	; 0x05
     7ee:	fe 82       	std	Y+6, r15	; 0x06
     7f0:	0f 83       	std	Y+7, r16	; 0x07
     7f2:	18 87       	std	Y+8, r17	; 0x08
     7f4:	c8 1a       	sub	r12, r24
     7f6:	d9 0a       	sbc	r13, r25
     7f8:	dc 82       	std	Y+4, r13	; 0x04
     7fa:	cb 82       	std	Y+3, r12	; 0x03
     7fc:	ba 82       	std	Y+2, r11	; 0x02
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     806:	28 96       	adiw	r28, 0x08	; 8
     808:	e9 e0       	ldi	r30, 0x09	; 9
     80a:	0c 94 55 19 	jmp	0x32aa	; 0x32aa <__epilogue_restores__+0x12>

0000080e <__fixsfsi>:
     80e:	ac e0       	ldi	r26, 0x0C	; 12
     810:	b0 e0       	ldi	r27, 0x00	; 0
     812:	ed e0       	ldi	r30, 0x0D	; 13
     814:	f4 e0       	ldi	r31, 0x04	; 4
     816:	0c 94 40 19 	jmp	0x3280	; 0x3280 <__prologue_saves__+0x20>
     81a:	69 83       	std	Y+1, r22	; 0x01
     81c:	7a 83       	std	Y+2, r23	; 0x02
     81e:	8b 83       	std	Y+3, r24	; 0x03
     820:	9c 83       	std	Y+4, r25	; 0x04
     822:	ce 01       	movw	r24, r28
     824:	01 96       	adiw	r24, 0x01	; 1
     826:	be 01       	movw	r22, r28
     828:	6b 5f       	subi	r22, 0xFB	; 251
     82a:	7f 4f       	sbci	r23, 0xFF	; 255
     82c:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     830:	8d 81       	ldd	r24, Y+5	; 0x05
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	61 f1       	breq	.+88     	; 0x88e <__stack+0x2f>
     836:	82 30       	cpi	r24, 0x02	; 2
     838:	50 f1       	brcs	.+84     	; 0x88e <__stack+0x2f>
     83a:	84 30       	cpi	r24, 0x04	; 4
     83c:	21 f4       	brne	.+8      	; 0x846 <__fixsfsi+0x38>
     83e:	8e 81       	ldd	r24, Y+6	; 0x06
     840:	88 23       	and	r24, r24
     842:	51 f1       	breq	.+84     	; 0x898 <__stack+0x39>
     844:	2e c0       	rjmp	.+92     	; 0x8a2 <__stack+0x43>
     846:	2f 81       	ldd	r18, Y+7	; 0x07
     848:	38 85       	ldd	r19, Y+8	; 0x08
     84a:	37 fd       	sbrc	r19, 7
     84c:	20 c0       	rjmp	.+64     	; 0x88e <__stack+0x2f>
     84e:	6e 81       	ldd	r22, Y+6	; 0x06
     850:	2f 31       	cpi	r18, 0x1F	; 31
     852:	31 05       	cpc	r19, r1
     854:	1c f0       	brlt	.+6      	; 0x85c <__fixsfsi+0x4e>
     856:	66 23       	and	r22, r22
     858:	f9 f0       	breq	.+62     	; 0x898 <__stack+0x39>
     85a:	23 c0       	rjmp	.+70     	; 0x8a2 <__stack+0x43>
     85c:	8e e1       	ldi	r24, 0x1E	; 30
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	82 1b       	sub	r24, r18
     862:	93 0b       	sbc	r25, r19
     864:	29 85       	ldd	r18, Y+9	; 0x09
     866:	3a 85       	ldd	r19, Y+10	; 0x0a
     868:	4b 85       	ldd	r20, Y+11	; 0x0b
     86a:	5c 85       	ldd	r21, Y+12	; 0x0c
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	56 95       	lsr	r21
     870:	47 95       	ror	r20
     872:	37 95       	ror	r19
     874:	27 95       	ror	r18
     876:	8a 95       	dec	r24
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	66 23       	and	r22, r22
     87c:	b1 f0       	breq	.+44     	; 0x8aa <__stack+0x4b>
     87e:	50 95       	com	r21
     880:	40 95       	com	r20
     882:	30 95       	com	r19
     884:	21 95       	neg	r18
     886:	3f 4f       	sbci	r19, 0xFF	; 255
     888:	4f 4f       	sbci	r20, 0xFF	; 255
     88a:	5f 4f       	sbci	r21, 0xFF	; 255
     88c:	0e c0       	rjmp	.+28     	; 0x8aa <__stack+0x4b>
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	50 e0       	ldi	r21, 0x00	; 0
     896:	09 c0       	rjmp	.+18     	; 0x8aa <__stack+0x4b>
     898:	2f ef       	ldi	r18, 0xFF	; 255
     89a:	3f ef       	ldi	r19, 0xFF	; 255
     89c:	4f ef       	ldi	r20, 0xFF	; 255
     89e:	5f e7       	ldi	r21, 0x7F	; 127
     8a0:	04 c0       	rjmp	.+8      	; 0x8aa <__stack+0x4b>
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	40 e0       	ldi	r20, 0x00	; 0
     8a8:	50 e8       	ldi	r21, 0x80	; 128
     8aa:	b9 01       	movw	r22, r18
     8ac:	ca 01       	movw	r24, r20
     8ae:	2c 96       	adiw	r28, 0x0c	; 12
     8b0:	e2 e0       	ldi	r30, 0x02	; 2
     8b2:	0c 94 5c 19 	jmp	0x32b8	; 0x32b8 <__epilogue_restores__+0x20>

000008b6 <__clzsi2>:
     8b6:	ef 92       	push	r14
     8b8:	ff 92       	push	r15
     8ba:	0f 93       	push	r16
     8bc:	1f 93       	push	r17
     8be:	7b 01       	movw	r14, r22
     8c0:	8c 01       	movw	r16, r24
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	e8 16       	cp	r14, r24
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	f8 06       	cpc	r15, r24
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	08 07       	cpc	r16, r24
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	18 07       	cpc	r17, r24
     8d2:	88 f4       	brcc	.+34     	; 0x8f6 <__clzsi2+0x40>
     8d4:	8f ef       	ldi	r24, 0xFF	; 255
     8d6:	e8 16       	cp	r14, r24
     8d8:	f1 04       	cpc	r15, r1
     8da:	01 05       	cpc	r16, r1
     8dc:	11 05       	cpc	r17, r1
     8de:	31 f0       	breq	.+12     	; 0x8ec <__clzsi2+0x36>
     8e0:	28 f0       	brcs	.+10     	; 0x8ec <__clzsi2+0x36>
     8e2:	88 e0       	ldi	r24, 0x08	; 8
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	b0 e0       	ldi	r27, 0x00	; 0
     8ea:	17 c0       	rjmp	.+46     	; 0x91a <__clzsi2+0x64>
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	a0 e0       	ldi	r26, 0x00	; 0
     8f2:	b0 e0       	ldi	r27, 0x00	; 0
     8f4:	12 c0       	rjmp	.+36     	; 0x91a <__clzsi2+0x64>
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	e8 16       	cp	r14, r24
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	f8 06       	cpc	r15, r24
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	08 07       	cpc	r16, r24
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	18 07       	cpc	r17, r24
     906:	28 f0       	brcs	.+10     	; 0x912 <__clzsi2+0x5c>
     908:	88 e1       	ldi	r24, 0x18	; 24
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e0       	ldi	r26, 0x00	; 0
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	04 c0       	rjmp	.+8      	; 0x91a <__clzsi2+0x64>
     912:	80 e1       	ldi	r24, 0x10	; 16
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	a0 e0       	ldi	r26, 0x00	; 0
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	20 e2       	ldi	r18, 0x20	; 32
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	28 1b       	sub	r18, r24
     924:	39 0b       	sbc	r19, r25
     926:	4a 0b       	sbc	r20, r26
     928:	5b 0b       	sbc	r21, r27
     92a:	04 c0       	rjmp	.+8      	; 0x934 <__clzsi2+0x7e>
     92c:	16 95       	lsr	r17
     92e:	07 95       	ror	r16
     930:	f7 94       	ror	r15
     932:	e7 94       	ror	r14
     934:	8a 95       	dec	r24
     936:	d2 f7       	brpl	.-12     	; 0x92c <__clzsi2+0x76>
     938:	f7 01       	movw	r30, r14
     93a:	ed 50       	subi	r30, 0x0D	; 13
     93c:	ff 4f       	sbci	r31, 0xFF	; 255
     93e:	80 81       	ld	r24, Z
     940:	28 1b       	sub	r18, r24
     942:	31 09       	sbc	r19, r1
     944:	41 09       	sbc	r20, r1
     946:	51 09       	sbc	r21, r1
     948:	c9 01       	movw	r24, r18
     94a:	1f 91       	pop	r17
     94c:	0f 91       	pop	r16
     94e:	ff 90       	pop	r15
     950:	ef 90       	pop	r14
     952:	08 95       	ret

00000954 <__pack_f>:
     954:	df 92       	push	r13
     956:	ef 92       	push	r14
     958:	ff 92       	push	r15
     95a:	0f 93       	push	r16
     95c:	1f 93       	push	r17
     95e:	fc 01       	movw	r30, r24
     960:	e4 80       	ldd	r14, Z+4	; 0x04
     962:	f5 80       	ldd	r15, Z+5	; 0x05
     964:	06 81       	ldd	r16, Z+6	; 0x06
     966:	17 81       	ldd	r17, Z+7	; 0x07
     968:	d1 80       	ldd	r13, Z+1	; 0x01
     96a:	80 81       	ld	r24, Z
     96c:	82 30       	cpi	r24, 0x02	; 2
     96e:	48 f4       	brcc	.+18     	; 0x982 <__pack_f+0x2e>
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	a0 e1       	ldi	r26, 0x10	; 16
     976:	b0 e0       	ldi	r27, 0x00	; 0
     978:	e8 2a       	or	r14, r24
     97a:	f9 2a       	or	r15, r25
     97c:	0a 2b       	or	r16, r26
     97e:	1b 2b       	or	r17, r27
     980:	a5 c0       	rjmp	.+330    	; 0xacc <__pack_f+0x178>
     982:	84 30       	cpi	r24, 0x04	; 4
     984:	09 f4       	brne	.+2      	; 0x988 <__pack_f+0x34>
     986:	9f c0       	rjmp	.+318    	; 0xac6 <__pack_f+0x172>
     988:	82 30       	cpi	r24, 0x02	; 2
     98a:	21 f4       	brne	.+8      	; 0x994 <__pack_f+0x40>
     98c:	ee 24       	eor	r14, r14
     98e:	ff 24       	eor	r15, r15
     990:	87 01       	movw	r16, r14
     992:	05 c0       	rjmp	.+10     	; 0x99e <__pack_f+0x4a>
     994:	e1 14       	cp	r14, r1
     996:	f1 04       	cpc	r15, r1
     998:	01 05       	cpc	r16, r1
     99a:	11 05       	cpc	r17, r1
     99c:	19 f4       	brne	.+6      	; 0x9a4 <__pack_f+0x50>
     99e:	e0 e0       	ldi	r30, 0x00	; 0
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	96 c0       	rjmp	.+300    	; 0xad0 <__pack_f+0x17c>
     9a4:	62 81       	ldd	r22, Z+2	; 0x02
     9a6:	73 81       	ldd	r23, Z+3	; 0x03
     9a8:	9f ef       	ldi	r25, 0xFF	; 255
     9aa:	62 38       	cpi	r22, 0x82	; 130
     9ac:	79 07       	cpc	r23, r25
     9ae:	0c f0       	brlt	.+2      	; 0x9b2 <__pack_f+0x5e>
     9b0:	5b c0       	rjmp	.+182    	; 0xa68 <__pack_f+0x114>
     9b2:	22 e8       	ldi	r18, 0x82	; 130
     9b4:	3f ef       	ldi	r19, 0xFF	; 255
     9b6:	26 1b       	sub	r18, r22
     9b8:	37 0b       	sbc	r19, r23
     9ba:	2a 31       	cpi	r18, 0x1A	; 26
     9bc:	31 05       	cpc	r19, r1
     9be:	2c f0       	brlt	.+10     	; 0x9ca <__pack_f+0x76>
     9c0:	20 e0       	ldi	r18, 0x00	; 0
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	40 e0       	ldi	r20, 0x00	; 0
     9c6:	50 e0       	ldi	r21, 0x00	; 0
     9c8:	2a c0       	rjmp	.+84     	; 0xa1e <__pack_f+0xca>
     9ca:	b8 01       	movw	r22, r16
     9cc:	a7 01       	movw	r20, r14
     9ce:	02 2e       	mov	r0, r18
     9d0:	04 c0       	rjmp	.+8      	; 0x9da <__pack_f+0x86>
     9d2:	76 95       	lsr	r23
     9d4:	67 95       	ror	r22
     9d6:	57 95       	ror	r21
     9d8:	47 95       	ror	r20
     9da:	0a 94       	dec	r0
     9dc:	d2 f7       	brpl	.-12     	; 0x9d2 <__pack_f+0x7e>
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	a0 e0       	ldi	r26, 0x00	; 0
     9e4:	b0 e0       	ldi	r27, 0x00	; 0
     9e6:	04 c0       	rjmp	.+8      	; 0x9f0 <__pack_f+0x9c>
     9e8:	88 0f       	add	r24, r24
     9ea:	99 1f       	adc	r25, r25
     9ec:	aa 1f       	adc	r26, r26
     9ee:	bb 1f       	adc	r27, r27
     9f0:	2a 95       	dec	r18
     9f2:	d2 f7       	brpl	.-12     	; 0x9e8 <__pack_f+0x94>
     9f4:	01 97       	sbiw	r24, 0x01	; 1
     9f6:	a1 09       	sbc	r26, r1
     9f8:	b1 09       	sbc	r27, r1
     9fa:	8e 21       	and	r24, r14
     9fc:	9f 21       	and	r25, r15
     9fe:	a0 23       	and	r26, r16
     a00:	b1 23       	and	r27, r17
     a02:	00 97       	sbiw	r24, 0x00	; 0
     a04:	a1 05       	cpc	r26, r1
     a06:	b1 05       	cpc	r27, r1
     a08:	21 f0       	breq	.+8      	; 0xa12 <__pack_f+0xbe>
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	a0 e0       	ldi	r26, 0x00	; 0
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	9a 01       	movw	r18, r20
     a14:	ab 01       	movw	r20, r22
     a16:	28 2b       	or	r18, r24
     a18:	39 2b       	or	r19, r25
     a1a:	4a 2b       	or	r20, r26
     a1c:	5b 2b       	or	r21, r27
     a1e:	da 01       	movw	r26, r20
     a20:	c9 01       	movw	r24, r18
     a22:	8f 77       	andi	r24, 0x7F	; 127
     a24:	90 70       	andi	r25, 0x00	; 0
     a26:	a0 70       	andi	r26, 0x00	; 0
     a28:	b0 70       	andi	r27, 0x00	; 0
     a2a:	80 34       	cpi	r24, 0x40	; 64
     a2c:	91 05       	cpc	r25, r1
     a2e:	a1 05       	cpc	r26, r1
     a30:	b1 05       	cpc	r27, r1
     a32:	39 f4       	brne	.+14     	; 0xa42 <__pack_f+0xee>
     a34:	27 ff       	sbrs	r18, 7
     a36:	09 c0       	rjmp	.+18     	; 0xa4a <__pack_f+0xf6>
     a38:	20 5c       	subi	r18, 0xC0	; 192
     a3a:	3f 4f       	sbci	r19, 0xFF	; 255
     a3c:	4f 4f       	sbci	r20, 0xFF	; 255
     a3e:	5f 4f       	sbci	r21, 0xFF	; 255
     a40:	04 c0       	rjmp	.+8      	; 0xa4a <__pack_f+0xf6>
     a42:	21 5c       	subi	r18, 0xC1	; 193
     a44:	3f 4f       	sbci	r19, 0xFF	; 255
     a46:	4f 4f       	sbci	r20, 0xFF	; 255
     a48:	5f 4f       	sbci	r21, 0xFF	; 255
     a4a:	e0 e0       	ldi	r30, 0x00	; 0
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	20 30       	cpi	r18, 0x00	; 0
     a50:	a0 e0       	ldi	r26, 0x00	; 0
     a52:	3a 07       	cpc	r19, r26
     a54:	a0 e0       	ldi	r26, 0x00	; 0
     a56:	4a 07       	cpc	r20, r26
     a58:	a0 e4       	ldi	r26, 0x40	; 64
     a5a:	5a 07       	cpc	r21, r26
     a5c:	10 f0       	brcs	.+4      	; 0xa62 <__pack_f+0x10e>
     a5e:	e1 e0       	ldi	r30, 0x01	; 1
     a60:	f0 e0       	ldi	r31, 0x00	; 0
     a62:	79 01       	movw	r14, r18
     a64:	8a 01       	movw	r16, r20
     a66:	27 c0       	rjmp	.+78     	; 0xab6 <__pack_f+0x162>
     a68:	60 38       	cpi	r22, 0x80	; 128
     a6a:	71 05       	cpc	r23, r1
     a6c:	64 f5       	brge	.+88     	; 0xac6 <__pack_f+0x172>
     a6e:	fb 01       	movw	r30, r22
     a70:	e1 58       	subi	r30, 0x81	; 129
     a72:	ff 4f       	sbci	r31, 0xFF	; 255
     a74:	d8 01       	movw	r26, r16
     a76:	c7 01       	movw	r24, r14
     a78:	8f 77       	andi	r24, 0x7F	; 127
     a7a:	90 70       	andi	r25, 0x00	; 0
     a7c:	a0 70       	andi	r26, 0x00	; 0
     a7e:	b0 70       	andi	r27, 0x00	; 0
     a80:	80 34       	cpi	r24, 0x40	; 64
     a82:	91 05       	cpc	r25, r1
     a84:	a1 05       	cpc	r26, r1
     a86:	b1 05       	cpc	r27, r1
     a88:	39 f4       	brne	.+14     	; 0xa98 <__pack_f+0x144>
     a8a:	e7 fe       	sbrs	r14, 7
     a8c:	0d c0       	rjmp	.+26     	; 0xaa8 <__pack_f+0x154>
     a8e:	80 e4       	ldi	r24, 0x40	; 64
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	a0 e0       	ldi	r26, 0x00	; 0
     a94:	b0 e0       	ldi	r27, 0x00	; 0
     a96:	04 c0       	rjmp	.+8      	; 0xaa0 <__pack_f+0x14c>
     a98:	8f e3       	ldi	r24, 0x3F	; 63
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	a0 e0       	ldi	r26, 0x00	; 0
     a9e:	b0 e0       	ldi	r27, 0x00	; 0
     aa0:	e8 0e       	add	r14, r24
     aa2:	f9 1e       	adc	r15, r25
     aa4:	0a 1f       	adc	r16, r26
     aa6:	1b 1f       	adc	r17, r27
     aa8:	17 ff       	sbrs	r17, 7
     aaa:	05 c0       	rjmp	.+10     	; 0xab6 <__pack_f+0x162>
     aac:	16 95       	lsr	r17
     aae:	07 95       	ror	r16
     ab0:	f7 94       	ror	r15
     ab2:	e7 94       	ror	r14
     ab4:	31 96       	adiw	r30, 0x01	; 1
     ab6:	87 e0       	ldi	r24, 0x07	; 7
     ab8:	16 95       	lsr	r17
     aba:	07 95       	ror	r16
     abc:	f7 94       	ror	r15
     abe:	e7 94       	ror	r14
     ac0:	8a 95       	dec	r24
     ac2:	d1 f7       	brne	.-12     	; 0xab8 <__pack_f+0x164>
     ac4:	05 c0       	rjmp	.+10     	; 0xad0 <__pack_f+0x17c>
     ac6:	ee 24       	eor	r14, r14
     ac8:	ff 24       	eor	r15, r15
     aca:	87 01       	movw	r16, r14
     acc:	ef ef       	ldi	r30, 0xFF	; 255
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	6e 2f       	mov	r22, r30
     ad2:	67 95       	ror	r22
     ad4:	66 27       	eor	r22, r22
     ad6:	67 95       	ror	r22
     ad8:	90 2f       	mov	r25, r16
     ada:	9f 77       	andi	r25, 0x7F	; 127
     adc:	d7 94       	ror	r13
     ade:	dd 24       	eor	r13, r13
     ae0:	d7 94       	ror	r13
     ae2:	8e 2f       	mov	r24, r30
     ae4:	86 95       	lsr	r24
     ae6:	49 2f       	mov	r20, r25
     ae8:	46 2b       	or	r20, r22
     aea:	58 2f       	mov	r21, r24
     aec:	5d 29       	or	r21, r13
     aee:	b7 01       	movw	r22, r14
     af0:	ca 01       	movw	r24, r20
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	ff 90       	pop	r15
     af8:	ef 90       	pop	r14
     afa:	df 90       	pop	r13
     afc:	08 95       	ret

00000afe <__unpack_f>:
     afe:	fc 01       	movw	r30, r24
     b00:	db 01       	movw	r26, r22
     b02:	40 81       	ld	r20, Z
     b04:	51 81       	ldd	r21, Z+1	; 0x01
     b06:	22 81       	ldd	r18, Z+2	; 0x02
     b08:	62 2f       	mov	r22, r18
     b0a:	6f 77       	andi	r22, 0x7F	; 127
     b0c:	70 e0       	ldi	r23, 0x00	; 0
     b0e:	22 1f       	adc	r18, r18
     b10:	22 27       	eor	r18, r18
     b12:	22 1f       	adc	r18, r18
     b14:	93 81       	ldd	r25, Z+3	; 0x03
     b16:	89 2f       	mov	r24, r25
     b18:	88 0f       	add	r24, r24
     b1a:	82 2b       	or	r24, r18
     b1c:	28 2f       	mov	r18, r24
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	99 1f       	adc	r25, r25
     b22:	99 27       	eor	r25, r25
     b24:	99 1f       	adc	r25, r25
     b26:	11 96       	adiw	r26, 0x01	; 1
     b28:	9c 93       	st	X, r25
     b2a:	11 97       	sbiw	r26, 0x01	; 1
     b2c:	21 15       	cp	r18, r1
     b2e:	31 05       	cpc	r19, r1
     b30:	a9 f5       	brne	.+106    	; 0xb9c <__unpack_f+0x9e>
     b32:	41 15       	cp	r20, r1
     b34:	51 05       	cpc	r21, r1
     b36:	61 05       	cpc	r22, r1
     b38:	71 05       	cpc	r23, r1
     b3a:	11 f4       	brne	.+4      	; 0xb40 <__unpack_f+0x42>
     b3c:	82 e0       	ldi	r24, 0x02	; 2
     b3e:	37 c0       	rjmp	.+110    	; 0xbae <__unpack_f+0xb0>
     b40:	82 e8       	ldi	r24, 0x82	; 130
     b42:	9f ef       	ldi	r25, 0xFF	; 255
     b44:	13 96       	adiw	r26, 0x03	; 3
     b46:	9c 93       	st	X, r25
     b48:	8e 93       	st	-X, r24
     b4a:	12 97       	sbiw	r26, 0x02	; 2
     b4c:	9a 01       	movw	r18, r20
     b4e:	ab 01       	movw	r20, r22
     b50:	67 e0       	ldi	r22, 0x07	; 7
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	6a 95       	dec	r22
     b5c:	d1 f7       	brne	.-12     	; 0xb52 <__unpack_f+0x54>
     b5e:	83 e0       	ldi	r24, 0x03	; 3
     b60:	8c 93       	st	X, r24
     b62:	0d c0       	rjmp	.+26     	; 0xb7e <__unpack_f+0x80>
     b64:	22 0f       	add	r18, r18
     b66:	33 1f       	adc	r19, r19
     b68:	44 1f       	adc	r20, r20
     b6a:	55 1f       	adc	r21, r21
     b6c:	12 96       	adiw	r26, 0x02	; 2
     b6e:	8d 91       	ld	r24, X+
     b70:	9c 91       	ld	r25, X
     b72:	13 97       	sbiw	r26, 0x03	; 3
     b74:	01 97       	sbiw	r24, 0x01	; 1
     b76:	13 96       	adiw	r26, 0x03	; 3
     b78:	9c 93       	st	X, r25
     b7a:	8e 93       	st	-X, r24
     b7c:	12 97       	sbiw	r26, 0x02	; 2
     b7e:	20 30       	cpi	r18, 0x00	; 0
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	38 07       	cpc	r19, r24
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	48 07       	cpc	r20, r24
     b88:	80 e4       	ldi	r24, 0x40	; 64
     b8a:	58 07       	cpc	r21, r24
     b8c:	58 f3       	brcs	.-42     	; 0xb64 <__unpack_f+0x66>
     b8e:	14 96       	adiw	r26, 0x04	; 4
     b90:	2d 93       	st	X+, r18
     b92:	3d 93       	st	X+, r19
     b94:	4d 93       	st	X+, r20
     b96:	5c 93       	st	X, r21
     b98:	17 97       	sbiw	r26, 0x07	; 7
     b9a:	08 95       	ret
     b9c:	2f 3f       	cpi	r18, 0xFF	; 255
     b9e:	31 05       	cpc	r19, r1
     ba0:	79 f4       	brne	.+30     	; 0xbc0 <__unpack_f+0xc2>
     ba2:	41 15       	cp	r20, r1
     ba4:	51 05       	cpc	r21, r1
     ba6:	61 05       	cpc	r22, r1
     ba8:	71 05       	cpc	r23, r1
     baa:	19 f4       	brne	.+6      	; 0xbb2 <__unpack_f+0xb4>
     bac:	84 e0       	ldi	r24, 0x04	; 4
     bae:	8c 93       	st	X, r24
     bb0:	08 95       	ret
     bb2:	64 ff       	sbrs	r22, 4
     bb4:	03 c0       	rjmp	.+6      	; 0xbbc <__unpack_f+0xbe>
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	8c 93       	st	X, r24
     bba:	12 c0       	rjmp	.+36     	; 0xbe0 <__unpack_f+0xe2>
     bbc:	1c 92       	st	X, r1
     bbe:	10 c0       	rjmp	.+32     	; 0xbe0 <__unpack_f+0xe2>
     bc0:	2f 57       	subi	r18, 0x7F	; 127
     bc2:	30 40       	sbci	r19, 0x00	; 0
     bc4:	13 96       	adiw	r26, 0x03	; 3
     bc6:	3c 93       	st	X, r19
     bc8:	2e 93       	st	-X, r18
     bca:	12 97       	sbiw	r26, 0x02	; 2
     bcc:	83 e0       	ldi	r24, 0x03	; 3
     bce:	8c 93       	st	X, r24
     bd0:	87 e0       	ldi	r24, 0x07	; 7
     bd2:	44 0f       	add	r20, r20
     bd4:	55 1f       	adc	r21, r21
     bd6:	66 1f       	adc	r22, r22
     bd8:	77 1f       	adc	r23, r23
     bda:	8a 95       	dec	r24
     bdc:	d1 f7       	brne	.-12     	; 0xbd2 <__unpack_f+0xd4>
     bde:	70 64       	ori	r23, 0x40	; 64
     be0:	14 96       	adiw	r26, 0x04	; 4
     be2:	4d 93       	st	X+, r20
     be4:	5d 93       	st	X+, r21
     be6:	6d 93       	st	X+, r22
     be8:	7c 93       	st	X, r23
     bea:	17 97       	sbiw	r26, 0x07	; 7
     bec:	08 95       	ret

00000bee <__fpcmp_parts_f>:
     bee:	1f 93       	push	r17
     bf0:	dc 01       	movw	r26, r24
     bf2:	fb 01       	movw	r30, r22
     bf4:	9c 91       	ld	r25, X
     bf6:	92 30       	cpi	r25, 0x02	; 2
     bf8:	08 f4       	brcc	.+2      	; 0xbfc <__fpcmp_parts_f+0xe>
     bfa:	47 c0       	rjmp	.+142    	; 0xc8a <__fpcmp_parts_f+0x9c>
     bfc:	80 81       	ld	r24, Z
     bfe:	82 30       	cpi	r24, 0x02	; 2
     c00:	08 f4       	brcc	.+2      	; 0xc04 <__fpcmp_parts_f+0x16>
     c02:	43 c0       	rjmp	.+134    	; 0xc8a <__fpcmp_parts_f+0x9c>
     c04:	94 30       	cpi	r25, 0x04	; 4
     c06:	51 f4       	brne	.+20     	; 0xc1c <__fpcmp_parts_f+0x2e>
     c08:	11 96       	adiw	r26, 0x01	; 1
     c0a:	1c 91       	ld	r17, X
     c0c:	84 30       	cpi	r24, 0x04	; 4
     c0e:	99 f5       	brne	.+102    	; 0xc76 <__fpcmp_parts_f+0x88>
     c10:	81 81       	ldd	r24, Z+1	; 0x01
     c12:	68 2f       	mov	r22, r24
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	61 1b       	sub	r22, r17
     c18:	71 09       	sbc	r23, r1
     c1a:	3f c0       	rjmp	.+126    	; 0xc9a <__fpcmp_parts_f+0xac>
     c1c:	84 30       	cpi	r24, 0x04	; 4
     c1e:	21 f0       	breq	.+8      	; 0xc28 <__fpcmp_parts_f+0x3a>
     c20:	92 30       	cpi	r25, 0x02	; 2
     c22:	31 f4       	brne	.+12     	; 0xc30 <__fpcmp_parts_f+0x42>
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	b9 f1       	breq	.+110    	; 0xc96 <__fpcmp_parts_f+0xa8>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	88 23       	and	r24, r24
     c2c:	89 f1       	breq	.+98     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c2e:	2d c0       	rjmp	.+90     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c30:	11 96       	adiw	r26, 0x01	; 1
     c32:	1c 91       	ld	r17, X
     c34:	11 97       	sbiw	r26, 0x01	; 1
     c36:	82 30       	cpi	r24, 0x02	; 2
     c38:	f1 f0       	breq	.+60     	; 0xc76 <__fpcmp_parts_f+0x88>
     c3a:	81 81       	ldd	r24, Z+1	; 0x01
     c3c:	18 17       	cp	r17, r24
     c3e:	d9 f4       	brne	.+54     	; 0xc76 <__fpcmp_parts_f+0x88>
     c40:	12 96       	adiw	r26, 0x02	; 2
     c42:	2d 91       	ld	r18, X+
     c44:	3c 91       	ld	r19, X
     c46:	13 97       	sbiw	r26, 0x03	; 3
     c48:	82 81       	ldd	r24, Z+2	; 0x02
     c4a:	93 81       	ldd	r25, Z+3	; 0x03
     c4c:	82 17       	cp	r24, r18
     c4e:	93 07       	cpc	r25, r19
     c50:	94 f0       	brlt	.+36     	; 0xc76 <__fpcmp_parts_f+0x88>
     c52:	28 17       	cp	r18, r24
     c54:	39 07       	cpc	r19, r25
     c56:	bc f0       	brlt	.+46     	; 0xc86 <__fpcmp_parts_f+0x98>
     c58:	14 96       	adiw	r26, 0x04	; 4
     c5a:	8d 91       	ld	r24, X+
     c5c:	9d 91       	ld	r25, X+
     c5e:	0d 90       	ld	r0, X+
     c60:	bc 91       	ld	r27, X
     c62:	a0 2d       	mov	r26, r0
     c64:	24 81       	ldd	r18, Z+4	; 0x04
     c66:	35 81       	ldd	r19, Z+5	; 0x05
     c68:	46 81       	ldd	r20, Z+6	; 0x06
     c6a:	57 81       	ldd	r21, Z+7	; 0x07
     c6c:	28 17       	cp	r18, r24
     c6e:	39 07       	cpc	r19, r25
     c70:	4a 07       	cpc	r20, r26
     c72:	5b 07       	cpc	r21, r27
     c74:	18 f4       	brcc	.+6      	; 0xc7c <__fpcmp_parts_f+0x8e>
     c76:	11 23       	and	r17, r17
     c78:	41 f0       	breq	.+16     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c7a:	0a c0       	rjmp	.+20     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c7c:	82 17       	cp	r24, r18
     c7e:	93 07       	cpc	r25, r19
     c80:	a4 07       	cpc	r26, r20
     c82:	b5 07       	cpc	r27, r21
     c84:	40 f4       	brcc	.+16     	; 0xc96 <__fpcmp_parts_f+0xa8>
     c86:	11 23       	and	r17, r17
     c88:	19 f0       	breq	.+6      	; 0xc90 <__fpcmp_parts_f+0xa2>
     c8a:	61 e0       	ldi	r22, 0x01	; 1
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	05 c0       	rjmp	.+10     	; 0xc9a <__fpcmp_parts_f+0xac>
     c90:	6f ef       	ldi	r22, 0xFF	; 255
     c92:	7f ef       	ldi	r23, 0xFF	; 255
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <__fpcmp_parts_f+0xac>
     c96:	60 e0       	ldi	r22, 0x00	; 0
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	cb 01       	movw	r24, r22
     c9c:	1f 91       	pop	r17
     c9e:	08 95       	ret

00000ca0 <ADC_VidInIt>:
#include"ADC_config.h"
#include"ADC_private.h"
#include"ADC_interface.h"

void ADC_VidInIt(void)
{
     ca0:	df 93       	push	r29
     ca2:	cf 93       	push	r28
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
	/*vcc reference voltage*/
	SET_BIT(ADMUX,ADMUX_REFS0);
     ca8:	a7 e2       	ldi	r26, 0x27	; 39
     caa:	b0 e0       	ldi	r27, 0x00	; 0
     cac:	e7 e2       	ldi	r30, 0x27	; 39
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	80 81       	ld	r24, Z
     cb2:	80 64       	ori	r24, 0x40	; 64
     cb4:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,ADMUX_REFS1);
     cb6:	a7 e2       	ldi	r26, 0x27	; 39
     cb8:	b0 e0       	ldi	r27, 0x00	; 0
     cba:	e7 e2       	ldi	r30, 0x27	; 39
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	80 81       	ld	r24, Z
     cc0:	8f 77       	andi	r24, 0x7F	; 127
     cc2:	8c 93       	st	X, r24

	/*ACTIVE RIGHT ADJUST*/
	CLR_BIT(ADMUX,ADMUX_ADLAR);
     cc4:	a7 e2       	ldi	r26, 0x27	; 39
     cc6:	b0 e0       	ldi	r27, 0x00	; 0
     cc8:	e7 e2       	ldi	r30, 0x27	; 39
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	80 81       	ld	r24, Z
     cce:	8f 7d       	andi	r24, 0xDF	; 223
     cd0:	8c 93       	st	X, r24

	/*ADC CLOCK (PRESCALER)*/
	SET_BIT(ADCSRA,ADCSRA_ADPS2);
     cd2:	a6 e2       	ldi	r26, 0x26	; 38
     cd4:	b0 e0       	ldi	r27, 0x00	; 0
     cd6:	e6 e2       	ldi	r30, 0x26	; 38
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	80 81       	ld	r24, Z
     cdc:	84 60       	ori	r24, 0x04	; 4
     cde:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADCSRA_ADPS1);
     ce0:	a6 e2       	ldi	r26, 0x26	; 38
     ce2:	b0 e0       	ldi	r27, 0x00	; 0
     ce4:	e6 e2       	ldi	r30, 0x26	; 38
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	80 81       	ld	r24, Z
     cea:	82 60       	ori	r24, 0x02	; 2
     cec:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADCSRA_ADPS0);
     cee:	a6 e2       	ldi	r26, 0x26	; 38
     cf0:	b0 e0       	ldi	r27, 0x00	; 0
     cf2:	e6 e2       	ldi	r30, 0x26	; 38
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	80 81       	ld	r24, Z
     cf8:	81 60       	ori	r24, 0x01	; 1
     cfa:	8c 93       	st	X, r24

	/*Enable ADC*/

	SET_BIT(ADCSRA,ADCSRA_ADEN);
     cfc:	a6 e2       	ldi	r26, 0x26	; 38
     cfe:	b0 e0       	ldi	r27, 0x00	; 0
     d00:	e6 e2       	ldi	r30, 0x26	; 38
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	80 81       	ld	r24, Z
     d06:	80 68       	ori	r24, 0x80	; 128
     d08:	8c 93       	st	X, r24


}
     d0a:	cf 91       	pop	r28
     d0c:	df 91       	pop	r29
     d0e:	08 95       	ret

00000d10 <ADC_u16ReadChannelSyn>:
u16 ADC_u16ReadChannelSyn(u8 Copy_u8Channel)
{
     d10:	df 93       	push	r29
     d12:	cf 93       	push	r28
     d14:	0f 92       	push	r0
     d16:	cd b7       	in	r28, 0x3d	; 61
     d18:	de b7       	in	r29, 0x3e	; 62
     d1a:	89 83       	std	Y+1, r24	; 0x01
	/*CLEAR THE MUX OF BITS*/
	ADMUX&=0b11100000;
     d1c:	a7 e2       	ldi	r26, 0x27	; 39
     d1e:	b0 e0       	ldi	r27, 0x00	; 0
     d20:	e7 e2       	ldi	r30, 0x27	; 39
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	80 81       	ld	r24, Z
     d26:	80 7e       	andi	r24, 0xE0	; 224
     d28:	8c 93       	st	X, r24

	/*SET THE REQUIRED CHANNEL INTO THE MUX*/
	ADMUX|=Copy_u8Channel;
     d2a:	a7 e2       	ldi	r26, 0x27	; 39
     d2c:	b0 e0       	ldi	r27, 0x00	; 0
     d2e:	e7 e2       	ldi	r30, 0x27	; 39
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	90 81       	ld	r25, Z
     d34:	89 81       	ldd	r24, Y+1	; 0x01
     d36:	89 2b       	or	r24, r25
     d38:	8c 93       	st	X, r24

	/*START CONVERSION*/
	SET_BIT(ADCSRA,ADCSRA_ADSC);
     d3a:	a6 e2       	ldi	r26, 0x26	; 38
     d3c:	b0 e0       	ldi	r27, 0x00	; 0
     d3e:	e6 e2       	ldi	r30, 0x26	; 38
     d40:	f0 e0       	ldi	r31, 0x00	; 0
     d42:	80 81       	ld	r24, Z
     d44:	80 64       	ori	r24, 0x40	; 64
     d46:	8c 93       	st	X, r24

	/*POLLING (BUSY WAITING) UNTIL THE CONVERSION COMPLETE FLAG IS SET*/
	while((GET_BIT(ADCSRA,ADCSRA_ADIF))==0);
     d48:	e6 e2       	ldi	r30, 0x26	; 38
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	80 81       	ld	r24, Z
     d4e:	82 95       	swap	r24
     d50:	8f 70       	andi	r24, 0x0F	; 15
     d52:	88 2f       	mov	r24, r24
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	81 70       	andi	r24, 0x01	; 1
     d58:	90 70       	andi	r25, 0x00	; 0
     d5a:	00 97       	sbiw	r24, 0x00	; 0
     d5c:	a9 f3       	breq	.-22     	; 0xd48 <ADC_u16ReadChannelSyn+0x38>

	/*CLEAR THE CONVERSION COMPLETE FLAG*/
	SET_BIT(ADCSRA,ADCSRA_ADIF);
     d5e:	a6 e2       	ldi	r26, 0x26	; 38
     d60:	b0 e0       	ldi	r27, 0x00	; 0
     d62:	e6 e2       	ldi	r30, 0x26	; 38
     d64:	f0 e0       	ldi	r31, 0x00	; 0
     d66:	80 81       	ld	r24, Z
     d68:	80 61       	ori	r24, 0x10	; 16
     d6a:	8c 93       	st	X, r24

	/*RETURN THE CONVERSION READING*/
	return ADCL_H;
     d6c:	e4 e2       	ldi	r30, 0x24	; 36
     d6e:	f0 e0       	ldi	r31, 0x00	; 0
     d70:	80 81       	ld	r24, Z
     d72:	91 81       	ldd	r25, Z+1	; 0x01
}
     d74:	0f 90       	pop	r0
     d76:	cf 91       	pop	r28
     d78:	df 91       	pop	r29
     d7a:	08 95       	ret

00000d7c <KPD_voidInitPins>:
#include "KPD_Private.h"
#include "KPD_Cfg.h"


void KPD_voidInitPins(void)
{
     d7c:	df 93       	push	r29
     d7e:	cf 93       	push	r28
     d80:	00 d0       	rcall	.+0      	; 0xd82 <KPD_voidInitPins+0x6>
     d82:	cd b7       	in	r28, 0x3d	; 61
     d84:	de b7       	in	r29, 0x3e	; 62
	/* Init Rows */
	for (u8 loc_counter = 0 ; loc_counter < ROWS_NUMBER ; loc_counter++ )
     d86:	1a 82       	std	Y+2, r1	; 0x02
     d88:	29 c0       	rjmp	.+82     	; 0xddc <KPD_voidInitPins+0x60>
	{
		/* Set Rows as output */
		MDIO_vidSetPinDirection(KPD_rowPort[loc_counter] ,KPD_rowPins[loc_counter] ,OUTPUT );
     d8a:	8a 81       	ldd	r24, Y+2	; 0x02
     d8c:	88 2f       	mov	r24, r24
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	fc 01       	movw	r30, r24
     d92:	ed 5f       	subi	r30, 0xFD	; 253
     d94:	fd 4f       	sbci	r31, 0xFD	; 253
     d96:	20 81       	ld	r18, Z
     d98:	8a 81       	ldd	r24, Y+2	; 0x02
     d9a:	88 2f       	mov	r24, r24
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	fc 01       	movw	r30, r24
     da0:	e9 5f       	subi	r30, 0xF9	; 249
     da2:	fd 4f       	sbci	r31, 0xFD	; 253
     da4:	90 81       	ld	r25, Z
     da6:	82 2f       	mov	r24, r18
     da8:	69 2f       	mov	r22, r25
     daa:	41 e0       	ldi	r20, 0x01	; 1
     dac:	0e 94 6d 10 	call	0x20da	; 0x20da <MDIO_vidSetPinDirection>
		/* Init Rows with High */
		MDIO_vidSetPinValue(KPD_rowPort[loc_counter] ,KPD_rowPins[loc_counter] ,HIGH );
     db0:	8a 81       	ldd	r24, Y+2	; 0x02
     db2:	88 2f       	mov	r24, r24
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	fc 01       	movw	r30, r24
     db8:	ed 5f       	subi	r30, 0xFD	; 253
     dba:	fd 4f       	sbci	r31, 0xFD	; 253
     dbc:	20 81       	ld	r18, Z
     dbe:	8a 81       	ldd	r24, Y+2	; 0x02
     dc0:	88 2f       	mov	r24, r24
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	fc 01       	movw	r30, r24
     dc6:	e9 5f       	subi	r30, 0xF9	; 249
     dc8:	fd 4f       	sbci	r31, 0xFD	; 253
     dca:	90 81       	ld	r25, Z
     dcc:	82 2f       	mov	r24, r18
     dce:	69 2f       	mov	r22, r25
     dd0:	41 e0       	ldi	r20, 0x01	; 1
     dd2:	0e 94 77 11 	call	0x22ee	; 0x22ee <MDIO_vidSetPinValue>


void KPD_voidInitPins(void)
{
	/* Init Rows */
	for (u8 loc_counter = 0 ; loc_counter < ROWS_NUMBER ; loc_counter++ )
     dd6:	8a 81       	ldd	r24, Y+2	; 0x02
     dd8:	8f 5f       	subi	r24, 0xFF	; 255
     dda:	8a 83       	std	Y+2, r24	; 0x02
     ddc:	8a 81       	ldd	r24, Y+2	; 0x02
     dde:	84 30       	cpi	r24, 0x04	; 4
     de0:	a0 f2       	brcs	.-88     	; 0xd8a <KPD_voidInitPins+0xe>
		/* Init Rows with High */
		MDIO_vidSetPinValue(KPD_rowPort[loc_counter] ,KPD_rowPins[loc_counter] ,HIGH );
	}

	/* Init Columns */
	for (u8 loc_counter = 0 ; loc_counter < COLUMNS_NUMBER ; loc_counter++)
     de2:	19 82       	std	Y+1, r1	; 0x01
     de4:	29 c0       	rjmp	.+82     	; 0xe38 <KPD_voidInitPins+0xbc>
	{
		/* Set columns as input*/
		MDIO_vidSetPinDirection(KPD_coloumsPort[loc_counter] ,KPD_coloumsPins[loc_counter] ,INPUT );
     de6:	89 81       	ldd	r24, Y+1	; 0x01
     de8:	88 2f       	mov	r24, r24
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	fc 01       	movw	r30, r24
     dee:	e5 5f       	subi	r30, 0xF5	; 245
     df0:	fd 4f       	sbci	r31, 0xFD	; 253
     df2:	20 81       	ld	r18, Z
     df4:	89 81       	ldd	r24, Y+1	; 0x01
     df6:	88 2f       	mov	r24, r24
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	fc 01       	movw	r30, r24
     dfc:	e1 5f       	subi	r30, 0xF1	; 241
     dfe:	fd 4f       	sbci	r31, 0xFD	; 253
     e00:	90 81       	ld	r25, Z
     e02:	82 2f       	mov	r24, r18
     e04:	69 2f       	mov	r22, r25
     e06:	40 e0       	ldi	r20, 0x00	; 0
     e08:	0e 94 6d 10 	call	0x20da	; 0x20da <MDIO_vidSetPinDirection>
		/* Enable pull up*/
		MDIO_vidSetPinValue(KPD_coloumsPort[loc_counter] ,KPD_coloumsPins[loc_counter] ,HIGH );
     e0c:	89 81       	ldd	r24, Y+1	; 0x01
     e0e:	88 2f       	mov	r24, r24
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	fc 01       	movw	r30, r24
     e14:	e5 5f       	subi	r30, 0xF5	; 245
     e16:	fd 4f       	sbci	r31, 0xFD	; 253
     e18:	20 81       	ld	r18, Z
     e1a:	89 81       	ldd	r24, Y+1	; 0x01
     e1c:	88 2f       	mov	r24, r24
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	fc 01       	movw	r30, r24
     e22:	e1 5f       	subi	r30, 0xF1	; 241
     e24:	fd 4f       	sbci	r31, 0xFD	; 253
     e26:	90 81       	ld	r25, Z
     e28:	82 2f       	mov	r24, r18
     e2a:	69 2f       	mov	r22, r25
     e2c:	41 e0       	ldi	r20, 0x01	; 1
     e2e:	0e 94 77 11 	call	0x22ee	; 0x22ee <MDIO_vidSetPinValue>
		/* Init Rows with High */
		MDIO_vidSetPinValue(KPD_rowPort[loc_counter] ,KPD_rowPins[loc_counter] ,HIGH );
	}

	/* Init Columns */
	for (u8 loc_counter = 0 ; loc_counter < COLUMNS_NUMBER ; loc_counter++)
     e32:	89 81       	ldd	r24, Y+1	; 0x01
     e34:	8f 5f       	subi	r24, 0xFF	; 255
     e36:	89 83       	std	Y+1, r24	; 0x01
     e38:	89 81       	ldd	r24, Y+1	; 0x01
     e3a:	84 30       	cpi	r24, 0x04	; 4
     e3c:	a0 f2       	brcs	.-88     	; 0xde6 <KPD_voidInitPins+0x6a>
		/* Set columns as input*/
		MDIO_vidSetPinDirection(KPD_coloumsPort[loc_counter] ,KPD_coloumsPins[loc_counter] ,INPUT );
		/* Enable pull up*/
		MDIO_vidSetPinValue(KPD_coloumsPort[loc_counter] ,KPD_coloumsPins[loc_counter] ,HIGH );
	}
}
     e3e:	0f 90       	pop	r0
     e40:	0f 90       	pop	r0
     e42:	cf 91       	pop	r28
     e44:	df 91       	pop	r29
     e46:	08 95       	ret

00000e48 <KPD_u8GetPressedKey>:


u8 KPD_u8GetPressedKey(void)
{
     e48:	df 93       	push	r29
     e4a:	cf 93       	push	r28
     e4c:	cd b7       	in	r28, 0x3d	; 61
     e4e:	de b7       	in	r29, 0x3e	; 62
     e50:	62 97       	sbiw	r28, 0x12	; 18
     e52:	0f b6       	in	r0, 0x3f	; 63
     e54:	f8 94       	cli
     e56:	de bf       	out	0x3e, r29	; 62
     e58:	0f be       	out	0x3f, r0	; 63
     e5a:	cd bf       	out	0x3d, r28	; 61
	s8 loc_pressed_key = 0 ;
     e5c:	19 8a       	std	Y+17, r1	; 0x11
	u8 loc_keyState ;

	for (u8 loc_row = 0 ; loc_row < ROWS_NUMBER ; loc_row++ )
     e5e:	18 8a       	std	Y+16, r1	; 0x10
     e60:	e9 c0       	rjmp	.+466    	; 0x1034 <KPD_u8GetPressedKey+0x1ec>
	{
		/* Activate one row */
		MDIO_vidSetPinValue(KPD_rowPort[loc_row] , KPD_rowPins[loc_row] , LOW);
     e62:	88 89       	ldd	r24, Y+16	; 0x10
     e64:	88 2f       	mov	r24, r24
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	fc 01       	movw	r30, r24
     e6a:	ed 5f       	subi	r30, 0xFD	; 253
     e6c:	fd 4f       	sbci	r31, 0xFD	; 253
     e6e:	20 81       	ld	r18, Z
     e70:	88 89       	ldd	r24, Y+16	; 0x10
     e72:	88 2f       	mov	r24, r24
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	fc 01       	movw	r30, r24
     e78:	e9 5f       	subi	r30, 0xF9	; 249
     e7a:	fd 4f       	sbci	r31, 0xFD	; 253
     e7c:	90 81       	ld	r25, Z
     e7e:	82 2f       	mov	r24, r18
     e80:	69 2f       	mov	r22, r25
     e82:	40 e0       	ldi	r20, 0x00	; 0
     e84:	0e 94 77 11 	call	0x22ee	; 0x22ee <MDIO_vidSetPinValue>

		/* Check on columns */
		for (u8 loc_col = 0 ; loc_col < COLUMNS_NUMBER ; loc_col++ )
     e88:	1f 86       	std	Y+15, r1	; 0x0f
     e8a:	ba c0       	rjmp	.+372    	; 0x1000 <KPD_u8GetPressedKey+0x1b8>
		{
			MDIO_vidGetPinValue(KPD_coloumsPort[loc_col] ,KPD_coloumsPins[loc_col],&loc_keyState );
     e8c:	8f 85       	ldd	r24, Y+15	; 0x0f
     e8e:	88 2f       	mov	r24, r24
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	fc 01       	movw	r30, r24
     e94:	e5 5f       	subi	r30, 0xF5	; 245
     e96:	fd 4f       	sbci	r31, 0xFD	; 253
     e98:	40 81       	ld	r20, Z
     e9a:	8f 85       	ldd	r24, Y+15	; 0x0f
     e9c:	88 2f       	mov	r24, r24
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	fc 01       	movw	r30, r24
     ea2:	e1 5f       	subi	r30, 0xF1	; 241
     ea4:	fd 4f       	sbci	r31, 0xFD	; 253
     ea6:	90 81       	ld	r25, Z
     ea8:	9e 01       	movw	r18, r28
     eaa:	2e 5e       	subi	r18, 0xEE	; 238
     eac:	3f 4f       	sbci	r19, 0xFF	; 255
     eae:	84 2f       	mov	r24, r20
     eb0:	69 2f       	mov	r22, r25
     eb2:	a9 01       	movw	r20, r18
     eb4:	0e 94 81 12 	call	0x2502	; 0x2502 <MDIO_vidGetPinValue>
			/* Check on column */
			if (loc_keyState == 0)
     eb8:	8a 89       	ldd	r24, Y+18	; 0x12
     eba:	88 23       	and	r24, r24
     ebc:	49 f5       	brne	.+82     	; 0xf10 <KPD_u8GetPressedKey+0xc8>
			{
				loc_pressed_key = KPD_SwitchVal[loc_row][loc_col];
     ebe:	88 89       	ldd	r24, Y+16	; 0x10
     ec0:	48 2f       	mov	r20, r24
     ec2:	50 e0       	ldi	r21, 0x00	; 0
     ec4:	8f 85       	ldd	r24, Y+15	; 0x0f
     ec6:	28 2f       	mov	r18, r24
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	ca 01       	movw	r24, r20
     ecc:	88 0f       	add	r24, r24
     ece:	99 1f       	adc	r25, r25
     ed0:	88 0f       	add	r24, r24
     ed2:	99 1f       	adc	r25, r25
     ed4:	82 0f       	add	r24, r18
     ed6:	93 1f       	adc	r25, r19
     ed8:	fc 01       	movw	r30, r24
     eda:	ed 50       	subi	r30, 0x0D	; 13
     edc:	fe 4f       	sbci	r31, 0xFE	; 254
     ede:	80 81       	ld	r24, Z
     ee0:	89 8b       	std	Y+17, r24	; 0x11
     ee2:	16 c0       	rjmp	.+44     	; 0xf10 <KPD_u8GetPressedKey+0xc8>
			}

			/* Wait to release the key */
			while (loc_keyState == 0)
			{
				MDIO_vidGetPinValue(KPD_coloumsPort[loc_col] ,KPD_coloumsPins[loc_col],&loc_keyState );
     ee4:	8f 85       	ldd	r24, Y+15	; 0x0f
     ee6:	88 2f       	mov	r24, r24
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	fc 01       	movw	r30, r24
     eec:	e5 5f       	subi	r30, 0xF5	; 245
     eee:	fd 4f       	sbci	r31, 0xFD	; 253
     ef0:	40 81       	ld	r20, Z
     ef2:	8f 85       	ldd	r24, Y+15	; 0x0f
     ef4:	88 2f       	mov	r24, r24
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	fc 01       	movw	r30, r24
     efa:	e1 5f       	subi	r30, 0xF1	; 241
     efc:	fd 4f       	sbci	r31, 0xFD	; 253
     efe:	90 81       	ld	r25, Z
     f00:	9e 01       	movw	r18, r28
     f02:	2e 5e       	subi	r18, 0xEE	; 238
     f04:	3f 4f       	sbci	r19, 0xFF	; 255
     f06:	84 2f       	mov	r24, r20
     f08:	69 2f       	mov	r22, r25
     f0a:	a9 01       	movw	r20, r18
     f0c:	0e 94 81 12 	call	0x2502	; 0x2502 <MDIO_vidGetPinValue>
			{
				loc_pressed_key = KPD_SwitchVal[loc_row][loc_col];
			}

			/* Wait to release the key */
			while (loc_keyState == 0)
     f10:	8a 89       	ldd	r24, Y+18	; 0x12
     f12:	88 23       	and	r24, r24
     f14:	39 f3       	breq	.-50     	; 0xee4 <KPD_u8GetPressedKey+0x9c>
     f16:	80 e0       	ldi	r24, 0x00	; 0
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	a0 e2       	ldi	r26, 0x20	; 32
     f1c:	b1 e4       	ldi	r27, 0x41	; 65
     f1e:	8b 87       	std	Y+11, r24	; 0x0b
     f20:	9c 87       	std	Y+12, r25	; 0x0c
     f22:	ad 87       	std	Y+13, r26	; 0x0d
     f24:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f26:	6b 85       	ldd	r22, Y+11	; 0x0b
     f28:	7c 85       	ldd	r23, Y+12	; 0x0c
     f2a:	8d 85       	ldd	r24, Y+13	; 0x0d
     f2c:	9e 85       	ldd	r25, Y+14	; 0x0e
     f2e:	20 e0       	ldi	r18, 0x00	; 0
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	4a ef       	ldi	r20, 0xFA	; 250
     f34:	54 e4       	ldi	r21, 0x44	; 68
     f36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f3a:	dc 01       	movw	r26, r24
     f3c:	cb 01       	movw	r24, r22
     f3e:	8f 83       	std	Y+7, r24	; 0x07
     f40:	98 87       	std	Y+8, r25	; 0x08
     f42:	a9 87       	std	Y+9, r26	; 0x09
     f44:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f46:	6f 81       	ldd	r22, Y+7	; 0x07
     f48:	78 85       	ldd	r23, Y+8	; 0x08
     f4a:	89 85       	ldd	r24, Y+9	; 0x09
     f4c:	9a 85       	ldd	r25, Y+10	; 0x0a
     f4e:	20 e0       	ldi	r18, 0x00	; 0
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	40 e8       	ldi	r20, 0x80	; 128
     f54:	5f e3       	ldi	r21, 0x3F	; 63
     f56:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f5a:	88 23       	and	r24, r24
     f5c:	2c f4       	brge	.+10     	; 0xf68 <KPD_u8GetPressedKey+0x120>
		__ticks = 1;
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	9e 83       	std	Y+6, r25	; 0x06
     f64:	8d 83       	std	Y+5, r24	; 0x05
     f66:	3f c0       	rjmp	.+126    	; 0xfe6 <KPD_u8GetPressedKey+0x19e>
	else if (__tmp > 65535)
     f68:	6f 81       	ldd	r22, Y+7	; 0x07
     f6a:	78 85       	ldd	r23, Y+8	; 0x08
     f6c:	89 85       	ldd	r24, Y+9	; 0x09
     f6e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f70:	20 e0       	ldi	r18, 0x00	; 0
     f72:	3f ef       	ldi	r19, 0xFF	; 255
     f74:	4f e7       	ldi	r20, 0x7F	; 127
     f76:	57 e4       	ldi	r21, 0x47	; 71
     f78:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f7c:	18 16       	cp	r1, r24
     f7e:	4c f5       	brge	.+82     	; 0xfd2 <KPD_u8GetPressedKey+0x18a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f80:	6b 85       	ldd	r22, Y+11	; 0x0b
     f82:	7c 85       	ldd	r23, Y+12	; 0x0c
     f84:	8d 85       	ldd	r24, Y+13	; 0x0d
     f86:	9e 85       	ldd	r25, Y+14	; 0x0e
     f88:	20 e0       	ldi	r18, 0x00	; 0
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	40 e2       	ldi	r20, 0x20	; 32
     f8e:	51 e4       	ldi	r21, 0x41	; 65
     f90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f94:	dc 01       	movw	r26, r24
     f96:	cb 01       	movw	r24, r22
     f98:	bc 01       	movw	r22, r24
     f9a:	cd 01       	movw	r24, r26
     f9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fa0:	dc 01       	movw	r26, r24
     fa2:	cb 01       	movw	r24, r22
     fa4:	9e 83       	std	Y+6, r25	; 0x06
     fa6:	8d 83       	std	Y+5, r24	; 0x05
     fa8:	0f c0       	rjmp	.+30     	; 0xfc8 <KPD_u8GetPressedKey+0x180>
     faa:	88 ec       	ldi	r24, 0xC8	; 200
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	9c 83       	std	Y+4, r25	; 0x04
     fb0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     fb2:	8b 81       	ldd	r24, Y+3	; 0x03
     fb4:	9c 81       	ldd	r25, Y+4	; 0x04
     fb6:	01 97       	sbiw	r24, 0x01	; 1
     fb8:	f1 f7       	brne	.-4      	; 0xfb6 <KPD_u8GetPressedKey+0x16e>
     fba:	9c 83       	std	Y+4, r25	; 0x04
     fbc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fbe:	8d 81       	ldd	r24, Y+5	; 0x05
     fc0:	9e 81       	ldd	r25, Y+6	; 0x06
     fc2:	01 97       	sbiw	r24, 0x01	; 1
     fc4:	9e 83       	std	Y+6, r25	; 0x06
     fc6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fc8:	8d 81       	ldd	r24, Y+5	; 0x05
     fca:	9e 81       	ldd	r25, Y+6	; 0x06
     fcc:	00 97       	sbiw	r24, 0x00	; 0
     fce:	69 f7       	brne	.-38     	; 0xfaa <KPD_u8GetPressedKey+0x162>
     fd0:	14 c0       	rjmp	.+40     	; 0xffa <KPD_u8GetPressedKey+0x1b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fd2:	6f 81       	ldd	r22, Y+7	; 0x07
     fd4:	78 85       	ldd	r23, Y+8	; 0x08
     fd6:	89 85       	ldd	r24, Y+9	; 0x09
     fd8:	9a 85       	ldd	r25, Y+10	; 0x0a
     fda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fde:	dc 01       	movw	r26, r24
     fe0:	cb 01       	movw	r24, r22
     fe2:	9e 83       	std	Y+6, r25	; 0x06
     fe4:	8d 83       	std	Y+5, r24	; 0x05
     fe6:	8d 81       	ldd	r24, Y+5	; 0x05
     fe8:	9e 81       	ldd	r25, Y+6	; 0x06
     fea:	9a 83       	std	Y+2, r25	; 0x02
     fec:	89 83       	std	Y+1, r24	; 0x01
     fee:	89 81       	ldd	r24, Y+1	; 0x01
     ff0:	9a 81       	ldd	r25, Y+2	; 0x02
     ff2:	01 97       	sbiw	r24, 0x01	; 1
     ff4:	f1 f7       	brne	.-4      	; 0xff2 <KPD_u8GetPressedKey+0x1aa>
     ff6:	9a 83       	std	Y+2, r25	; 0x02
     ff8:	89 83       	std	Y+1, r24	; 0x01
	{
		/* Activate one row */
		MDIO_vidSetPinValue(KPD_rowPort[loc_row] , KPD_rowPins[loc_row] , LOW);

		/* Check on columns */
		for (u8 loc_col = 0 ; loc_col < COLUMNS_NUMBER ; loc_col++ )
     ffa:	8f 85       	ldd	r24, Y+15	; 0x0f
     ffc:	8f 5f       	subi	r24, 0xFF	; 255
     ffe:	8f 87       	std	Y+15, r24	; 0x0f
    1000:	8f 85       	ldd	r24, Y+15	; 0x0f
    1002:	84 30       	cpi	r24, 0x04	; 4
    1004:	08 f4       	brcc	.+2      	; 0x1008 <KPD_u8GetPressedKey+0x1c0>
    1006:	42 cf       	rjmp	.-380    	; 0xe8c <KPD_u8GetPressedKey+0x44>
			_delay_ms(10);

		}

		/* Deactivate the row */
		MDIO_vidSetPinValue(KPD_rowPort[loc_row] , KPD_rowPins[loc_row] , HIGH);
    1008:	88 89       	ldd	r24, Y+16	; 0x10
    100a:	88 2f       	mov	r24, r24
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	fc 01       	movw	r30, r24
    1010:	ed 5f       	subi	r30, 0xFD	; 253
    1012:	fd 4f       	sbci	r31, 0xFD	; 253
    1014:	20 81       	ld	r18, Z
    1016:	88 89       	ldd	r24, Y+16	; 0x10
    1018:	88 2f       	mov	r24, r24
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	fc 01       	movw	r30, r24
    101e:	e9 5f       	subi	r30, 0xF9	; 249
    1020:	fd 4f       	sbci	r31, 0xFD	; 253
    1022:	90 81       	ld	r25, Z
    1024:	82 2f       	mov	r24, r18
    1026:	69 2f       	mov	r22, r25
    1028:	41 e0       	ldi	r20, 0x01	; 1
    102a:	0e 94 77 11 	call	0x22ee	; 0x22ee <MDIO_vidSetPinValue>
u8 KPD_u8GetPressedKey(void)
{
	s8 loc_pressed_key = 0 ;
	u8 loc_keyState ;

	for (u8 loc_row = 0 ; loc_row < ROWS_NUMBER ; loc_row++ )
    102e:	88 89       	ldd	r24, Y+16	; 0x10
    1030:	8f 5f       	subi	r24, 0xFF	; 255
    1032:	88 8b       	std	Y+16, r24	; 0x10
    1034:	88 89       	ldd	r24, Y+16	; 0x10
    1036:	84 30       	cpi	r24, 0x04	; 4
    1038:	08 f4       	brcc	.+2      	; 0x103c <KPD_u8GetPressedKey+0x1f4>
    103a:	13 cf       	rjmp	.-474    	; 0xe62 <KPD_u8GetPressedKey+0x1a>
		}

		/* Deactivate the row */
		MDIO_vidSetPinValue(KPD_rowPort[loc_row] , KPD_rowPins[loc_row] , HIGH);
	}
	return loc_pressed_key ;
    103c:	89 89       	ldd	r24, Y+17	; 0x11
}
    103e:	62 96       	adiw	r28, 0x12	; 18
    1040:	0f b6       	in	r0, 0x3f	; 63
    1042:	f8 94       	cli
    1044:	de bf       	out	0x3e, r29	; 62
    1046:	0f be       	out	0x3f, r0	; 63
    1048:	cd bf       	out	0x3d, r28	; 61
    104a:	cf 91       	pop	r28
    104c:	df 91       	pop	r29
    104e:	08 95       	ret

00001050 <LCD_voidInit>:
#include "LCD_Private.h"
#include "LCD_Cfg.h"


void LCD_voidInit(void)
{
    1050:	0f 93       	push	r16
    1052:	1f 93       	push	r17
    1054:	df 93       	push	r29
    1056:	cf 93       	push	r28
    1058:	cd b7       	in	r28, 0x3d	; 61
    105a:	de b7       	in	r29, 0x3e	; 62
    105c:	c4 55       	subi	r28, 0x54	; 84
    105e:	d0 40       	sbci	r29, 0x00	; 0
    1060:	0f b6       	in	r0, 0x3f	; 63
    1062:	f8 94       	cli
    1064:	de bf       	out	0x3e, r29	; 62
    1066:	0f be       	out	0x3f, r0	; 63
    1068:	cd bf       	out	0x3d, r28	; 61
	/* Initialize the Pins */
	MDIO_vidSetPinDirection(LCD_RS_PORT , LCD_RS_PIN , OUTPUT);
    106a:	81 e4       	ldi	r24, 0x41	; 65
    106c:	60 e0       	ldi	r22, 0x00	; 0
    106e:	41 e0       	ldi	r20, 0x01	; 1
    1070:	0e 94 6d 10 	call	0x20da	; 0x20da <MDIO_vidSetPinDirection>
	MDIO_vidSetPinDirection(LCD_RW_PORT ,LCD_RW_PIN , OUTPUT );
    1074:	81 e4       	ldi	r24, 0x41	; 65
    1076:	61 e0       	ldi	r22, 0x01	; 1
    1078:	41 e0       	ldi	r20, 0x01	; 1
    107a:	0e 94 6d 10 	call	0x20da	; 0x20da <MDIO_vidSetPinDirection>
	MDIO_vidSetPinDirection(LCD_E_PORT ,LCD_E_PIN , OUTPUT );
    107e:	81 e4       	ldi	r24, 0x41	; 65
    1080:	62 e0       	ldi	r22, 0x02	; 2
    1082:	41 e0       	ldi	r20, 0x01	; 1
    1084:	0e 94 6d 10 	call	0x20da	; 0x20da <MDIO_vidSetPinDirection>
	MDIO_vidSetPortDirection(LCD_DATA_PORT , OUTPUT);
    1088:	83 e4       	ldi	r24, 0x43	; 67
    108a:	61 e0       	ldi	r22, 0x01	; 1
    108c:	0e 94 05 13 	call	0x260a	; 0x260a <MDIO_vidSetPortDirection>
    1090:	fe 01       	movw	r30, r28
    1092:	ef 5a       	subi	r30, 0xAF	; 175
    1094:	ff 4f       	sbci	r31, 0xFF	; 255
    1096:	80 e0       	ldi	r24, 0x00	; 0
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	a0 ef       	ldi	r26, 0xF0	; 240
    109c:	b1 e4       	ldi	r27, 0x41	; 65
    109e:	80 83       	st	Z, r24
    10a0:	91 83       	std	Z+1, r25	; 0x01
    10a2:	a2 83       	std	Z+2, r26	; 0x02
    10a4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10a6:	8e 01       	movw	r16, r28
    10a8:	03 5b       	subi	r16, 0xB3	; 179
    10aa:	1f 4f       	sbci	r17, 0xFF	; 255
    10ac:	fe 01       	movw	r30, r28
    10ae:	ef 5a       	subi	r30, 0xAF	; 175
    10b0:	ff 4f       	sbci	r31, 0xFF	; 255
    10b2:	60 81       	ld	r22, Z
    10b4:	71 81       	ldd	r23, Z+1	; 0x01
    10b6:	82 81       	ldd	r24, Z+2	; 0x02
    10b8:	93 81       	ldd	r25, Z+3	; 0x03
    10ba:	20 e0       	ldi	r18, 0x00	; 0
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	4a ef       	ldi	r20, 0xFA	; 250
    10c0:	54 e4       	ldi	r21, 0x44	; 68
    10c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10c6:	dc 01       	movw	r26, r24
    10c8:	cb 01       	movw	r24, r22
    10ca:	f8 01       	movw	r30, r16
    10cc:	80 83       	st	Z, r24
    10ce:	91 83       	std	Z+1, r25	; 0x01
    10d0:	a2 83       	std	Z+2, r26	; 0x02
    10d2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    10d4:	fe 01       	movw	r30, r28
    10d6:	e3 5b       	subi	r30, 0xB3	; 179
    10d8:	ff 4f       	sbci	r31, 0xFF	; 255
    10da:	60 81       	ld	r22, Z
    10dc:	71 81       	ldd	r23, Z+1	; 0x01
    10de:	82 81       	ldd	r24, Z+2	; 0x02
    10e0:	93 81       	ldd	r25, Z+3	; 0x03
    10e2:	20 e0       	ldi	r18, 0x00	; 0
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	40 e8       	ldi	r20, 0x80	; 128
    10e8:	5f e3       	ldi	r21, 0x3F	; 63
    10ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10ee:	88 23       	and	r24, r24
    10f0:	44 f4       	brge	.+16     	; 0x1102 <LCD_voidInit+0xb2>
		__ticks = 1;
    10f2:	fe 01       	movw	r30, r28
    10f4:	e5 5b       	subi	r30, 0xB5	; 181
    10f6:	ff 4f       	sbci	r31, 0xFF	; 255
    10f8:	81 e0       	ldi	r24, 0x01	; 1
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	91 83       	std	Z+1, r25	; 0x01
    10fe:	80 83       	st	Z, r24
    1100:	64 c0       	rjmp	.+200    	; 0x11ca <LCD_voidInit+0x17a>
	else if (__tmp > 65535)
    1102:	fe 01       	movw	r30, r28
    1104:	e3 5b       	subi	r30, 0xB3	; 179
    1106:	ff 4f       	sbci	r31, 0xFF	; 255
    1108:	60 81       	ld	r22, Z
    110a:	71 81       	ldd	r23, Z+1	; 0x01
    110c:	82 81       	ldd	r24, Z+2	; 0x02
    110e:	93 81       	ldd	r25, Z+3	; 0x03
    1110:	20 e0       	ldi	r18, 0x00	; 0
    1112:	3f ef       	ldi	r19, 0xFF	; 255
    1114:	4f e7       	ldi	r20, 0x7F	; 127
    1116:	57 e4       	ldi	r21, 0x47	; 71
    1118:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    111c:	18 16       	cp	r1, r24
    111e:	0c f0       	brlt	.+2      	; 0x1122 <LCD_voidInit+0xd2>
    1120:	43 c0       	rjmp	.+134    	; 0x11a8 <LCD_voidInit+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1122:	fe 01       	movw	r30, r28
    1124:	ef 5a       	subi	r30, 0xAF	; 175
    1126:	ff 4f       	sbci	r31, 0xFF	; 255
    1128:	60 81       	ld	r22, Z
    112a:	71 81       	ldd	r23, Z+1	; 0x01
    112c:	82 81       	ldd	r24, Z+2	; 0x02
    112e:	93 81       	ldd	r25, Z+3	; 0x03
    1130:	20 e0       	ldi	r18, 0x00	; 0
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	40 e2       	ldi	r20, 0x20	; 32
    1136:	51 e4       	ldi	r21, 0x41	; 65
    1138:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    113c:	dc 01       	movw	r26, r24
    113e:	cb 01       	movw	r24, r22
    1140:	8e 01       	movw	r16, r28
    1142:	05 5b       	subi	r16, 0xB5	; 181
    1144:	1f 4f       	sbci	r17, 0xFF	; 255
    1146:	bc 01       	movw	r22, r24
    1148:	cd 01       	movw	r24, r26
    114a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    114e:	dc 01       	movw	r26, r24
    1150:	cb 01       	movw	r24, r22
    1152:	f8 01       	movw	r30, r16
    1154:	91 83       	std	Z+1, r25	; 0x01
    1156:	80 83       	st	Z, r24
    1158:	1f c0       	rjmp	.+62     	; 0x1198 <LCD_voidInit+0x148>
    115a:	fe 01       	movw	r30, r28
    115c:	e7 5b       	subi	r30, 0xB7	; 183
    115e:	ff 4f       	sbci	r31, 0xFF	; 255
    1160:	88 ec       	ldi	r24, 0xC8	; 200
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	91 83       	std	Z+1, r25	; 0x01
    1166:	80 83       	st	Z, r24
    1168:	fe 01       	movw	r30, r28
    116a:	e7 5b       	subi	r30, 0xB7	; 183
    116c:	ff 4f       	sbci	r31, 0xFF	; 255
    116e:	80 81       	ld	r24, Z
    1170:	91 81       	ldd	r25, Z+1	; 0x01
    1172:	01 97       	sbiw	r24, 0x01	; 1
    1174:	f1 f7       	brne	.-4      	; 0x1172 <LCD_voidInit+0x122>
    1176:	fe 01       	movw	r30, r28
    1178:	e7 5b       	subi	r30, 0xB7	; 183
    117a:	ff 4f       	sbci	r31, 0xFF	; 255
    117c:	91 83       	std	Z+1, r25	; 0x01
    117e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1180:	de 01       	movw	r26, r28
    1182:	a5 5b       	subi	r26, 0xB5	; 181
    1184:	bf 4f       	sbci	r27, 0xFF	; 255
    1186:	fe 01       	movw	r30, r28
    1188:	e5 5b       	subi	r30, 0xB5	; 181
    118a:	ff 4f       	sbci	r31, 0xFF	; 255
    118c:	80 81       	ld	r24, Z
    118e:	91 81       	ldd	r25, Z+1	; 0x01
    1190:	01 97       	sbiw	r24, 0x01	; 1
    1192:	11 96       	adiw	r26, 0x01	; 1
    1194:	9c 93       	st	X, r25
    1196:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1198:	fe 01       	movw	r30, r28
    119a:	e5 5b       	subi	r30, 0xB5	; 181
    119c:	ff 4f       	sbci	r31, 0xFF	; 255
    119e:	80 81       	ld	r24, Z
    11a0:	91 81       	ldd	r25, Z+1	; 0x01
    11a2:	00 97       	sbiw	r24, 0x00	; 0
    11a4:	d1 f6       	brne	.-76     	; 0x115a <LCD_voidInit+0x10a>
    11a6:	27 c0       	rjmp	.+78     	; 0x11f6 <LCD_voidInit+0x1a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11a8:	8e 01       	movw	r16, r28
    11aa:	05 5b       	subi	r16, 0xB5	; 181
    11ac:	1f 4f       	sbci	r17, 0xFF	; 255
    11ae:	fe 01       	movw	r30, r28
    11b0:	e3 5b       	subi	r30, 0xB3	; 179
    11b2:	ff 4f       	sbci	r31, 0xFF	; 255
    11b4:	60 81       	ld	r22, Z
    11b6:	71 81       	ldd	r23, Z+1	; 0x01
    11b8:	82 81       	ldd	r24, Z+2	; 0x02
    11ba:	93 81       	ldd	r25, Z+3	; 0x03
    11bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11c0:	dc 01       	movw	r26, r24
    11c2:	cb 01       	movw	r24, r22
    11c4:	f8 01       	movw	r30, r16
    11c6:	91 83       	std	Z+1, r25	; 0x01
    11c8:	80 83       	st	Z, r24
    11ca:	de 01       	movw	r26, r28
    11cc:	a9 5b       	subi	r26, 0xB9	; 185
    11ce:	bf 4f       	sbci	r27, 0xFF	; 255
    11d0:	fe 01       	movw	r30, r28
    11d2:	e5 5b       	subi	r30, 0xB5	; 181
    11d4:	ff 4f       	sbci	r31, 0xFF	; 255
    11d6:	80 81       	ld	r24, Z
    11d8:	91 81       	ldd	r25, Z+1	; 0x01
    11da:	8d 93       	st	X+, r24
    11dc:	9c 93       	st	X, r25
    11de:	fe 01       	movw	r30, r28
    11e0:	e9 5b       	subi	r30, 0xB9	; 185
    11e2:	ff 4f       	sbci	r31, 0xFF	; 255
    11e4:	80 81       	ld	r24, Z
    11e6:	91 81       	ldd	r25, Z+1	; 0x01
    11e8:	01 97       	sbiw	r24, 0x01	; 1
    11ea:	f1 f7       	brne	.-4      	; 0x11e8 <LCD_voidInit+0x198>
    11ec:	fe 01       	movw	r30, r28
    11ee:	e9 5b       	subi	r30, 0xB9	; 185
    11f0:	ff 4f       	sbci	r31, 0xFF	; 255
    11f2:	91 83       	std	Z+1, r25	; 0x01
    11f4:	80 83       	st	Z, r24

	_delay_ms(30);

	/* Send command function set */
	LCD_voidSendCommand(lcd_FunctionSet8bit);
    11f6:	88 e3       	ldi	r24, 0x38	; 56
    11f8:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <LCD_voidSendCommand>
    11fc:	fe 01       	movw	r30, r28
    11fe:	ed 5b       	subi	r30, 0xBD	; 189
    1200:	ff 4f       	sbci	r31, 0xFF	; 255
    1202:	80 e0       	ldi	r24, 0x00	; 0
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	a0 e2       	ldi	r26, 0x20	; 32
    1208:	b1 e4       	ldi	r27, 0x41	; 65
    120a:	80 83       	st	Z, r24
    120c:	91 83       	std	Z+1, r25	; 0x01
    120e:	a2 83       	std	Z+2, r26	; 0x02
    1210:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1212:	8e 01       	movw	r16, r28
    1214:	01 5c       	subi	r16, 0xC1	; 193
    1216:	1f 4f       	sbci	r17, 0xFF	; 255
    1218:	fe 01       	movw	r30, r28
    121a:	ed 5b       	subi	r30, 0xBD	; 189
    121c:	ff 4f       	sbci	r31, 0xFF	; 255
    121e:	60 81       	ld	r22, Z
    1220:	71 81       	ldd	r23, Z+1	; 0x01
    1222:	82 81       	ldd	r24, Z+2	; 0x02
    1224:	93 81       	ldd	r25, Z+3	; 0x03
    1226:	20 e0       	ldi	r18, 0x00	; 0
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	4a ef       	ldi	r20, 0xFA	; 250
    122c:	54 e4       	ldi	r21, 0x44	; 68
    122e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1232:	dc 01       	movw	r26, r24
    1234:	cb 01       	movw	r24, r22
    1236:	f8 01       	movw	r30, r16
    1238:	80 83       	st	Z, r24
    123a:	91 83       	std	Z+1, r25	; 0x01
    123c:	a2 83       	std	Z+2, r26	; 0x02
    123e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1240:	fe 01       	movw	r30, r28
    1242:	ff 96       	adiw	r30, 0x3f	; 63
    1244:	60 81       	ld	r22, Z
    1246:	71 81       	ldd	r23, Z+1	; 0x01
    1248:	82 81       	ldd	r24, Z+2	; 0x02
    124a:	93 81       	ldd	r25, Z+3	; 0x03
    124c:	20 e0       	ldi	r18, 0x00	; 0
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	40 e8       	ldi	r20, 0x80	; 128
    1252:	5f e3       	ldi	r21, 0x3F	; 63
    1254:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1258:	88 23       	and	r24, r24
    125a:	2c f4       	brge	.+10     	; 0x1266 <LCD_voidInit+0x216>
		__ticks = 1;
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	9e af       	std	Y+62, r25	; 0x3e
    1262:	8d af       	std	Y+61, r24	; 0x3d
    1264:	46 c0       	rjmp	.+140    	; 0x12f2 <LCD_voidInit+0x2a2>
	else if (__tmp > 65535)
    1266:	fe 01       	movw	r30, r28
    1268:	ff 96       	adiw	r30, 0x3f	; 63
    126a:	60 81       	ld	r22, Z
    126c:	71 81       	ldd	r23, Z+1	; 0x01
    126e:	82 81       	ldd	r24, Z+2	; 0x02
    1270:	93 81       	ldd	r25, Z+3	; 0x03
    1272:	20 e0       	ldi	r18, 0x00	; 0
    1274:	3f ef       	ldi	r19, 0xFF	; 255
    1276:	4f e7       	ldi	r20, 0x7F	; 127
    1278:	57 e4       	ldi	r21, 0x47	; 71
    127a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    127e:	18 16       	cp	r1, r24
    1280:	64 f5       	brge	.+88     	; 0x12da <LCD_voidInit+0x28a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1282:	fe 01       	movw	r30, r28
    1284:	ed 5b       	subi	r30, 0xBD	; 189
    1286:	ff 4f       	sbci	r31, 0xFF	; 255
    1288:	60 81       	ld	r22, Z
    128a:	71 81       	ldd	r23, Z+1	; 0x01
    128c:	82 81       	ldd	r24, Z+2	; 0x02
    128e:	93 81       	ldd	r25, Z+3	; 0x03
    1290:	20 e0       	ldi	r18, 0x00	; 0
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	40 e2       	ldi	r20, 0x20	; 32
    1296:	51 e4       	ldi	r21, 0x41	; 65
    1298:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    129c:	dc 01       	movw	r26, r24
    129e:	cb 01       	movw	r24, r22
    12a0:	bc 01       	movw	r22, r24
    12a2:	cd 01       	movw	r24, r26
    12a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12a8:	dc 01       	movw	r26, r24
    12aa:	cb 01       	movw	r24, r22
    12ac:	9e af       	std	Y+62, r25	; 0x3e
    12ae:	8d af       	std	Y+61, r24	; 0x3d
    12b0:	0f c0       	rjmp	.+30     	; 0x12d0 <LCD_voidInit+0x280>
    12b2:	88 ec       	ldi	r24, 0xC8	; 200
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	9c af       	std	Y+60, r25	; 0x3c
    12b8:	8b af       	std	Y+59, r24	; 0x3b
    12ba:	8b ad       	ldd	r24, Y+59	; 0x3b
    12bc:	9c ad       	ldd	r25, Y+60	; 0x3c
    12be:	01 97       	sbiw	r24, 0x01	; 1
    12c0:	f1 f7       	brne	.-4      	; 0x12be <LCD_voidInit+0x26e>
    12c2:	9c af       	std	Y+60, r25	; 0x3c
    12c4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12c6:	8d ad       	ldd	r24, Y+61	; 0x3d
    12c8:	9e ad       	ldd	r25, Y+62	; 0x3e
    12ca:	01 97       	sbiw	r24, 0x01	; 1
    12cc:	9e af       	std	Y+62, r25	; 0x3e
    12ce:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12d0:	8d ad       	ldd	r24, Y+61	; 0x3d
    12d2:	9e ad       	ldd	r25, Y+62	; 0x3e
    12d4:	00 97       	sbiw	r24, 0x00	; 0
    12d6:	69 f7       	brne	.-38     	; 0x12b2 <LCD_voidInit+0x262>
    12d8:	16 c0       	rjmp	.+44     	; 0x1306 <LCD_voidInit+0x2b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12da:	fe 01       	movw	r30, r28
    12dc:	ff 96       	adiw	r30, 0x3f	; 63
    12de:	60 81       	ld	r22, Z
    12e0:	71 81       	ldd	r23, Z+1	; 0x01
    12e2:	82 81       	ldd	r24, Z+2	; 0x02
    12e4:	93 81       	ldd	r25, Z+3	; 0x03
    12e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12ea:	dc 01       	movw	r26, r24
    12ec:	cb 01       	movw	r24, r22
    12ee:	9e af       	std	Y+62, r25	; 0x3e
    12f0:	8d af       	std	Y+61, r24	; 0x3d
    12f2:	8d ad       	ldd	r24, Y+61	; 0x3d
    12f4:	9e ad       	ldd	r25, Y+62	; 0x3e
    12f6:	9a af       	std	Y+58, r25	; 0x3a
    12f8:	89 af       	std	Y+57, r24	; 0x39
    12fa:	89 ad       	ldd	r24, Y+57	; 0x39
    12fc:	9a ad       	ldd	r25, Y+58	; 0x3a
    12fe:	01 97       	sbiw	r24, 0x01	; 1
    1300:	f1 f7       	brne	.-4      	; 0x12fe <LCD_voidInit+0x2ae>
    1302:	9a af       	std	Y+58, r25	; 0x3a
    1304:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(10);

	/* Send command dispaly on */
	LCD_voidSendCommand(lcd_DisplayOn);
    1306:	8c e0       	ldi	r24, 0x0C	; 12
    1308:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <LCD_voidSendCommand>
    130c:	80 e0       	ldi	r24, 0x00	; 0
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	a0 e2       	ldi	r26, 0x20	; 32
    1312:	b1 e4       	ldi	r27, 0x41	; 65
    1314:	8d ab       	std	Y+53, r24	; 0x35
    1316:	9e ab       	std	Y+54, r25	; 0x36
    1318:	af ab       	std	Y+55, r26	; 0x37
    131a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    131c:	6d a9       	ldd	r22, Y+53	; 0x35
    131e:	7e a9       	ldd	r23, Y+54	; 0x36
    1320:	8f a9       	ldd	r24, Y+55	; 0x37
    1322:	98 ad       	ldd	r25, Y+56	; 0x38
    1324:	20 e0       	ldi	r18, 0x00	; 0
    1326:	30 e0       	ldi	r19, 0x00	; 0
    1328:	4a ef       	ldi	r20, 0xFA	; 250
    132a:	54 e4       	ldi	r21, 0x44	; 68
    132c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1330:	dc 01       	movw	r26, r24
    1332:	cb 01       	movw	r24, r22
    1334:	89 ab       	std	Y+49, r24	; 0x31
    1336:	9a ab       	std	Y+50, r25	; 0x32
    1338:	ab ab       	std	Y+51, r26	; 0x33
    133a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    133c:	69 a9       	ldd	r22, Y+49	; 0x31
    133e:	7a a9       	ldd	r23, Y+50	; 0x32
    1340:	8b a9       	ldd	r24, Y+51	; 0x33
    1342:	9c a9       	ldd	r25, Y+52	; 0x34
    1344:	20 e0       	ldi	r18, 0x00	; 0
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	40 e8       	ldi	r20, 0x80	; 128
    134a:	5f e3       	ldi	r21, 0x3F	; 63
    134c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1350:	88 23       	and	r24, r24
    1352:	2c f4       	brge	.+10     	; 0x135e <LCD_voidInit+0x30e>
		__ticks = 1;
    1354:	81 e0       	ldi	r24, 0x01	; 1
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	98 ab       	std	Y+48, r25	; 0x30
    135a:	8f a7       	std	Y+47, r24	; 0x2f
    135c:	3f c0       	rjmp	.+126    	; 0x13dc <LCD_voidInit+0x38c>
	else if (__tmp > 65535)
    135e:	69 a9       	ldd	r22, Y+49	; 0x31
    1360:	7a a9       	ldd	r23, Y+50	; 0x32
    1362:	8b a9       	ldd	r24, Y+51	; 0x33
    1364:	9c a9       	ldd	r25, Y+52	; 0x34
    1366:	20 e0       	ldi	r18, 0x00	; 0
    1368:	3f ef       	ldi	r19, 0xFF	; 255
    136a:	4f e7       	ldi	r20, 0x7F	; 127
    136c:	57 e4       	ldi	r21, 0x47	; 71
    136e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1372:	18 16       	cp	r1, r24
    1374:	4c f5       	brge	.+82     	; 0x13c8 <LCD_voidInit+0x378>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1376:	6d a9       	ldd	r22, Y+53	; 0x35
    1378:	7e a9       	ldd	r23, Y+54	; 0x36
    137a:	8f a9       	ldd	r24, Y+55	; 0x37
    137c:	98 ad       	ldd	r25, Y+56	; 0x38
    137e:	20 e0       	ldi	r18, 0x00	; 0
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	40 e2       	ldi	r20, 0x20	; 32
    1384:	51 e4       	ldi	r21, 0x41	; 65
    1386:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    138a:	dc 01       	movw	r26, r24
    138c:	cb 01       	movw	r24, r22
    138e:	bc 01       	movw	r22, r24
    1390:	cd 01       	movw	r24, r26
    1392:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1396:	dc 01       	movw	r26, r24
    1398:	cb 01       	movw	r24, r22
    139a:	98 ab       	std	Y+48, r25	; 0x30
    139c:	8f a7       	std	Y+47, r24	; 0x2f
    139e:	0f c0       	rjmp	.+30     	; 0x13be <LCD_voidInit+0x36e>
    13a0:	88 ec       	ldi	r24, 0xC8	; 200
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	9e a7       	std	Y+46, r25	; 0x2e
    13a6:	8d a7       	std	Y+45, r24	; 0x2d
    13a8:	8d a5       	ldd	r24, Y+45	; 0x2d
    13aa:	9e a5       	ldd	r25, Y+46	; 0x2e
    13ac:	01 97       	sbiw	r24, 0x01	; 1
    13ae:	f1 f7       	brne	.-4      	; 0x13ac <LCD_voidInit+0x35c>
    13b0:	9e a7       	std	Y+46, r25	; 0x2e
    13b2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13b4:	8f a5       	ldd	r24, Y+47	; 0x2f
    13b6:	98 a9       	ldd	r25, Y+48	; 0x30
    13b8:	01 97       	sbiw	r24, 0x01	; 1
    13ba:	98 ab       	std	Y+48, r25	; 0x30
    13bc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13be:	8f a5       	ldd	r24, Y+47	; 0x2f
    13c0:	98 a9       	ldd	r25, Y+48	; 0x30
    13c2:	00 97       	sbiw	r24, 0x00	; 0
    13c4:	69 f7       	brne	.-38     	; 0x13a0 <LCD_voidInit+0x350>
    13c6:	14 c0       	rjmp	.+40     	; 0x13f0 <LCD_voidInit+0x3a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13c8:	69 a9       	ldd	r22, Y+49	; 0x31
    13ca:	7a a9       	ldd	r23, Y+50	; 0x32
    13cc:	8b a9       	ldd	r24, Y+51	; 0x33
    13ce:	9c a9       	ldd	r25, Y+52	; 0x34
    13d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13d4:	dc 01       	movw	r26, r24
    13d6:	cb 01       	movw	r24, r22
    13d8:	98 ab       	std	Y+48, r25	; 0x30
    13da:	8f a7       	std	Y+47, r24	; 0x2f
    13dc:	8f a5       	ldd	r24, Y+47	; 0x2f
    13de:	98 a9       	ldd	r25, Y+48	; 0x30
    13e0:	9c a7       	std	Y+44, r25	; 0x2c
    13e2:	8b a7       	std	Y+43, r24	; 0x2b
    13e4:	8b a5       	ldd	r24, Y+43	; 0x2b
    13e6:	9c a5       	ldd	r25, Y+44	; 0x2c
    13e8:	01 97       	sbiw	r24, 0x01	; 1
    13ea:	f1 f7       	brne	.-4      	; 0x13e8 <LCD_voidInit+0x398>
    13ec:	9c a7       	std	Y+44, r25	; 0x2c
    13ee:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(10);

	/* Clear the display  */
	LCD_voidSendCommand(lcd_Clear);
    13f0:	81 e0       	ldi	r24, 0x01	; 1
    13f2:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <LCD_voidSendCommand>
    13f6:	80 e0       	ldi	r24, 0x00	; 0
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	a0 e2       	ldi	r26, 0x20	; 32
    13fc:	b1 e4       	ldi	r27, 0x41	; 65
    13fe:	8f a3       	std	Y+39, r24	; 0x27
    1400:	98 a7       	std	Y+40, r25	; 0x28
    1402:	a9 a7       	std	Y+41, r26	; 0x29
    1404:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1406:	6f a1       	ldd	r22, Y+39	; 0x27
    1408:	78 a5       	ldd	r23, Y+40	; 0x28
    140a:	89 a5       	ldd	r24, Y+41	; 0x29
    140c:	9a a5       	ldd	r25, Y+42	; 0x2a
    140e:	20 e0       	ldi	r18, 0x00	; 0
    1410:	30 e0       	ldi	r19, 0x00	; 0
    1412:	4a ef       	ldi	r20, 0xFA	; 250
    1414:	54 e4       	ldi	r21, 0x44	; 68
    1416:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    141a:	dc 01       	movw	r26, r24
    141c:	cb 01       	movw	r24, r22
    141e:	8b a3       	std	Y+35, r24	; 0x23
    1420:	9c a3       	std	Y+36, r25	; 0x24
    1422:	ad a3       	std	Y+37, r26	; 0x25
    1424:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1426:	6b a1       	ldd	r22, Y+35	; 0x23
    1428:	7c a1       	ldd	r23, Y+36	; 0x24
    142a:	8d a1       	ldd	r24, Y+37	; 0x25
    142c:	9e a1       	ldd	r25, Y+38	; 0x26
    142e:	20 e0       	ldi	r18, 0x00	; 0
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	40 e8       	ldi	r20, 0x80	; 128
    1434:	5f e3       	ldi	r21, 0x3F	; 63
    1436:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    143a:	88 23       	and	r24, r24
    143c:	2c f4       	brge	.+10     	; 0x1448 <LCD_voidInit+0x3f8>
		__ticks = 1;
    143e:	81 e0       	ldi	r24, 0x01	; 1
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	9a a3       	std	Y+34, r25	; 0x22
    1444:	89 a3       	std	Y+33, r24	; 0x21
    1446:	3f c0       	rjmp	.+126    	; 0x14c6 <LCD_voidInit+0x476>
	else if (__tmp > 65535)
    1448:	6b a1       	ldd	r22, Y+35	; 0x23
    144a:	7c a1       	ldd	r23, Y+36	; 0x24
    144c:	8d a1       	ldd	r24, Y+37	; 0x25
    144e:	9e a1       	ldd	r25, Y+38	; 0x26
    1450:	20 e0       	ldi	r18, 0x00	; 0
    1452:	3f ef       	ldi	r19, 0xFF	; 255
    1454:	4f e7       	ldi	r20, 0x7F	; 127
    1456:	57 e4       	ldi	r21, 0x47	; 71
    1458:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    145c:	18 16       	cp	r1, r24
    145e:	4c f5       	brge	.+82     	; 0x14b2 <LCD_voidInit+0x462>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1460:	6f a1       	ldd	r22, Y+39	; 0x27
    1462:	78 a5       	ldd	r23, Y+40	; 0x28
    1464:	89 a5       	ldd	r24, Y+41	; 0x29
    1466:	9a a5       	ldd	r25, Y+42	; 0x2a
    1468:	20 e0       	ldi	r18, 0x00	; 0
    146a:	30 e0       	ldi	r19, 0x00	; 0
    146c:	40 e2       	ldi	r20, 0x20	; 32
    146e:	51 e4       	ldi	r21, 0x41	; 65
    1470:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1474:	dc 01       	movw	r26, r24
    1476:	cb 01       	movw	r24, r22
    1478:	bc 01       	movw	r22, r24
    147a:	cd 01       	movw	r24, r26
    147c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1480:	dc 01       	movw	r26, r24
    1482:	cb 01       	movw	r24, r22
    1484:	9a a3       	std	Y+34, r25	; 0x22
    1486:	89 a3       	std	Y+33, r24	; 0x21
    1488:	0f c0       	rjmp	.+30     	; 0x14a8 <LCD_voidInit+0x458>
    148a:	88 ec       	ldi	r24, 0xC8	; 200
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	98 a3       	std	Y+32, r25	; 0x20
    1490:	8f 8f       	std	Y+31, r24	; 0x1f
    1492:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1494:	98 a1       	ldd	r25, Y+32	; 0x20
    1496:	01 97       	sbiw	r24, 0x01	; 1
    1498:	f1 f7       	brne	.-4      	; 0x1496 <LCD_voidInit+0x446>
    149a:	98 a3       	std	Y+32, r25	; 0x20
    149c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    149e:	89 a1       	ldd	r24, Y+33	; 0x21
    14a0:	9a a1       	ldd	r25, Y+34	; 0x22
    14a2:	01 97       	sbiw	r24, 0x01	; 1
    14a4:	9a a3       	std	Y+34, r25	; 0x22
    14a6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14a8:	89 a1       	ldd	r24, Y+33	; 0x21
    14aa:	9a a1       	ldd	r25, Y+34	; 0x22
    14ac:	00 97       	sbiw	r24, 0x00	; 0
    14ae:	69 f7       	brne	.-38     	; 0x148a <LCD_voidInit+0x43a>
    14b0:	14 c0       	rjmp	.+40     	; 0x14da <LCD_voidInit+0x48a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14b2:	6b a1       	ldd	r22, Y+35	; 0x23
    14b4:	7c a1       	ldd	r23, Y+36	; 0x24
    14b6:	8d a1       	ldd	r24, Y+37	; 0x25
    14b8:	9e a1       	ldd	r25, Y+38	; 0x26
    14ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14be:	dc 01       	movw	r26, r24
    14c0:	cb 01       	movw	r24, r22
    14c2:	9a a3       	std	Y+34, r25	; 0x22
    14c4:	89 a3       	std	Y+33, r24	; 0x21
    14c6:	89 a1       	ldd	r24, Y+33	; 0x21
    14c8:	9a a1       	ldd	r25, Y+34	; 0x22
    14ca:	9e 8f       	std	Y+30, r25	; 0x1e
    14cc:	8d 8f       	std	Y+29, r24	; 0x1d
    14ce:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14d0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    14d2:	01 97       	sbiw	r24, 0x01	; 1
    14d4:	f1 f7       	brne	.-4      	; 0x14d2 <LCD_voidInit+0x482>
    14d6:	9e 8f       	std	Y+30, r25	; 0x1e
    14d8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(10);

	/* Entry mode set  */
	LCD_voidSendCommand(lcd_EntryMode);
    14da:	86 e0       	ldi	r24, 0x06	; 6
    14dc:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <LCD_voidSendCommand>
    14e0:	80 e0       	ldi	r24, 0x00	; 0
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	a0 e2       	ldi	r26, 0x20	; 32
    14e6:	b1 e4       	ldi	r27, 0x41	; 65
    14e8:	89 8f       	std	Y+25, r24	; 0x19
    14ea:	9a 8f       	std	Y+26, r25	; 0x1a
    14ec:	ab 8f       	std	Y+27, r26	; 0x1b
    14ee:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14f0:	69 8d       	ldd	r22, Y+25	; 0x19
    14f2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14f8:	20 e0       	ldi	r18, 0x00	; 0
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	4a ef       	ldi	r20, 0xFA	; 250
    14fe:	54 e4       	ldi	r21, 0x44	; 68
    1500:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1504:	dc 01       	movw	r26, r24
    1506:	cb 01       	movw	r24, r22
    1508:	8d 8b       	std	Y+21, r24	; 0x15
    150a:	9e 8b       	std	Y+22, r25	; 0x16
    150c:	af 8b       	std	Y+23, r26	; 0x17
    150e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1510:	6d 89       	ldd	r22, Y+21	; 0x15
    1512:	7e 89       	ldd	r23, Y+22	; 0x16
    1514:	8f 89       	ldd	r24, Y+23	; 0x17
    1516:	98 8d       	ldd	r25, Y+24	; 0x18
    1518:	20 e0       	ldi	r18, 0x00	; 0
    151a:	30 e0       	ldi	r19, 0x00	; 0
    151c:	40 e8       	ldi	r20, 0x80	; 128
    151e:	5f e3       	ldi	r21, 0x3F	; 63
    1520:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1524:	88 23       	and	r24, r24
    1526:	2c f4       	brge	.+10     	; 0x1532 <LCD_voidInit+0x4e2>
		__ticks = 1;
    1528:	81 e0       	ldi	r24, 0x01	; 1
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	9c 8b       	std	Y+20, r25	; 0x14
    152e:	8b 8b       	std	Y+19, r24	; 0x13
    1530:	3f c0       	rjmp	.+126    	; 0x15b0 <LCD_voidInit+0x560>
	else if (__tmp > 65535)
    1532:	6d 89       	ldd	r22, Y+21	; 0x15
    1534:	7e 89       	ldd	r23, Y+22	; 0x16
    1536:	8f 89       	ldd	r24, Y+23	; 0x17
    1538:	98 8d       	ldd	r25, Y+24	; 0x18
    153a:	20 e0       	ldi	r18, 0x00	; 0
    153c:	3f ef       	ldi	r19, 0xFF	; 255
    153e:	4f e7       	ldi	r20, 0x7F	; 127
    1540:	57 e4       	ldi	r21, 0x47	; 71
    1542:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1546:	18 16       	cp	r1, r24
    1548:	4c f5       	brge	.+82     	; 0x159c <LCD_voidInit+0x54c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    154a:	69 8d       	ldd	r22, Y+25	; 0x19
    154c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    154e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1550:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1552:	20 e0       	ldi	r18, 0x00	; 0
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	40 e2       	ldi	r20, 0x20	; 32
    1558:	51 e4       	ldi	r21, 0x41	; 65
    155a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    155e:	dc 01       	movw	r26, r24
    1560:	cb 01       	movw	r24, r22
    1562:	bc 01       	movw	r22, r24
    1564:	cd 01       	movw	r24, r26
    1566:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    156a:	dc 01       	movw	r26, r24
    156c:	cb 01       	movw	r24, r22
    156e:	9c 8b       	std	Y+20, r25	; 0x14
    1570:	8b 8b       	std	Y+19, r24	; 0x13
    1572:	0f c0       	rjmp	.+30     	; 0x1592 <LCD_voidInit+0x542>
    1574:	88 ec       	ldi	r24, 0xC8	; 200
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	9a 8b       	std	Y+18, r25	; 0x12
    157a:	89 8b       	std	Y+17, r24	; 0x11
    157c:	89 89       	ldd	r24, Y+17	; 0x11
    157e:	9a 89       	ldd	r25, Y+18	; 0x12
    1580:	01 97       	sbiw	r24, 0x01	; 1
    1582:	f1 f7       	brne	.-4      	; 0x1580 <LCD_voidInit+0x530>
    1584:	9a 8b       	std	Y+18, r25	; 0x12
    1586:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1588:	8b 89       	ldd	r24, Y+19	; 0x13
    158a:	9c 89       	ldd	r25, Y+20	; 0x14
    158c:	01 97       	sbiw	r24, 0x01	; 1
    158e:	9c 8b       	std	Y+20, r25	; 0x14
    1590:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1592:	8b 89       	ldd	r24, Y+19	; 0x13
    1594:	9c 89       	ldd	r25, Y+20	; 0x14
    1596:	00 97       	sbiw	r24, 0x00	; 0
    1598:	69 f7       	brne	.-38     	; 0x1574 <LCD_voidInit+0x524>
    159a:	14 c0       	rjmp	.+40     	; 0x15c4 <LCD_voidInit+0x574>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    159c:	6d 89       	ldd	r22, Y+21	; 0x15
    159e:	7e 89       	ldd	r23, Y+22	; 0x16
    15a0:	8f 89       	ldd	r24, Y+23	; 0x17
    15a2:	98 8d       	ldd	r25, Y+24	; 0x18
    15a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15a8:	dc 01       	movw	r26, r24
    15aa:	cb 01       	movw	r24, r22
    15ac:	9c 8b       	std	Y+20, r25	; 0x14
    15ae:	8b 8b       	std	Y+19, r24	; 0x13
    15b0:	8b 89       	ldd	r24, Y+19	; 0x13
    15b2:	9c 89       	ldd	r25, Y+20	; 0x14
    15b4:	98 8b       	std	Y+16, r25	; 0x10
    15b6:	8f 87       	std	Y+15, r24	; 0x0f
    15b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    15ba:	98 89       	ldd	r25, Y+16	; 0x10
    15bc:	01 97       	sbiw	r24, 0x01	; 1
    15be:	f1 f7       	brne	.-4      	; 0x15bc <LCD_voidInit+0x56c>
    15c0:	98 8b       	std	Y+16, r25	; 0x10
    15c2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);

	/* Set cursor home */
	LCD_voidSendCommand(lcd_Home);
    15c4:	82 e0       	ldi	r24, 0x02	; 2
    15c6:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <LCD_voidSendCommand>
    15ca:	80 e0       	ldi	r24, 0x00	; 0
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	a0 e2       	ldi	r26, 0x20	; 32
    15d0:	b1 e4       	ldi	r27, 0x41	; 65
    15d2:	8b 87       	std	Y+11, r24	; 0x0b
    15d4:	9c 87       	std	Y+12, r25	; 0x0c
    15d6:	ad 87       	std	Y+13, r26	; 0x0d
    15d8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15da:	6b 85       	ldd	r22, Y+11	; 0x0b
    15dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    15de:	8d 85       	ldd	r24, Y+13	; 0x0d
    15e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    15e2:	20 e0       	ldi	r18, 0x00	; 0
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	4a ef       	ldi	r20, 0xFA	; 250
    15e8:	54 e4       	ldi	r21, 0x44	; 68
    15ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15ee:	dc 01       	movw	r26, r24
    15f0:	cb 01       	movw	r24, r22
    15f2:	8f 83       	std	Y+7, r24	; 0x07
    15f4:	98 87       	std	Y+8, r25	; 0x08
    15f6:	a9 87       	std	Y+9, r26	; 0x09
    15f8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15fa:	6f 81       	ldd	r22, Y+7	; 0x07
    15fc:	78 85       	ldd	r23, Y+8	; 0x08
    15fe:	89 85       	ldd	r24, Y+9	; 0x09
    1600:	9a 85       	ldd	r25, Y+10	; 0x0a
    1602:	20 e0       	ldi	r18, 0x00	; 0
    1604:	30 e0       	ldi	r19, 0x00	; 0
    1606:	40 e8       	ldi	r20, 0x80	; 128
    1608:	5f e3       	ldi	r21, 0x3F	; 63
    160a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    160e:	88 23       	and	r24, r24
    1610:	2c f4       	brge	.+10     	; 0x161c <LCD_voidInit+0x5cc>
		__ticks = 1;
    1612:	81 e0       	ldi	r24, 0x01	; 1
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	9e 83       	std	Y+6, r25	; 0x06
    1618:	8d 83       	std	Y+5, r24	; 0x05
    161a:	3f c0       	rjmp	.+126    	; 0x169a <LCD_voidInit+0x64a>
	else if (__tmp > 65535)
    161c:	6f 81       	ldd	r22, Y+7	; 0x07
    161e:	78 85       	ldd	r23, Y+8	; 0x08
    1620:	89 85       	ldd	r24, Y+9	; 0x09
    1622:	9a 85       	ldd	r25, Y+10	; 0x0a
    1624:	20 e0       	ldi	r18, 0x00	; 0
    1626:	3f ef       	ldi	r19, 0xFF	; 255
    1628:	4f e7       	ldi	r20, 0x7F	; 127
    162a:	57 e4       	ldi	r21, 0x47	; 71
    162c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1630:	18 16       	cp	r1, r24
    1632:	4c f5       	brge	.+82     	; 0x1686 <LCD_voidInit+0x636>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1634:	6b 85       	ldd	r22, Y+11	; 0x0b
    1636:	7c 85       	ldd	r23, Y+12	; 0x0c
    1638:	8d 85       	ldd	r24, Y+13	; 0x0d
    163a:	9e 85       	ldd	r25, Y+14	; 0x0e
    163c:	20 e0       	ldi	r18, 0x00	; 0
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	40 e2       	ldi	r20, 0x20	; 32
    1642:	51 e4       	ldi	r21, 0x41	; 65
    1644:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1648:	dc 01       	movw	r26, r24
    164a:	cb 01       	movw	r24, r22
    164c:	bc 01       	movw	r22, r24
    164e:	cd 01       	movw	r24, r26
    1650:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1654:	dc 01       	movw	r26, r24
    1656:	cb 01       	movw	r24, r22
    1658:	9e 83       	std	Y+6, r25	; 0x06
    165a:	8d 83       	std	Y+5, r24	; 0x05
    165c:	0f c0       	rjmp	.+30     	; 0x167c <LCD_voidInit+0x62c>
    165e:	88 ec       	ldi	r24, 0xC8	; 200
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	9c 83       	std	Y+4, r25	; 0x04
    1664:	8b 83       	std	Y+3, r24	; 0x03
    1666:	8b 81       	ldd	r24, Y+3	; 0x03
    1668:	9c 81       	ldd	r25, Y+4	; 0x04
    166a:	01 97       	sbiw	r24, 0x01	; 1
    166c:	f1 f7       	brne	.-4      	; 0x166a <LCD_voidInit+0x61a>
    166e:	9c 83       	std	Y+4, r25	; 0x04
    1670:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1672:	8d 81       	ldd	r24, Y+5	; 0x05
    1674:	9e 81       	ldd	r25, Y+6	; 0x06
    1676:	01 97       	sbiw	r24, 0x01	; 1
    1678:	9e 83       	std	Y+6, r25	; 0x06
    167a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    167c:	8d 81       	ldd	r24, Y+5	; 0x05
    167e:	9e 81       	ldd	r25, Y+6	; 0x06
    1680:	00 97       	sbiw	r24, 0x00	; 0
    1682:	69 f7       	brne	.-38     	; 0x165e <LCD_voidInit+0x60e>
    1684:	14 c0       	rjmp	.+40     	; 0x16ae <LCD_voidInit+0x65e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1686:	6f 81       	ldd	r22, Y+7	; 0x07
    1688:	78 85       	ldd	r23, Y+8	; 0x08
    168a:	89 85       	ldd	r24, Y+9	; 0x09
    168c:	9a 85       	ldd	r25, Y+10	; 0x0a
    168e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1692:	dc 01       	movw	r26, r24
    1694:	cb 01       	movw	r24, r22
    1696:	9e 83       	std	Y+6, r25	; 0x06
    1698:	8d 83       	std	Y+5, r24	; 0x05
    169a:	8d 81       	ldd	r24, Y+5	; 0x05
    169c:	9e 81       	ldd	r25, Y+6	; 0x06
    169e:	9a 83       	std	Y+2, r25	; 0x02
    16a0:	89 83       	std	Y+1, r24	; 0x01
    16a2:	89 81       	ldd	r24, Y+1	; 0x01
    16a4:	9a 81       	ldd	r25, Y+2	; 0x02
    16a6:	01 97       	sbiw	r24, 0x01	; 1
    16a8:	f1 f7       	brne	.-4      	; 0x16a6 <LCD_voidInit+0x656>
    16aa:	9a 83       	std	Y+2, r25	; 0x02
    16ac:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    16ae:	cc 5a       	subi	r28, 0xAC	; 172
    16b0:	df 4f       	sbci	r29, 0xFF	; 255
    16b2:	0f b6       	in	r0, 0x3f	; 63
    16b4:	f8 94       	cli
    16b6:	de bf       	out	0x3e, r29	; 62
    16b8:	0f be       	out	0x3f, r0	; 63
    16ba:	cd bf       	out	0x3d, r28	; 61
    16bc:	cf 91       	pop	r28
    16be:	df 91       	pop	r29
    16c0:	1f 91       	pop	r17
    16c2:	0f 91       	pop	r16
    16c4:	08 95       	ret

000016c6 <LCD_voidSendCommand>:

void LCD_voidSendCommand (u8 Cpy_command )
{
    16c6:	df 93       	push	r29
    16c8:	cf 93       	push	r28
    16ca:	cd b7       	in	r28, 0x3d	; 61
    16cc:	de b7       	in	r29, 0x3e	; 62
    16ce:	6d 97       	sbiw	r28, 0x1d	; 29
    16d0:	0f b6       	in	r0, 0x3f	; 63
    16d2:	f8 94       	cli
    16d4:	de bf       	out	0x3e, r29	; 62
    16d6:	0f be       	out	0x3f, r0	; 63
    16d8:	cd bf       	out	0x3d, r28	; 61
    16da:	8d 8f       	std	Y+29, r24	; 0x1d
	/* Reset RS and RW */
	MDIO_vidSetPinValue(LCD_RS_PORT , LCD_RS_PIN , LOW);
    16dc:	81 e4       	ldi	r24, 0x41	; 65
    16de:	60 e0       	ldi	r22, 0x00	; 0
    16e0:	40 e0       	ldi	r20, 0x00	; 0
    16e2:	0e 94 77 11 	call	0x22ee	; 0x22ee <MDIO_vidSetPinValue>
	MDIO_vidSetPinValue(LCD_RW_PORT , LCD_RW_PIN , LOW);
    16e6:	81 e4       	ldi	r24, 0x41	; 65
    16e8:	61 e0       	ldi	r22, 0x01	; 1
    16ea:	40 e0       	ldi	r20, 0x00	; 0
    16ec:	0e 94 77 11 	call	0x22ee	; 0x22ee <MDIO_vidSetPinValue>

	/* Write the command to data port */
	MDIO_vidSetPortValue(LCD_DATA_PORT , Cpy_command);
    16f0:	83 e4       	ldi	r24, 0x43	; 67
    16f2:	6d 8d       	ldd	r22, Y+29	; 0x1d
    16f4:	0e 94 47 13 	call	0x268e	; 0x268e <MDIO_vidSetPortValue>

	/* Send Enable signal */
	MDIO_vidSetPinValue(LCD_E_PORT , LCD_E_PIN , HIGH);
    16f8:	81 e4       	ldi	r24, 0x41	; 65
    16fa:	62 e0       	ldi	r22, 0x02	; 2
    16fc:	41 e0       	ldi	r20, 0x01	; 1
    16fe:	0e 94 77 11 	call	0x22ee	; 0x22ee <MDIO_vidSetPinValue>
    1702:	80 e0       	ldi	r24, 0x00	; 0
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	a0 e8       	ldi	r26, 0x80	; 128
    1708:	bf e3       	ldi	r27, 0x3F	; 63
    170a:	89 8f       	std	Y+25, r24	; 0x19
    170c:	9a 8f       	std	Y+26, r25	; 0x1a
    170e:	ab 8f       	std	Y+27, r26	; 0x1b
    1710:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1712:	69 8d       	ldd	r22, Y+25	; 0x19
    1714:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1716:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1718:	9c 8d       	ldd	r25, Y+28	; 0x1c
    171a:	20 e0       	ldi	r18, 0x00	; 0
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	4a ef       	ldi	r20, 0xFA	; 250
    1720:	54 e4       	ldi	r21, 0x44	; 68
    1722:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1726:	dc 01       	movw	r26, r24
    1728:	cb 01       	movw	r24, r22
    172a:	8d 8b       	std	Y+21, r24	; 0x15
    172c:	9e 8b       	std	Y+22, r25	; 0x16
    172e:	af 8b       	std	Y+23, r26	; 0x17
    1730:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1732:	6d 89       	ldd	r22, Y+21	; 0x15
    1734:	7e 89       	ldd	r23, Y+22	; 0x16
    1736:	8f 89       	ldd	r24, Y+23	; 0x17
    1738:	98 8d       	ldd	r25, Y+24	; 0x18
    173a:	20 e0       	ldi	r18, 0x00	; 0
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	40 e8       	ldi	r20, 0x80	; 128
    1740:	5f e3       	ldi	r21, 0x3F	; 63
    1742:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1746:	88 23       	and	r24, r24
    1748:	2c f4       	brge	.+10     	; 0x1754 <LCD_voidSendCommand+0x8e>
		__ticks = 1;
    174a:	81 e0       	ldi	r24, 0x01	; 1
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	9c 8b       	std	Y+20, r25	; 0x14
    1750:	8b 8b       	std	Y+19, r24	; 0x13
    1752:	3f c0       	rjmp	.+126    	; 0x17d2 <LCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    1754:	6d 89       	ldd	r22, Y+21	; 0x15
    1756:	7e 89       	ldd	r23, Y+22	; 0x16
    1758:	8f 89       	ldd	r24, Y+23	; 0x17
    175a:	98 8d       	ldd	r25, Y+24	; 0x18
    175c:	20 e0       	ldi	r18, 0x00	; 0
    175e:	3f ef       	ldi	r19, 0xFF	; 255
    1760:	4f e7       	ldi	r20, 0x7F	; 127
    1762:	57 e4       	ldi	r21, 0x47	; 71
    1764:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1768:	18 16       	cp	r1, r24
    176a:	4c f5       	brge	.+82     	; 0x17be <LCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    176c:	69 8d       	ldd	r22, Y+25	; 0x19
    176e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1770:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1772:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1774:	20 e0       	ldi	r18, 0x00	; 0
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	40 e2       	ldi	r20, 0x20	; 32
    177a:	51 e4       	ldi	r21, 0x41	; 65
    177c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1780:	dc 01       	movw	r26, r24
    1782:	cb 01       	movw	r24, r22
    1784:	bc 01       	movw	r22, r24
    1786:	cd 01       	movw	r24, r26
    1788:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    178c:	dc 01       	movw	r26, r24
    178e:	cb 01       	movw	r24, r22
    1790:	9c 8b       	std	Y+20, r25	; 0x14
    1792:	8b 8b       	std	Y+19, r24	; 0x13
    1794:	0f c0       	rjmp	.+30     	; 0x17b4 <LCD_voidSendCommand+0xee>
    1796:	88 ec       	ldi	r24, 0xC8	; 200
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	9a 8b       	std	Y+18, r25	; 0x12
    179c:	89 8b       	std	Y+17, r24	; 0x11
    179e:	89 89       	ldd	r24, Y+17	; 0x11
    17a0:	9a 89       	ldd	r25, Y+18	; 0x12
    17a2:	01 97       	sbiw	r24, 0x01	; 1
    17a4:	f1 f7       	brne	.-4      	; 0x17a2 <LCD_voidSendCommand+0xdc>
    17a6:	9a 8b       	std	Y+18, r25	; 0x12
    17a8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17aa:	8b 89       	ldd	r24, Y+19	; 0x13
    17ac:	9c 89       	ldd	r25, Y+20	; 0x14
    17ae:	01 97       	sbiw	r24, 0x01	; 1
    17b0:	9c 8b       	std	Y+20, r25	; 0x14
    17b2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17b4:	8b 89       	ldd	r24, Y+19	; 0x13
    17b6:	9c 89       	ldd	r25, Y+20	; 0x14
    17b8:	00 97       	sbiw	r24, 0x00	; 0
    17ba:	69 f7       	brne	.-38     	; 0x1796 <LCD_voidSendCommand+0xd0>
    17bc:	14 c0       	rjmp	.+40     	; 0x17e6 <LCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17be:	6d 89       	ldd	r22, Y+21	; 0x15
    17c0:	7e 89       	ldd	r23, Y+22	; 0x16
    17c2:	8f 89       	ldd	r24, Y+23	; 0x17
    17c4:	98 8d       	ldd	r25, Y+24	; 0x18
    17c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17ca:	dc 01       	movw	r26, r24
    17cc:	cb 01       	movw	r24, r22
    17ce:	9c 8b       	std	Y+20, r25	; 0x14
    17d0:	8b 8b       	std	Y+19, r24	; 0x13
    17d2:	8b 89       	ldd	r24, Y+19	; 0x13
    17d4:	9c 89       	ldd	r25, Y+20	; 0x14
    17d6:	98 8b       	std	Y+16, r25	; 0x10
    17d8:	8f 87       	std	Y+15, r24	; 0x0f
    17da:	8f 85       	ldd	r24, Y+15	; 0x0f
    17dc:	98 89       	ldd	r25, Y+16	; 0x10
    17de:	01 97       	sbiw	r24, 0x01	; 1
    17e0:	f1 f7       	brne	.-4      	; 0x17de <LCD_voidSendCommand+0x118>
    17e2:	98 8b       	std	Y+16, r25	; 0x10
    17e4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	MDIO_vidSetPinValue(LCD_E_PORT , LCD_E_PIN , LOW);
    17e6:	81 e4       	ldi	r24, 0x41	; 65
    17e8:	62 e0       	ldi	r22, 0x02	; 2
    17ea:	40 e0       	ldi	r20, 0x00	; 0
    17ec:	0e 94 77 11 	call	0x22ee	; 0x22ee <MDIO_vidSetPinValue>
    17f0:	80 e0       	ldi	r24, 0x00	; 0
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	a0 e2       	ldi	r26, 0x20	; 32
    17f6:	b1 e4       	ldi	r27, 0x41	; 65
    17f8:	8b 87       	std	Y+11, r24	; 0x0b
    17fa:	9c 87       	std	Y+12, r25	; 0x0c
    17fc:	ad 87       	std	Y+13, r26	; 0x0d
    17fe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1800:	6b 85       	ldd	r22, Y+11	; 0x0b
    1802:	7c 85       	ldd	r23, Y+12	; 0x0c
    1804:	8d 85       	ldd	r24, Y+13	; 0x0d
    1806:	9e 85       	ldd	r25, Y+14	; 0x0e
    1808:	20 e0       	ldi	r18, 0x00	; 0
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	4a ef       	ldi	r20, 0xFA	; 250
    180e:	54 e4       	ldi	r21, 0x44	; 68
    1810:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1814:	dc 01       	movw	r26, r24
    1816:	cb 01       	movw	r24, r22
    1818:	8f 83       	std	Y+7, r24	; 0x07
    181a:	98 87       	std	Y+8, r25	; 0x08
    181c:	a9 87       	std	Y+9, r26	; 0x09
    181e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1820:	6f 81       	ldd	r22, Y+7	; 0x07
    1822:	78 85       	ldd	r23, Y+8	; 0x08
    1824:	89 85       	ldd	r24, Y+9	; 0x09
    1826:	9a 85       	ldd	r25, Y+10	; 0x0a
    1828:	20 e0       	ldi	r18, 0x00	; 0
    182a:	30 e0       	ldi	r19, 0x00	; 0
    182c:	40 e8       	ldi	r20, 0x80	; 128
    182e:	5f e3       	ldi	r21, 0x3F	; 63
    1830:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1834:	88 23       	and	r24, r24
    1836:	2c f4       	brge	.+10     	; 0x1842 <LCD_voidSendCommand+0x17c>
		__ticks = 1;
    1838:	81 e0       	ldi	r24, 0x01	; 1
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	9e 83       	std	Y+6, r25	; 0x06
    183e:	8d 83       	std	Y+5, r24	; 0x05
    1840:	3f c0       	rjmp	.+126    	; 0x18c0 <LCD_voidSendCommand+0x1fa>
	else if (__tmp > 65535)
    1842:	6f 81       	ldd	r22, Y+7	; 0x07
    1844:	78 85       	ldd	r23, Y+8	; 0x08
    1846:	89 85       	ldd	r24, Y+9	; 0x09
    1848:	9a 85       	ldd	r25, Y+10	; 0x0a
    184a:	20 e0       	ldi	r18, 0x00	; 0
    184c:	3f ef       	ldi	r19, 0xFF	; 255
    184e:	4f e7       	ldi	r20, 0x7F	; 127
    1850:	57 e4       	ldi	r21, 0x47	; 71
    1852:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1856:	18 16       	cp	r1, r24
    1858:	4c f5       	brge	.+82     	; 0x18ac <LCD_voidSendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    185a:	6b 85       	ldd	r22, Y+11	; 0x0b
    185c:	7c 85       	ldd	r23, Y+12	; 0x0c
    185e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1860:	9e 85       	ldd	r25, Y+14	; 0x0e
    1862:	20 e0       	ldi	r18, 0x00	; 0
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	40 e2       	ldi	r20, 0x20	; 32
    1868:	51 e4       	ldi	r21, 0x41	; 65
    186a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    186e:	dc 01       	movw	r26, r24
    1870:	cb 01       	movw	r24, r22
    1872:	bc 01       	movw	r22, r24
    1874:	cd 01       	movw	r24, r26
    1876:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    187a:	dc 01       	movw	r26, r24
    187c:	cb 01       	movw	r24, r22
    187e:	9e 83       	std	Y+6, r25	; 0x06
    1880:	8d 83       	std	Y+5, r24	; 0x05
    1882:	0f c0       	rjmp	.+30     	; 0x18a2 <LCD_voidSendCommand+0x1dc>
    1884:	88 ec       	ldi	r24, 0xC8	; 200
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	9c 83       	std	Y+4, r25	; 0x04
    188a:	8b 83       	std	Y+3, r24	; 0x03
    188c:	8b 81       	ldd	r24, Y+3	; 0x03
    188e:	9c 81       	ldd	r25, Y+4	; 0x04
    1890:	01 97       	sbiw	r24, 0x01	; 1
    1892:	f1 f7       	brne	.-4      	; 0x1890 <LCD_voidSendCommand+0x1ca>
    1894:	9c 83       	std	Y+4, r25	; 0x04
    1896:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1898:	8d 81       	ldd	r24, Y+5	; 0x05
    189a:	9e 81       	ldd	r25, Y+6	; 0x06
    189c:	01 97       	sbiw	r24, 0x01	; 1
    189e:	9e 83       	std	Y+6, r25	; 0x06
    18a0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18a2:	8d 81       	ldd	r24, Y+5	; 0x05
    18a4:	9e 81       	ldd	r25, Y+6	; 0x06
    18a6:	00 97       	sbiw	r24, 0x00	; 0
    18a8:	69 f7       	brne	.-38     	; 0x1884 <LCD_voidSendCommand+0x1be>
    18aa:	14 c0       	rjmp	.+40     	; 0x18d4 <LCD_voidSendCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18ac:	6f 81       	ldd	r22, Y+7	; 0x07
    18ae:	78 85       	ldd	r23, Y+8	; 0x08
    18b0:	89 85       	ldd	r24, Y+9	; 0x09
    18b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    18b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18b8:	dc 01       	movw	r26, r24
    18ba:	cb 01       	movw	r24, r22
    18bc:	9e 83       	std	Y+6, r25	; 0x06
    18be:	8d 83       	std	Y+5, r24	; 0x05
    18c0:	8d 81       	ldd	r24, Y+5	; 0x05
    18c2:	9e 81       	ldd	r25, Y+6	; 0x06
    18c4:	9a 83       	std	Y+2, r25	; 0x02
    18c6:	89 83       	std	Y+1, r24	; 0x01
    18c8:	89 81       	ldd	r24, Y+1	; 0x01
    18ca:	9a 81       	ldd	r25, Y+2	; 0x02
    18cc:	01 97       	sbiw	r24, 0x01	; 1
    18ce:	f1 f7       	brne	.-4      	; 0x18cc <LCD_voidSendCommand+0x206>
    18d0:	9a 83       	std	Y+2, r25	; 0x02
    18d2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    18d4:	6d 96       	adiw	r28, 0x1d	; 29
    18d6:	0f b6       	in	r0, 0x3f	; 63
    18d8:	f8 94       	cli
    18da:	de bf       	out	0x3e, r29	; 62
    18dc:	0f be       	out	0x3f, r0	; 63
    18de:	cd bf       	out	0x3d, r28	; 61
    18e0:	cf 91       	pop	r28
    18e2:	df 91       	pop	r29
    18e4:	08 95       	ret

000018e6 <LCD_voidSendChar>:

void LCD_voidSendChar (u8 Cpy_data)
{
    18e6:	df 93       	push	r29
    18e8:	cf 93       	push	r28
    18ea:	cd b7       	in	r28, 0x3d	; 61
    18ec:	de b7       	in	r29, 0x3e	; 62
    18ee:	6d 97       	sbiw	r28, 0x1d	; 29
    18f0:	0f b6       	in	r0, 0x3f	; 63
    18f2:	f8 94       	cli
    18f4:	de bf       	out	0x3e, r29	; 62
    18f6:	0f be       	out	0x3f, r0	; 63
    18f8:	cd bf       	out	0x3d, r28	; 61
    18fa:	8d 8f       	std	Y+29, r24	; 0x1d
	/* Reset RW */
	MDIO_vidSetPinValue(LCD_RW_PORT , LCD_RW_PIN , LOW);
    18fc:	81 e4       	ldi	r24, 0x41	; 65
    18fe:	61 e0       	ldi	r22, 0x01	; 1
    1900:	40 e0       	ldi	r20, 0x00	; 0
    1902:	0e 94 77 11 	call	0x22ee	; 0x22ee <MDIO_vidSetPinValue>

	/* Set RS */
	MDIO_vidSetPinValue(LCD_RS_PORT , LCD_RS_PIN , HIGH);
    1906:	81 e4       	ldi	r24, 0x41	; 65
    1908:	60 e0       	ldi	r22, 0x00	; 0
    190a:	41 e0       	ldi	r20, 0x01	; 1
    190c:	0e 94 77 11 	call	0x22ee	; 0x22ee <MDIO_vidSetPinValue>

	/* Write the command to data port */
	MDIO_vidSetPortValue(LCD_DATA_PORT , Cpy_data);
    1910:	83 e4       	ldi	r24, 0x43	; 67
    1912:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1914:	0e 94 47 13 	call	0x268e	; 0x268e <MDIO_vidSetPortValue>

	/* Send Enable signal */
	MDIO_vidSetPinValue(LCD_E_PORT , LCD_E_PIN , HIGH);
    1918:	81 e4       	ldi	r24, 0x41	; 65
    191a:	62 e0       	ldi	r22, 0x02	; 2
    191c:	41 e0       	ldi	r20, 0x01	; 1
    191e:	0e 94 77 11 	call	0x22ee	; 0x22ee <MDIO_vidSetPinValue>
    1922:	80 e0       	ldi	r24, 0x00	; 0
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	a0 e8       	ldi	r26, 0x80	; 128
    1928:	bf e3       	ldi	r27, 0x3F	; 63
    192a:	89 8f       	std	Y+25, r24	; 0x19
    192c:	9a 8f       	std	Y+26, r25	; 0x1a
    192e:	ab 8f       	std	Y+27, r26	; 0x1b
    1930:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1932:	69 8d       	ldd	r22, Y+25	; 0x19
    1934:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1936:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1938:	9c 8d       	ldd	r25, Y+28	; 0x1c
    193a:	20 e0       	ldi	r18, 0x00	; 0
    193c:	30 e0       	ldi	r19, 0x00	; 0
    193e:	4a ef       	ldi	r20, 0xFA	; 250
    1940:	54 e4       	ldi	r21, 0x44	; 68
    1942:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1946:	dc 01       	movw	r26, r24
    1948:	cb 01       	movw	r24, r22
    194a:	8d 8b       	std	Y+21, r24	; 0x15
    194c:	9e 8b       	std	Y+22, r25	; 0x16
    194e:	af 8b       	std	Y+23, r26	; 0x17
    1950:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1952:	6d 89       	ldd	r22, Y+21	; 0x15
    1954:	7e 89       	ldd	r23, Y+22	; 0x16
    1956:	8f 89       	ldd	r24, Y+23	; 0x17
    1958:	98 8d       	ldd	r25, Y+24	; 0x18
    195a:	20 e0       	ldi	r18, 0x00	; 0
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	40 e8       	ldi	r20, 0x80	; 128
    1960:	5f e3       	ldi	r21, 0x3F	; 63
    1962:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1966:	88 23       	and	r24, r24
    1968:	2c f4       	brge	.+10     	; 0x1974 <LCD_voidSendChar+0x8e>
		__ticks = 1;
    196a:	81 e0       	ldi	r24, 0x01	; 1
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	9c 8b       	std	Y+20, r25	; 0x14
    1970:	8b 8b       	std	Y+19, r24	; 0x13
    1972:	3f c0       	rjmp	.+126    	; 0x19f2 <LCD_voidSendChar+0x10c>
	else if (__tmp > 65535)
    1974:	6d 89       	ldd	r22, Y+21	; 0x15
    1976:	7e 89       	ldd	r23, Y+22	; 0x16
    1978:	8f 89       	ldd	r24, Y+23	; 0x17
    197a:	98 8d       	ldd	r25, Y+24	; 0x18
    197c:	20 e0       	ldi	r18, 0x00	; 0
    197e:	3f ef       	ldi	r19, 0xFF	; 255
    1980:	4f e7       	ldi	r20, 0x7F	; 127
    1982:	57 e4       	ldi	r21, 0x47	; 71
    1984:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1988:	18 16       	cp	r1, r24
    198a:	4c f5       	brge	.+82     	; 0x19de <LCD_voidSendChar+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    198c:	69 8d       	ldd	r22, Y+25	; 0x19
    198e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1990:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1992:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1994:	20 e0       	ldi	r18, 0x00	; 0
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	40 e2       	ldi	r20, 0x20	; 32
    199a:	51 e4       	ldi	r21, 0x41	; 65
    199c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19a0:	dc 01       	movw	r26, r24
    19a2:	cb 01       	movw	r24, r22
    19a4:	bc 01       	movw	r22, r24
    19a6:	cd 01       	movw	r24, r26
    19a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ac:	dc 01       	movw	r26, r24
    19ae:	cb 01       	movw	r24, r22
    19b0:	9c 8b       	std	Y+20, r25	; 0x14
    19b2:	8b 8b       	std	Y+19, r24	; 0x13
    19b4:	0f c0       	rjmp	.+30     	; 0x19d4 <LCD_voidSendChar+0xee>
    19b6:	88 ec       	ldi	r24, 0xC8	; 200
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	9a 8b       	std	Y+18, r25	; 0x12
    19bc:	89 8b       	std	Y+17, r24	; 0x11
    19be:	89 89       	ldd	r24, Y+17	; 0x11
    19c0:	9a 89       	ldd	r25, Y+18	; 0x12
    19c2:	01 97       	sbiw	r24, 0x01	; 1
    19c4:	f1 f7       	brne	.-4      	; 0x19c2 <LCD_voidSendChar+0xdc>
    19c6:	9a 8b       	std	Y+18, r25	; 0x12
    19c8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19ca:	8b 89       	ldd	r24, Y+19	; 0x13
    19cc:	9c 89       	ldd	r25, Y+20	; 0x14
    19ce:	01 97       	sbiw	r24, 0x01	; 1
    19d0:	9c 8b       	std	Y+20, r25	; 0x14
    19d2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19d4:	8b 89       	ldd	r24, Y+19	; 0x13
    19d6:	9c 89       	ldd	r25, Y+20	; 0x14
    19d8:	00 97       	sbiw	r24, 0x00	; 0
    19da:	69 f7       	brne	.-38     	; 0x19b6 <LCD_voidSendChar+0xd0>
    19dc:	14 c0       	rjmp	.+40     	; 0x1a06 <LCD_voidSendChar+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19de:	6d 89       	ldd	r22, Y+21	; 0x15
    19e0:	7e 89       	ldd	r23, Y+22	; 0x16
    19e2:	8f 89       	ldd	r24, Y+23	; 0x17
    19e4:	98 8d       	ldd	r25, Y+24	; 0x18
    19e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ea:	dc 01       	movw	r26, r24
    19ec:	cb 01       	movw	r24, r22
    19ee:	9c 8b       	std	Y+20, r25	; 0x14
    19f0:	8b 8b       	std	Y+19, r24	; 0x13
    19f2:	8b 89       	ldd	r24, Y+19	; 0x13
    19f4:	9c 89       	ldd	r25, Y+20	; 0x14
    19f6:	98 8b       	std	Y+16, r25	; 0x10
    19f8:	8f 87       	std	Y+15, r24	; 0x0f
    19fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    19fc:	98 89       	ldd	r25, Y+16	; 0x10
    19fe:	01 97       	sbiw	r24, 0x01	; 1
    1a00:	f1 f7       	brne	.-4      	; 0x19fe <LCD_voidSendChar+0x118>
    1a02:	98 8b       	std	Y+16, r25	; 0x10
    1a04:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	MDIO_vidSetPinValue(LCD_E_PORT , LCD_E_PIN , LOW);
    1a06:	81 e4       	ldi	r24, 0x41	; 65
    1a08:	62 e0       	ldi	r22, 0x02	; 2
    1a0a:	40 e0       	ldi	r20, 0x00	; 0
    1a0c:	0e 94 77 11 	call	0x22ee	; 0x22ee <MDIO_vidSetPinValue>
    1a10:	80 e0       	ldi	r24, 0x00	; 0
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	a0 e2       	ldi	r26, 0x20	; 32
    1a16:	b1 e4       	ldi	r27, 0x41	; 65
    1a18:	8b 87       	std	Y+11, r24	; 0x0b
    1a1a:	9c 87       	std	Y+12, r25	; 0x0c
    1a1c:	ad 87       	std	Y+13, r26	; 0x0d
    1a1e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a20:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a22:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a24:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a26:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a28:	20 e0       	ldi	r18, 0x00	; 0
    1a2a:	30 e0       	ldi	r19, 0x00	; 0
    1a2c:	4a ef       	ldi	r20, 0xFA	; 250
    1a2e:	54 e4       	ldi	r21, 0x44	; 68
    1a30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a34:	dc 01       	movw	r26, r24
    1a36:	cb 01       	movw	r24, r22
    1a38:	8f 83       	std	Y+7, r24	; 0x07
    1a3a:	98 87       	std	Y+8, r25	; 0x08
    1a3c:	a9 87       	std	Y+9, r26	; 0x09
    1a3e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a40:	6f 81       	ldd	r22, Y+7	; 0x07
    1a42:	78 85       	ldd	r23, Y+8	; 0x08
    1a44:	89 85       	ldd	r24, Y+9	; 0x09
    1a46:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a48:	20 e0       	ldi	r18, 0x00	; 0
    1a4a:	30 e0       	ldi	r19, 0x00	; 0
    1a4c:	40 e8       	ldi	r20, 0x80	; 128
    1a4e:	5f e3       	ldi	r21, 0x3F	; 63
    1a50:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a54:	88 23       	and	r24, r24
    1a56:	2c f4       	brge	.+10     	; 0x1a62 <LCD_voidSendChar+0x17c>
		__ticks = 1;
    1a58:	81 e0       	ldi	r24, 0x01	; 1
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	9e 83       	std	Y+6, r25	; 0x06
    1a5e:	8d 83       	std	Y+5, r24	; 0x05
    1a60:	3f c0       	rjmp	.+126    	; 0x1ae0 <LCD_voidSendChar+0x1fa>
	else if (__tmp > 65535)
    1a62:	6f 81       	ldd	r22, Y+7	; 0x07
    1a64:	78 85       	ldd	r23, Y+8	; 0x08
    1a66:	89 85       	ldd	r24, Y+9	; 0x09
    1a68:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a6a:	20 e0       	ldi	r18, 0x00	; 0
    1a6c:	3f ef       	ldi	r19, 0xFF	; 255
    1a6e:	4f e7       	ldi	r20, 0x7F	; 127
    1a70:	57 e4       	ldi	r21, 0x47	; 71
    1a72:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a76:	18 16       	cp	r1, r24
    1a78:	4c f5       	brge	.+82     	; 0x1acc <LCD_voidSendChar+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a80:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a82:	20 e0       	ldi	r18, 0x00	; 0
    1a84:	30 e0       	ldi	r19, 0x00	; 0
    1a86:	40 e2       	ldi	r20, 0x20	; 32
    1a88:	51 e4       	ldi	r21, 0x41	; 65
    1a8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a8e:	dc 01       	movw	r26, r24
    1a90:	cb 01       	movw	r24, r22
    1a92:	bc 01       	movw	r22, r24
    1a94:	cd 01       	movw	r24, r26
    1a96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a9a:	dc 01       	movw	r26, r24
    1a9c:	cb 01       	movw	r24, r22
    1a9e:	9e 83       	std	Y+6, r25	; 0x06
    1aa0:	8d 83       	std	Y+5, r24	; 0x05
    1aa2:	0f c0       	rjmp	.+30     	; 0x1ac2 <LCD_voidSendChar+0x1dc>
    1aa4:	88 ec       	ldi	r24, 0xC8	; 200
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	9c 83       	std	Y+4, r25	; 0x04
    1aaa:	8b 83       	std	Y+3, r24	; 0x03
    1aac:	8b 81       	ldd	r24, Y+3	; 0x03
    1aae:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab0:	01 97       	sbiw	r24, 0x01	; 1
    1ab2:	f1 f7       	brne	.-4      	; 0x1ab0 <LCD_voidSendChar+0x1ca>
    1ab4:	9c 83       	std	Y+4, r25	; 0x04
    1ab6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ab8:	8d 81       	ldd	r24, Y+5	; 0x05
    1aba:	9e 81       	ldd	r25, Y+6	; 0x06
    1abc:	01 97       	sbiw	r24, 0x01	; 1
    1abe:	9e 83       	std	Y+6, r25	; 0x06
    1ac0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ac2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ac4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ac6:	00 97       	sbiw	r24, 0x00	; 0
    1ac8:	69 f7       	brne	.-38     	; 0x1aa4 <LCD_voidSendChar+0x1be>
    1aca:	14 c0       	rjmp	.+40     	; 0x1af4 <LCD_voidSendChar+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1acc:	6f 81       	ldd	r22, Y+7	; 0x07
    1ace:	78 85       	ldd	r23, Y+8	; 0x08
    1ad0:	89 85       	ldd	r24, Y+9	; 0x09
    1ad2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ad4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ad8:	dc 01       	movw	r26, r24
    1ada:	cb 01       	movw	r24, r22
    1adc:	9e 83       	std	Y+6, r25	; 0x06
    1ade:	8d 83       	std	Y+5, r24	; 0x05
    1ae0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ae2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ae4:	9a 83       	std	Y+2, r25	; 0x02
    1ae6:	89 83       	std	Y+1, r24	; 0x01
    1ae8:	89 81       	ldd	r24, Y+1	; 0x01
    1aea:	9a 81       	ldd	r25, Y+2	; 0x02
    1aec:	01 97       	sbiw	r24, 0x01	; 1
    1aee:	f1 f7       	brne	.-4      	; 0x1aec <LCD_voidSendChar+0x206>
    1af0:	9a 83       	std	Y+2, r25	; 0x02
    1af2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    1af4:	6d 96       	adiw	r28, 0x1d	; 29
    1af6:	0f b6       	in	r0, 0x3f	; 63
    1af8:	f8 94       	cli
    1afa:	de bf       	out	0x3e, r29	; 62
    1afc:	0f be       	out	0x3f, r0	; 63
    1afe:	cd bf       	out	0x3d, r28	; 61
    1b00:	cf 91       	pop	r28
    1b02:	df 91       	pop	r29
    1b04:	08 95       	ret

00001b06 <LCD_voidPrintString>:


void LCD_voidPrintString(char *str)
{
    1b06:	df 93       	push	r29
    1b08:	cf 93       	push	r28
    1b0a:	00 d0       	rcall	.+0      	; 0x1b0c <LCD_voidPrintString+0x6>
    1b0c:	0f 92       	push	r0
    1b0e:	cd b7       	in	r28, 0x3d	; 61
    1b10:	de b7       	in	r29, 0x3e	; 62
    1b12:	9b 83       	std	Y+3, r25	; 0x03
    1b14:	8a 83       	std	Y+2, r24	; 0x02
	for (u8 i=0;str[i]!=0;i++)
    1b16:	19 82       	std	Y+1, r1	; 0x01
    1b18:	0e c0       	rjmp	.+28     	; 0x1b36 <LCD_voidPrintString+0x30>
		LCD_voidSendChar(str[i]);
    1b1a:	89 81       	ldd	r24, Y+1	; 0x01
    1b1c:	28 2f       	mov	r18, r24
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	8a 81       	ldd	r24, Y+2	; 0x02
    1b22:	9b 81       	ldd	r25, Y+3	; 0x03
    1b24:	fc 01       	movw	r30, r24
    1b26:	e2 0f       	add	r30, r18
    1b28:	f3 1f       	adc	r31, r19
    1b2a:	80 81       	ld	r24, Z
    1b2c:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <LCD_voidSendChar>
}


void LCD_voidPrintString(char *str)
{
	for (u8 i=0;str[i]!=0;i++)
    1b30:	89 81       	ldd	r24, Y+1	; 0x01
    1b32:	8f 5f       	subi	r24, 0xFF	; 255
    1b34:	89 83       	std	Y+1, r24	; 0x01
    1b36:	89 81       	ldd	r24, Y+1	; 0x01
    1b38:	28 2f       	mov	r18, r24
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3e:	9b 81       	ldd	r25, Y+3	; 0x03
    1b40:	fc 01       	movw	r30, r24
    1b42:	e2 0f       	add	r30, r18
    1b44:	f3 1f       	adc	r31, r19
    1b46:	80 81       	ld	r24, Z
    1b48:	88 23       	and	r24, r24
    1b4a:	39 f7       	brne	.-50     	; 0x1b1a <LCD_voidPrintString+0x14>
		LCD_voidSendChar(str[i]);
}
    1b4c:	0f 90       	pop	r0
    1b4e:	0f 90       	pop	r0
    1b50:	0f 90       	pop	r0
    1b52:	cf 91       	pop	r28
    1b54:	df 91       	pop	r29
    1b56:	08 95       	ret

00001b58 <LCD_voidWriteString>:

void LCD_voidWriteString(const u8 *Cpy_str)
{
    1b58:	df 93       	push	r29
    1b5a:	cf 93       	push	r28
    1b5c:	cd b7       	in	r28, 0x3d	; 61
    1b5e:	de b7       	in	r29, 0x3e	; 62
    1b60:	60 97       	sbiw	r28, 0x10	; 16
    1b62:	0f b6       	in	r0, 0x3f	; 63
    1b64:	f8 94       	cli
    1b66:	de bf       	out	0x3e, r29	; 62
    1b68:	0f be       	out	0x3f, r0	; 63
    1b6a:	cd bf       	out	0x3d, r28	; 61
    1b6c:	98 8b       	std	Y+16, r25	; 0x10
    1b6e:	8f 87       	std	Y+15, r24	; 0x0f
    1b70:	7c c0       	rjmp	.+248    	; 0x1c6a <LCD_voidWriteString+0x112>
	while ( (*Cpy_str) != NULL)
	{
		LCD_voidSendChar(*Cpy_str);
    1b72:	ef 85       	ldd	r30, Y+15	; 0x0f
    1b74:	f8 89       	ldd	r31, Y+16	; 0x10
    1b76:	80 81       	ld	r24, Z
    1b78:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <LCD_voidSendChar>
		Cpy_str++;
    1b7c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b7e:	98 89       	ldd	r25, Y+16	; 0x10
    1b80:	01 96       	adiw	r24, 0x01	; 1
    1b82:	98 8b       	std	Y+16, r25	; 0x10
    1b84:	8f 87       	std	Y+15, r24	; 0x0f
    1b86:	80 e0       	ldi	r24, 0x00	; 0
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	a0 ea       	ldi	r26, 0xA0	; 160
    1b8c:	b0 e4       	ldi	r27, 0x40	; 64
    1b8e:	8b 87       	std	Y+11, r24	; 0x0b
    1b90:	9c 87       	std	Y+12, r25	; 0x0c
    1b92:	ad 87       	std	Y+13, r26	; 0x0d
    1b94:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b96:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b98:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b9e:	20 e0       	ldi	r18, 0x00	; 0
    1ba0:	30 e0       	ldi	r19, 0x00	; 0
    1ba2:	4a ef       	ldi	r20, 0xFA	; 250
    1ba4:	54 e4       	ldi	r21, 0x44	; 68
    1ba6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1baa:	dc 01       	movw	r26, r24
    1bac:	cb 01       	movw	r24, r22
    1bae:	8f 83       	std	Y+7, r24	; 0x07
    1bb0:	98 87       	std	Y+8, r25	; 0x08
    1bb2:	a9 87       	std	Y+9, r26	; 0x09
    1bb4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bb6:	6f 81       	ldd	r22, Y+7	; 0x07
    1bb8:	78 85       	ldd	r23, Y+8	; 0x08
    1bba:	89 85       	ldd	r24, Y+9	; 0x09
    1bbc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bbe:	20 e0       	ldi	r18, 0x00	; 0
    1bc0:	30 e0       	ldi	r19, 0x00	; 0
    1bc2:	40 e8       	ldi	r20, 0x80	; 128
    1bc4:	5f e3       	ldi	r21, 0x3F	; 63
    1bc6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bca:	88 23       	and	r24, r24
    1bcc:	2c f4       	brge	.+10     	; 0x1bd8 <LCD_voidWriteString+0x80>
		__ticks = 1;
    1bce:	81 e0       	ldi	r24, 0x01	; 1
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	9e 83       	std	Y+6, r25	; 0x06
    1bd4:	8d 83       	std	Y+5, r24	; 0x05
    1bd6:	3f c0       	rjmp	.+126    	; 0x1c56 <LCD_voidWriteString+0xfe>
	else if (__tmp > 65535)
    1bd8:	6f 81       	ldd	r22, Y+7	; 0x07
    1bda:	78 85       	ldd	r23, Y+8	; 0x08
    1bdc:	89 85       	ldd	r24, Y+9	; 0x09
    1bde:	9a 85       	ldd	r25, Y+10	; 0x0a
    1be0:	20 e0       	ldi	r18, 0x00	; 0
    1be2:	3f ef       	ldi	r19, 0xFF	; 255
    1be4:	4f e7       	ldi	r20, 0x7F	; 127
    1be6:	57 e4       	ldi	r21, 0x47	; 71
    1be8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bec:	18 16       	cp	r1, r24
    1bee:	4c f5       	brge	.+82     	; 0x1c42 <LCD_voidWriteString+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bf0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bf2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bf4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bf6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bf8:	20 e0       	ldi	r18, 0x00	; 0
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	40 e2       	ldi	r20, 0x20	; 32
    1bfe:	51 e4       	ldi	r21, 0x41	; 65
    1c00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c04:	dc 01       	movw	r26, r24
    1c06:	cb 01       	movw	r24, r22
    1c08:	bc 01       	movw	r22, r24
    1c0a:	cd 01       	movw	r24, r26
    1c0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c10:	dc 01       	movw	r26, r24
    1c12:	cb 01       	movw	r24, r22
    1c14:	9e 83       	std	Y+6, r25	; 0x06
    1c16:	8d 83       	std	Y+5, r24	; 0x05
    1c18:	0f c0       	rjmp	.+30     	; 0x1c38 <LCD_voidWriteString+0xe0>
    1c1a:	88 ec       	ldi	r24, 0xC8	; 200
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	9c 83       	std	Y+4, r25	; 0x04
    1c20:	8b 83       	std	Y+3, r24	; 0x03
    1c22:	8b 81       	ldd	r24, Y+3	; 0x03
    1c24:	9c 81       	ldd	r25, Y+4	; 0x04
    1c26:	01 97       	sbiw	r24, 0x01	; 1
    1c28:	f1 f7       	brne	.-4      	; 0x1c26 <LCD_voidWriteString+0xce>
    1c2a:	9c 83       	std	Y+4, r25	; 0x04
    1c2c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c30:	9e 81       	ldd	r25, Y+6	; 0x06
    1c32:	01 97       	sbiw	r24, 0x01	; 1
    1c34:	9e 83       	std	Y+6, r25	; 0x06
    1c36:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c38:	8d 81       	ldd	r24, Y+5	; 0x05
    1c3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c3c:	00 97       	sbiw	r24, 0x00	; 0
    1c3e:	69 f7       	brne	.-38     	; 0x1c1a <LCD_voidWriteString+0xc2>
    1c40:	14 c0       	rjmp	.+40     	; 0x1c6a <LCD_voidWriteString+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c42:	6f 81       	ldd	r22, Y+7	; 0x07
    1c44:	78 85       	ldd	r23, Y+8	; 0x08
    1c46:	89 85       	ldd	r24, Y+9	; 0x09
    1c48:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c4e:	dc 01       	movw	r26, r24
    1c50:	cb 01       	movw	r24, r22
    1c52:	9e 83       	std	Y+6, r25	; 0x06
    1c54:	8d 83       	std	Y+5, r24	; 0x05
    1c56:	8d 81       	ldd	r24, Y+5	; 0x05
    1c58:	9e 81       	ldd	r25, Y+6	; 0x06
    1c5a:	9a 83       	std	Y+2, r25	; 0x02
    1c5c:	89 83       	std	Y+1, r24	; 0x01
    1c5e:	89 81       	ldd	r24, Y+1	; 0x01
    1c60:	9a 81       	ldd	r25, Y+2	; 0x02
    1c62:	01 97       	sbiw	r24, 0x01	; 1
    1c64:	f1 f7       	brne	.-4      	; 0x1c62 <LCD_voidWriteString+0x10a>
    1c66:	9a 83       	std	Y+2, r25	; 0x02
    1c68:	89 83       	std	Y+1, r24	; 0x01
		LCD_voidSendChar(str[i]);
}

void LCD_voidWriteString(const u8 *Cpy_str)
{
	while ( (*Cpy_str) != NULL)
    1c6a:	ef 85       	ldd	r30, Y+15	; 0x0f
    1c6c:	f8 89       	ldd	r31, Y+16	; 0x10
    1c6e:	80 81       	ld	r24, Z
    1c70:	88 2f       	mov	r24, r24
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	00 97       	sbiw	r24, 0x00	; 0
    1c76:	09 f0       	breq	.+2      	; 0x1c7a <LCD_voidWriteString+0x122>
    1c78:	7c cf       	rjmp	.-264    	; 0x1b72 <LCD_voidWriteString+0x1a>
	{
		LCD_voidSendChar(*Cpy_str);
		Cpy_str++;
		_delay_ms(5);
	}
}
    1c7a:	60 96       	adiw	r28, 0x10	; 16
    1c7c:	0f b6       	in	r0, 0x3f	; 63
    1c7e:	f8 94       	cli
    1c80:	de bf       	out	0x3e, r29	; 62
    1c82:	0f be       	out	0x3f, r0	; 63
    1c84:	cd bf       	out	0x3d, r28	; 61
    1c86:	cf 91       	pop	r28
    1c88:	df 91       	pop	r29
    1c8a:	08 95       	ret

00001c8c <LCD_voidGoTo>:

void LCD_voidGoTo(u8 Cpy_row , u8 Cpy_column)
{
    1c8c:	df 93       	push	r29
    1c8e:	cf 93       	push	r28
    1c90:	00 d0       	rcall	.+0      	; 0x1c92 <LCD_voidGoTo+0x6>
    1c92:	00 d0       	rcall	.+0      	; 0x1c94 <LCD_voidGoTo+0x8>
    1c94:	cd b7       	in	r28, 0x3d	; 61
    1c96:	de b7       	in	r29, 0x3e	; 62
    1c98:	89 83       	std	Y+1, r24	; 0x01
    1c9a:	6a 83       	std	Y+2, r22	; 0x02
	if ((Cpy_row>0) && (Cpy_column<=16))
    1c9c:	89 81       	ldd	r24, Y+1	; 0x01
    1c9e:	88 23       	and	r24, r24
    1ca0:	e1 f0       	breq	.+56     	; 0x1cda <LCD_voidGoTo+0x4e>
    1ca2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca4:	81 31       	cpi	r24, 0x11	; 17
    1ca6:	c8 f4       	brcc	.+50     	; 0x1cda <LCD_voidGoTo+0x4e>
	{
	    switch(Cpy_row)
    1ca8:	89 81       	ldd	r24, Y+1	; 0x01
    1caa:	28 2f       	mov	r18, r24
    1cac:	30 e0       	ldi	r19, 0x00	; 0
    1cae:	3c 83       	std	Y+4, r19	; 0x04
    1cb0:	2b 83       	std	Y+3, r18	; 0x03
    1cb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb4:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb6:	81 30       	cpi	r24, 0x01	; 1
    1cb8:	91 05       	cpc	r25, r1
    1cba:	31 f0       	breq	.+12     	; 0x1cc8 <LCD_voidGoTo+0x3c>
    1cbc:	2b 81       	ldd	r18, Y+3	; 0x03
    1cbe:	3c 81       	ldd	r19, Y+4	; 0x04
    1cc0:	22 30       	cpi	r18, 0x02	; 2
    1cc2:	31 05       	cpc	r19, r1
    1cc4:	31 f0       	breq	.+12     	; 0x1cd2 <LCD_voidGoTo+0x46>
    1cc6:	09 c0       	rjmp	.+18     	; 0x1cda <LCD_voidGoTo+0x4e>
	    {
		    case 1:
		    	LCD_voidSendCommand(Cpy_column+127);
    1cc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cca:	81 58       	subi	r24, 0x81	; 129
    1ccc:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <LCD_voidSendCommand>
    1cd0:	04 c0       	rjmp	.+8      	; 0x1cda <LCD_voidGoTo+0x4e>
		    break;

		    case 2:
		    	LCD_voidSendCommand(Cpy_column+191);
    1cd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd4:	81 54       	subi	r24, 0x41	; 65
    1cd6:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <LCD_voidSendCommand>

		    default:
		    break;
	    }
	}
}
    1cda:	0f 90       	pop	r0
    1cdc:	0f 90       	pop	r0
    1cde:	0f 90       	pop	r0
    1ce0:	0f 90       	pop	r0
    1ce2:	cf 91       	pop	r28
    1ce4:	df 91       	pop	r29
    1ce6:	08 95       	ret

00001ce8 <LCD_voidAddNewPattern>:

void LCD_voidAddNewPattern (u8 *Cpy_patternArray , u8 Cpy_blockNumber)
{
    1ce8:	df 93       	push	r29
    1cea:	cf 93       	push	r28
    1cec:	00 d0       	rcall	.+0      	; 0x1cee <LCD_voidAddNewPattern+0x6>
    1cee:	00 d0       	rcall	.+0      	; 0x1cf0 <LCD_voidAddNewPattern+0x8>
    1cf0:	0f 92       	push	r0
    1cf2:	cd b7       	in	r28, 0x3d	; 61
    1cf4:	de b7       	in	r29, 0x3e	; 62
    1cf6:	9c 83       	std	Y+4, r25	; 0x04
    1cf8:	8b 83       	std	Y+3, r24	; 0x03
    1cfa:	6d 83       	std	Y+5, r22	; 0x05
	u8 local_CGAdress = Cpy_blockNumber*LCD_CGRAM_BLOCKS_SIZE + LCD_CGRAM_START ;
    1cfc:	8d 81       	ldd	r24, Y+5	; 0x05
    1cfe:	88 2f       	mov	r24, r24
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	08 96       	adiw	r24, 0x08	; 8
    1d04:	88 0f       	add	r24, r24
    1d06:	99 1f       	adc	r25, r25
    1d08:	88 0f       	add	r24, r24
    1d0a:	99 1f       	adc	r25, r25
    1d0c:	88 0f       	add	r24, r24
    1d0e:	99 1f       	adc	r25, r25
    1d10:	8a 83       	std	Y+2, r24	; 0x02
	if (Cpy_blockNumber < LCD_CGRAM_BLOCKS_NUMBER)
    1d12:	8d 81       	ldd	r24, Y+5	; 0x05
    1d14:	88 30       	cpi	r24, 0x08	; 8
    1d16:	b0 f4       	brcc	.+44     	; 0x1d44 <LCD_voidAddNewPattern+0x5c>
	{
		LCD_voidSendCommand(local_CGAdress);
    1d18:	8a 81       	ldd	r24, Y+2	; 0x02
    1d1a:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <LCD_voidSendCommand>
		for (u8 i = 0 ; i < LCD_CGRAM_BLOCKS_SIZE ; i++)
    1d1e:	19 82       	std	Y+1, r1	; 0x01
    1d20:	0e c0       	rjmp	.+28     	; 0x1d3e <LCD_voidAddNewPattern+0x56>
		{
			LCD_voidSendChar(Cpy_patternArray[i]);
    1d22:	89 81       	ldd	r24, Y+1	; 0x01
    1d24:	28 2f       	mov	r18, r24
    1d26:	30 e0       	ldi	r19, 0x00	; 0
    1d28:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d2c:	fc 01       	movw	r30, r24
    1d2e:	e2 0f       	add	r30, r18
    1d30:	f3 1f       	adc	r31, r19
    1d32:	80 81       	ld	r24, Z
    1d34:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <LCD_voidSendChar>
{
	u8 local_CGAdress = Cpy_blockNumber*LCD_CGRAM_BLOCKS_SIZE + LCD_CGRAM_START ;
	if (Cpy_blockNumber < LCD_CGRAM_BLOCKS_NUMBER)
	{
		LCD_voidSendCommand(local_CGAdress);
		for (u8 i = 0 ; i < LCD_CGRAM_BLOCKS_SIZE ; i++)
    1d38:	89 81       	ldd	r24, Y+1	; 0x01
    1d3a:	8f 5f       	subi	r24, 0xFF	; 255
    1d3c:	89 83       	std	Y+1, r24	; 0x01
    1d3e:	89 81       	ldd	r24, Y+1	; 0x01
    1d40:	88 30       	cpi	r24, 0x08	; 8
    1d42:	78 f3       	brcs	.-34     	; 0x1d22 <LCD_voidAddNewPattern+0x3a>
	}
	else
	{
		/* Error */
	}
}
    1d44:	0f 90       	pop	r0
    1d46:	0f 90       	pop	r0
    1d48:	0f 90       	pop	r0
    1d4a:	0f 90       	pop	r0
    1d4c:	0f 90       	pop	r0
    1d4e:	cf 91       	pop	r28
    1d50:	df 91       	pop	r29
    1d52:	08 95       	ret

00001d54 <LCD_voidWritePattern>:

void LCD_voidWritePattern (u8 Cpy_blockNumber , u8 Cpy_row , u8 Cpy_column)
{
    1d54:	df 93       	push	r29
    1d56:	cf 93       	push	r28
    1d58:	00 d0       	rcall	.+0      	; 0x1d5a <LCD_voidWritePattern+0x6>
    1d5a:	0f 92       	push	r0
    1d5c:	cd b7       	in	r28, 0x3d	; 61
    1d5e:	de b7       	in	r29, 0x3e	; 62
    1d60:	89 83       	std	Y+1, r24	; 0x01
    1d62:	6a 83       	std	Y+2, r22	; 0x02
    1d64:	4b 83       	std	Y+3, r20	; 0x03
	if (Cpy_blockNumber < LCD_CGRAM_BLOCKS_NUMBER)
    1d66:	89 81       	ldd	r24, Y+1	; 0x01
    1d68:	88 30       	cpi	r24, 0x08	; 8
    1d6a:	38 f4       	brcc	.+14     	; 0x1d7a <LCD_voidWritePattern+0x26>
	{
		LCD_voidGoTo(Cpy_row , Cpy_column);
    1d6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d6e:	6b 81       	ldd	r22, Y+3	; 0x03
    1d70:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <LCD_voidGoTo>
		LCD_voidSendChar(Cpy_blockNumber);
    1d74:	89 81       	ldd	r24, Y+1	; 0x01
    1d76:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <LCD_voidSendChar>
	}
	else
	{
		/* Error */
	}
}
    1d7a:	0f 90       	pop	r0
    1d7c:	0f 90       	pop	r0
    1d7e:	0f 90       	pop	r0
    1d80:	cf 91       	pop	r28
    1d82:	df 91       	pop	r29
    1d84:	08 95       	ret

00001d86 <LCD_voidPrintInt>:


void LCD_voidPrintInt(s32 Number)
{
    1d86:	ef 92       	push	r14
    1d88:	ff 92       	push	r15
    1d8a:	0f 93       	push	r16
    1d8c:	1f 93       	push	r17
    1d8e:	df 93       	push	r29
    1d90:	cf 93       	push	r28
    1d92:	cd b7       	in	r28, 0x3d	; 61
    1d94:	de b7       	in	r29, 0x3e	; 62
    1d96:	cd 59       	subi	r28, 0x9D	; 157
    1d98:	d1 40       	sbci	r29, 0x01	; 1
    1d9a:	0f b6       	in	r0, 0x3f	; 63
    1d9c:	f8 94       	cli
    1d9e:	de bf       	out	0x3e, r29	; 62
    1da0:	0f be       	out	0x3f, r0	; 63
    1da2:	cd bf       	out	0x3d, r28	; 61
    1da4:	fe 01       	movw	r30, r28
    1da6:	e6 56       	subi	r30, 0x66	; 102
    1da8:	fe 4f       	sbci	r31, 0xFE	; 254
    1daa:	60 83       	st	Z, r22
    1dac:	71 83       	std	Z+1, r23	; 0x01
    1dae:	82 83       	std	Z+2, r24	; 0x02
    1db0:	93 83       	std	Z+3, r25	; 0x03
	s32 a[100];
	s32 i=0;
    1db2:	1e 82       	std	Y+6, r1	; 0x06
    1db4:	1f 82       	std	Y+7, r1	; 0x07
    1db6:	18 86       	std	Y+8, r1	; 0x08
    1db8:	19 86       	std	Y+9, r1	; 0x09
	u8 c=0;
    1dba:	1d 82       	std	Y+5, r1	; 0x05
	if(Number==0)
    1dbc:	fe 01       	movw	r30, r28
    1dbe:	e6 56       	subi	r30, 0x66	; 102
    1dc0:	fe 4f       	sbci	r31, 0xFE	; 254
    1dc2:	80 81       	ld	r24, Z
    1dc4:	91 81       	ldd	r25, Z+1	; 0x01
    1dc6:	a2 81       	ldd	r26, Z+2	; 0x02
    1dc8:	b3 81       	ldd	r27, Z+3	; 0x03
    1dca:	00 97       	sbiw	r24, 0x00	; 0
    1dcc:	a1 05       	cpc	r26, r1
    1dce:	b1 05       	cpc	r27, r1
    1dd0:	19 f4       	brne	.+6      	; 0x1dd8 <LCD_voidPrintInt+0x52>
		LCD_voidSendChar('0');
    1dd2:	80 e3       	ldi	r24, 0x30	; 48
    1dd4:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <LCD_voidSendChar>
	if(Number<0)
    1dd8:	fe 01       	movw	r30, r28
    1dda:	e6 56       	subi	r30, 0x66	; 102
    1ddc:	fe 4f       	sbci	r31, 0xFE	; 254
    1dde:	80 81       	ld	r24, Z
    1de0:	91 81       	ldd	r25, Z+1	; 0x01
    1de2:	a2 81       	ldd	r26, Z+2	; 0x02
    1de4:	b3 81       	ldd	r27, Z+3	; 0x03
    1de6:	bb 23       	and	r27, r27
    1de8:	0c f0       	brlt	.+2      	; 0x1dec <LCD_voidPrintInt+0x66>
    1dea:	64 c0       	rjmp	.+200    	; 0x1eb4 <LCD_voidPrintInt+0x12e>
	{
		Number*=-1;
    1dec:	9e 01       	movw	r18, r28
    1dee:	26 56       	subi	r18, 0x66	; 102
    1df0:	3e 4f       	sbci	r19, 0xFE	; 254
    1df2:	fe 01       	movw	r30, r28
    1df4:	e6 56       	subi	r30, 0x66	; 102
    1df6:	fe 4f       	sbci	r31, 0xFE	; 254
    1df8:	80 81       	ld	r24, Z
    1dfa:	91 81       	ldd	r25, Z+1	; 0x01
    1dfc:	a2 81       	ldd	r26, Z+2	; 0x02
    1dfe:	b3 81       	ldd	r27, Z+3	; 0x03
    1e00:	b0 95       	com	r27
    1e02:	a0 95       	com	r26
    1e04:	90 95       	com	r25
    1e06:	81 95       	neg	r24
    1e08:	9f 4f       	sbci	r25, 0xFF	; 255
    1e0a:	af 4f       	sbci	r26, 0xFF	; 255
    1e0c:	bf 4f       	sbci	r27, 0xFF	; 255
    1e0e:	f9 01       	movw	r30, r18
    1e10:	80 83       	st	Z, r24
    1e12:	91 83       	std	Z+1, r25	; 0x01
    1e14:	a2 83       	std	Z+2, r26	; 0x02
    1e16:	b3 83       	std	Z+3, r27	; 0x03
		c='-';
    1e18:	8d e2       	ldi	r24, 0x2D	; 45
    1e1a:	8d 83       	std	Y+5, r24	; 0x05
    1e1c:	4b c0       	rjmp	.+150    	; 0x1eb4 <LCD_voidPrintInt+0x12e>
	}
	while(Number!=0)
	{
		a[i]=Number%10;
    1e1e:	ee 80       	ldd	r14, Y+6	; 0x06
    1e20:	ff 80       	ldd	r15, Y+7	; 0x07
    1e22:	08 85       	ldd	r16, Y+8	; 0x08
    1e24:	19 85       	ldd	r17, Y+9	; 0x09
    1e26:	fe 01       	movw	r30, r28
    1e28:	e6 56       	subi	r30, 0x66	; 102
    1e2a:	fe 4f       	sbci	r31, 0xFE	; 254
    1e2c:	80 81       	ld	r24, Z
    1e2e:	91 81       	ldd	r25, Z+1	; 0x01
    1e30:	a2 81       	ldd	r26, Z+2	; 0x02
    1e32:	b3 81       	ldd	r27, Z+3	; 0x03
    1e34:	2a e0       	ldi	r18, 0x0A	; 10
    1e36:	30 e0       	ldi	r19, 0x00	; 0
    1e38:	40 e0       	ldi	r20, 0x00	; 0
    1e3a:	50 e0       	ldi	r21, 0x00	; 0
    1e3c:	bc 01       	movw	r22, r24
    1e3e:	cd 01       	movw	r24, r26
    1e40:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <__divmodsi4>
    1e44:	dc 01       	movw	r26, r24
    1e46:	cb 01       	movw	r24, r22
    1e48:	ac 01       	movw	r20, r24
    1e4a:	bd 01       	movw	r22, r26
    1e4c:	c7 01       	movw	r24, r14
    1e4e:	9c 01       	movw	r18, r24
    1e50:	22 0f       	add	r18, r18
    1e52:	33 1f       	adc	r19, r19
    1e54:	22 0f       	add	r18, r18
    1e56:	33 1f       	adc	r19, r19
    1e58:	ce 01       	movw	r24, r28
    1e5a:	01 96       	adiw	r24, 0x01	; 1
    1e5c:	82 0f       	add	r24, r18
    1e5e:	93 1f       	adc	r25, r19
    1e60:	fc 01       	movw	r30, r24
    1e62:	39 96       	adiw	r30, 0x09	; 9
    1e64:	40 83       	st	Z, r20
    1e66:	51 83       	std	Z+1, r21	; 0x01
    1e68:	62 83       	std	Z+2, r22	; 0x02
    1e6a:	73 83       	std	Z+3, r23	; 0x03
		//LCD_voidSendData(x+48);
		Number/=10;
    1e6c:	8e 01       	movw	r16, r28
    1e6e:	06 56       	subi	r16, 0x66	; 102
    1e70:	1e 4f       	sbci	r17, 0xFE	; 254
    1e72:	fe 01       	movw	r30, r28
    1e74:	e6 56       	subi	r30, 0x66	; 102
    1e76:	fe 4f       	sbci	r31, 0xFE	; 254
    1e78:	80 81       	ld	r24, Z
    1e7a:	91 81       	ldd	r25, Z+1	; 0x01
    1e7c:	a2 81       	ldd	r26, Z+2	; 0x02
    1e7e:	b3 81       	ldd	r27, Z+3	; 0x03
    1e80:	2a e0       	ldi	r18, 0x0A	; 10
    1e82:	30 e0       	ldi	r19, 0x00	; 0
    1e84:	40 e0       	ldi	r20, 0x00	; 0
    1e86:	50 e0       	ldi	r21, 0x00	; 0
    1e88:	bc 01       	movw	r22, r24
    1e8a:	cd 01       	movw	r24, r26
    1e8c:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <__divmodsi4>
    1e90:	da 01       	movw	r26, r20
    1e92:	c9 01       	movw	r24, r18
    1e94:	f8 01       	movw	r30, r16
    1e96:	80 83       	st	Z, r24
    1e98:	91 83       	std	Z+1, r25	; 0x01
    1e9a:	a2 83       	std	Z+2, r26	; 0x02
    1e9c:	b3 83       	std	Z+3, r27	; 0x03
		i++;
    1e9e:	8e 81       	ldd	r24, Y+6	; 0x06
    1ea0:	9f 81       	ldd	r25, Y+7	; 0x07
    1ea2:	a8 85       	ldd	r26, Y+8	; 0x08
    1ea4:	b9 85       	ldd	r27, Y+9	; 0x09
    1ea6:	01 96       	adiw	r24, 0x01	; 1
    1ea8:	a1 1d       	adc	r26, r1
    1eaa:	b1 1d       	adc	r27, r1
    1eac:	8e 83       	std	Y+6, r24	; 0x06
    1eae:	9f 83       	std	Y+7, r25	; 0x07
    1eb0:	a8 87       	std	Y+8, r26	; 0x08
    1eb2:	b9 87       	std	Y+9, r27	; 0x09
	if(Number<0)
	{
		Number*=-1;
		c='-';
	}
	while(Number!=0)
    1eb4:	fe 01       	movw	r30, r28
    1eb6:	e6 56       	subi	r30, 0x66	; 102
    1eb8:	fe 4f       	sbci	r31, 0xFE	; 254
    1eba:	80 81       	ld	r24, Z
    1ebc:	91 81       	ldd	r25, Z+1	; 0x01
    1ebe:	a2 81       	ldd	r26, Z+2	; 0x02
    1ec0:	b3 81       	ldd	r27, Z+3	; 0x03
    1ec2:	00 97       	sbiw	r24, 0x00	; 0
    1ec4:	a1 05       	cpc	r26, r1
    1ec6:	b1 05       	cpc	r27, r1
    1ec8:	09 f0       	breq	.+2      	; 0x1ecc <LCD_voidPrintInt+0x146>
    1eca:	a9 cf       	rjmp	.-174    	; 0x1e1e <LCD_voidPrintInt+0x98>
		a[i]=Number%10;
		//LCD_voidSendData(x+48);
		Number/=10;
		i++;
	}
	for(s32 j=i-1;j>=0;j--)
    1ecc:	8e 81       	ldd	r24, Y+6	; 0x06
    1ece:	9f 81       	ldd	r25, Y+7	; 0x07
    1ed0:	a8 85       	ldd	r26, Y+8	; 0x08
    1ed2:	b9 85       	ldd	r27, Y+9	; 0x09
    1ed4:	01 97       	sbiw	r24, 0x01	; 1
    1ed6:	a1 09       	sbc	r26, r1
    1ed8:	b1 09       	sbc	r27, r1
    1eda:	89 83       	std	Y+1, r24	; 0x01
    1edc:	9a 83       	std	Y+2, r25	; 0x02
    1ede:	ab 83       	std	Y+3, r26	; 0x03
    1ee0:	bc 83       	std	Y+4, r27	; 0x04
    1ee2:	28 c0       	rjmp	.+80     	; 0x1f34 <LCD_voidPrintInt+0x1ae>
	{
		if(c=='-')
    1ee4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee6:	8d 32       	cpi	r24, 0x2D	; 45
    1ee8:	21 f4       	brne	.+8      	; 0x1ef2 <LCD_voidPrintInt+0x16c>
		{
			LCD_voidSendChar(c);
    1eea:	8d 81       	ldd	r24, Y+5	; 0x05
    1eec:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <LCD_voidSendChar>
			c=0;
    1ef0:	1d 82       	std	Y+5, r1	; 0x05
		}
		LCD_voidSendChar(a[j]+48);
    1ef2:	89 81       	ldd	r24, Y+1	; 0x01
    1ef4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ef6:	ab 81       	ldd	r26, Y+3	; 0x03
    1ef8:	bc 81       	ldd	r27, Y+4	; 0x04
    1efa:	9c 01       	movw	r18, r24
    1efc:	22 0f       	add	r18, r18
    1efe:	33 1f       	adc	r19, r19
    1f00:	22 0f       	add	r18, r18
    1f02:	33 1f       	adc	r19, r19
    1f04:	ce 01       	movw	r24, r28
    1f06:	01 96       	adiw	r24, 0x01	; 1
    1f08:	82 0f       	add	r24, r18
    1f0a:	93 1f       	adc	r25, r19
    1f0c:	fc 01       	movw	r30, r24
    1f0e:	39 96       	adiw	r30, 0x09	; 9
    1f10:	80 81       	ld	r24, Z
    1f12:	91 81       	ldd	r25, Z+1	; 0x01
    1f14:	a2 81       	ldd	r26, Z+2	; 0x02
    1f16:	b3 81       	ldd	r27, Z+3	; 0x03
    1f18:	80 5d       	subi	r24, 0xD0	; 208
    1f1a:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <LCD_voidSendChar>
		a[i]=Number%10;
		//LCD_voidSendData(x+48);
		Number/=10;
		i++;
	}
	for(s32 j=i-1;j>=0;j--)
    1f1e:	89 81       	ldd	r24, Y+1	; 0x01
    1f20:	9a 81       	ldd	r25, Y+2	; 0x02
    1f22:	ab 81       	ldd	r26, Y+3	; 0x03
    1f24:	bc 81       	ldd	r27, Y+4	; 0x04
    1f26:	01 97       	sbiw	r24, 0x01	; 1
    1f28:	a1 09       	sbc	r26, r1
    1f2a:	b1 09       	sbc	r27, r1
    1f2c:	89 83       	std	Y+1, r24	; 0x01
    1f2e:	9a 83       	std	Y+2, r25	; 0x02
    1f30:	ab 83       	std	Y+3, r26	; 0x03
    1f32:	bc 83       	std	Y+4, r27	; 0x04
    1f34:	89 81       	ldd	r24, Y+1	; 0x01
    1f36:	9a 81       	ldd	r25, Y+2	; 0x02
    1f38:	ab 81       	ldd	r26, Y+3	; 0x03
    1f3a:	bc 81       	ldd	r27, Y+4	; 0x04
    1f3c:	bb 23       	and	r27, r27
    1f3e:	94 f6       	brge	.-92     	; 0x1ee4 <LCD_voidPrintInt+0x15e>
			LCD_voidSendChar(c);
			c=0;
		}
		LCD_voidSendChar(a[j]+48);
	}
}
    1f40:	c3 56       	subi	r28, 0x63	; 99
    1f42:	de 4f       	sbci	r29, 0xFE	; 254
    1f44:	0f b6       	in	r0, 0x3f	; 63
    1f46:	f8 94       	cli
    1f48:	de bf       	out	0x3e, r29	; 62
    1f4a:	0f be       	out	0x3f, r0	; 63
    1f4c:	cd bf       	out	0x3d, r28	; 61
    1f4e:	cf 91       	pop	r28
    1f50:	df 91       	pop	r29
    1f52:	1f 91       	pop	r17
    1f54:	0f 91       	pop	r16
    1f56:	ff 90       	pop	r15
    1f58:	ef 90       	pop	r14
    1f5a:	08 95       	ret

00001f5c <SPI_VidMasterInit>:
#include "BIT_MATHS.h"
#include "SPI_private.h"
#include "SPI_interface.h"

void SPI_VidMasterInit(void)
{
    1f5c:	df 93       	push	r29
    1f5e:	cf 93       	push	r28
    1f60:	cd b7       	in	r28, 0x3d	; 61
    1f62:	de b7       	in	r29, 0x3e	; 62
	//select clk pol=0;clk ph=0
	CLR_BIT(SPI_SPCR,SPCR_CPHA);
    1f64:	ad e2       	ldi	r26, 0x2D	; 45
    1f66:	b0 e0       	ldi	r27, 0x00	; 0
    1f68:	ed e2       	ldi	r30, 0x2D	; 45
    1f6a:	f0 e0       	ldi	r31, 0x00	; 0
    1f6c:	80 81       	ld	r24, Z
    1f6e:	8b 7f       	andi	r24, 0xFB	; 251
    1f70:	8c 93       	st	X, r24
	CLR_BIT(SPI_SPCR,SPCR_CPOL);
    1f72:	ad e2       	ldi	r26, 0x2D	; 45
    1f74:	b0 e0       	ldi	r27, 0x00	; 0
    1f76:	ed e2       	ldi	r30, 0x2D	; 45
    1f78:	f0 e0       	ldi	r31, 0x00	; 0
    1f7a:	80 81       	ld	r24, Z
    1f7c:	87 7f       	andi	r24, 0xF7	; 247
    1f7e:	8c 93       	st	X, r24

	//select master mode
	SET_BIT(SPI_SPCR,SPCR_MSTR);
    1f80:	ad e2       	ldi	r26, 0x2D	; 45
    1f82:	b0 e0       	ldi	r27, 0x00	; 0
    1f84:	ed e2       	ldi	r30, 0x2D	; 45
    1f86:	f0 e0       	ldi	r31, 0x00	; 0
    1f88:	80 81       	ld	r24, Z
    1f8a:	80 61       	ori	r24, 0x10	; 16
    1f8c:	8c 93       	st	X, r24

	//set data order MSB
	CLR_BIT(SPI_SPSR,SPSR_SPI2X);
    1f8e:	ae e2       	ldi	r26, 0x2E	; 46
    1f90:	b0 e0       	ldi	r27, 0x00	; 0
    1f92:	ee e2       	ldi	r30, 0x2E	; 46
    1f94:	f0 e0       	ldi	r31, 0x00	; 0
    1f96:	80 81       	ld	r24, Z
    1f98:	8e 7f       	andi	r24, 0xFE	; 254
    1f9a:	8c 93       	st	X, r24
	CLR_BIT(SPI_SPCR,SPCR_SPR1);
    1f9c:	ad e2       	ldi	r26, 0x2D	; 45
    1f9e:	b0 e0       	ldi	r27, 0x00	; 0
    1fa0:	ed e2       	ldi	r30, 0x2D	; 45
    1fa2:	f0 e0       	ldi	r31, 0x00	; 0
    1fa4:	80 81       	ld	r24, Z
    1fa6:	8d 7f       	andi	r24, 0xFD	; 253
    1fa8:	8c 93       	st	X, r24
	CLR_BIT(SPI_SPCR,SPCR_SPR0);
    1faa:	ad e2       	ldi	r26, 0x2D	; 45
    1fac:	b0 e0       	ldi	r27, 0x00	; 0
    1fae:	ed e2       	ldi	r30, 0x2D	; 45
    1fb0:	f0 e0       	ldi	r31, 0x00	; 0
    1fb2:	80 81       	ld	r24, Z
    1fb4:	8e 7f       	andi	r24, 0xFE	; 254
    1fb6:	8c 93       	st	X, r24

	//enable SPI
	SET_BIT(SPI_SPCR,SPCR_SPE);
    1fb8:	ad e2       	ldi	r26, 0x2D	; 45
    1fba:	b0 e0       	ldi	r27, 0x00	; 0
    1fbc:	ed e2       	ldi	r30, 0x2D	; 45
    1fbe:	f0 e0       	ldi	r31, 0x00	; 0
    1fc0:	80 81       	ld	r24, Z
    1fc2:	80 64       	ori	r24, 0x40	; 64
    1fc4:	8c 93       	st	X, r24

}
    1fc6:	cf 91       	pop	r28
    1fc8:	df 91       	pop	r29
    1fca:	08 95       	ret

00001fcc <SPI_VidSlaveInit>:
void SPI_VidSlaveInit(void)
{
    1fcc:	df 93       	push	r29
    1fce:	cf 93       	push	r28
    1fd0:	cd b7       	in	r28, 0x3d	; 61
    1fd2:	de b7       	in	r29, 0x3e	; 62
	//select slave mode
	CLR_BIT(SPI_SPCR,SPCR_MSTR);
    1fd4:	ad e2       	ldi	r26, 0x2D	; 45
    1fd6:	b0 e0       	ldi	r27, 0x00	; 0
    1fd8:	ed e2       	ldi	r30, 0x2D	; 45
    1fda:	f0 e0       	ldi	r31, 0x00	; 0
    1fdc:	80 81       	ld	r24, Z
    1fde:	8f 7e       	andi	r24, 0xEF	; 239
    1fe0:	8c 93       	st	X, r24

	//set data order MSB
	CLR_BIT(SPI_SPCR,SPCR_DORD);
    1fe2:	ad e2       	ldi	r26, 0x2D	; 45
    1fe4:	b0 e0       	ldi	r27, 0x00	; 0
    1fe6:	ed e2       	ldi	r30, 0x2D	; 45
    1fe8:	f0 e0       	ldi	r31, 0x00	; 0
    1fea:	80 81       	ld	r24, Z
    1fec:	8f 7d       	andi	r24, 0xDF	; 223
    1fee:	8c 93       	st	X, r24

	//enable SPI
	SET_BIT(SPI_SPCR,SPCR_SPE);
    1ff0:	ad e2       	ldi	r26, 0x2D	; 45
    1ff2:	b0 e0       	ldi	r27, 0x00	; 0
    1ff4:	ed e2       	ldi	r30, 0x2D	; 45
    1ff6:	f0 e0       	ldi	r31, 0x00	; 0
    1ff8:	80 81       	ld	r24, Z
    1ffa:	80 64       	ori	r24, 0x40	; 64
    1ffc:	8c 93       	st	X, r24
}
    1ffe:	cf 91       	pop	r28
    2000:	df 91       	pop	r29
    2002:	08 95       	ret

00002004 <SPI_U8TranSceive>:
u8 SPI_U8TranSceive(u8 Copy_U8Data)
{
    2004:	df 93       	push	r29
    2006:	cf 93       	push	r28
    2008:	0f 92       	push	r0
    200a:	cd b7       	in	r28, 0x3d	; 61
    200c:	de b7       	in	r29, 0x3e	; 62
    200e:	89 83       	std	Y+1, r24	; 0x01
	//send data
	SPI_SPDR=Copy_U8Data;
    2010:	ef e2       	ldi	r30, 0x2F	; 47
    2012:	f0 e0       	ldi	r31, 0x00	; 0
    2014:	89 81       	ldd	r24, Y+1	; 0x01
    2016:	80 83       	st	Z, r24

	//flag check
	while (GET_BIT(SPI_SPSR,SPSR_SPIF)==0);
    2018:	ee e2       	ldi	r30, 0x2E	; 46
    201a:	f0 e0       	ldi	r31, 0x00	; 0
    201c:	80 81       	ld	r24, Z
    201e:	88 23       	and	r24, r24
    2020:	dc f7       	brge	.-10     	; 0x2018 <SPI_U8TranSceive+0x14>
	return SPI_SPDR;
    2022:	ef e2       	ldi	r30, 0x2F	; 47
    2024:	f0 e0       	ldi	r31, 0x00	; 0
    2026:	80 81       	ld	r24, Z
}
    2028:	0f 90       	pop	r0
    202a:	cf 91       	pop	r28
    202c:	df 91       	pop	r29
    202e:	08 95       	ret

00002030 <UART_VidSendData>:
#include"BIT_MATHS.h"
#include"UART_interface.h"
#include"UART_private.h"

void UART_VidSendData(u8 Copy_u8Data)
{
    2030:	df 93       	push	r29
    2032:	cf 93       	push	r28
    2034:	0f 92       	push	r0
    2036:	cd b7       	in	r28, 0x3d	; 61
    2038:	de b7       	in	r29, 0x3e	; 62
    203a:	89 83       	std	Y+1, r24	; 0x01
	while (GET_BIT(UCSRA,UDRE)!=1);
    203c:	eb e2       	ldi	r30, 0x2B	; 43
    203e:	f0 e0       	ldi	r31, 0x00	; 0
    2040:	80 81       	ld	r24, Z
    2042:	82 95       	swap	r24
    2044:	86 95       	lsr	r24
    2046:	87 70       	andi	r24, 0x07	; 7
    2048:	88 2f       	mov	r24, r24
    204a:	90 e0       	ldi	r25, 0x00	; 0
    204c:	81 70       	andi	r24, 0x01	; 1
    204e:	90 70       	andi	r25, 0x00	; 0
    2050:	00 97       	sbiw	r24, 0x00	; 0
    2052:	a1 f3       	breq	.-24     	; 0x203c <UART_VidSendData+0xc>
	UDR=Copy_u8Data;
    2054:	ec e2       	ldi	r30, 0x2C	; 44
    2056:	f0 e0       	ldi	r31, 0x00	; 0
    2058:	89 81       	ldd	r24, Y+1	; 0x01
    205a:	80 83       	st	Z, r24
}
    205c:	0f 90       	pop	r0
    205e:	cf 91       	pop	r28
    2060:	df 91       	pop	r29
    2062:	08 95       	ret

00002064 <UART_VidReceiveData>:
u8 UART_VidReceiveData(void)
{
    2064:	df 93       	push	r29
    2066:	cf 93       	push	r28
    2068:	cd b7       	in	r28, 0x3d	; 61
    206a:	de b7       	in	r29, 0x3e	; 62
	while (GET_BIT(UCSRA,RXC)!=1);
    206c:	eb e2       	ldi	r30, 0x2B	; 43
    206e:	f0 e0       	ldi	r31, 0x00	; 0
    2070:	80 81       	ld	r24, Z
    2072:	88 1f       	adc	r24, r24
    2074:	88 27       	eor	r24, r24
    2076:	88 1f       	adc	r24, r24
    2078:	81 30       	cpi	r24, 0x01	; 1
    207a:	c1 f7       	brne	.-16     	; 0x206c <UART_VidReceiveData+0x8>
	return UDR;
    207c:	ec e2       	ldi	r30, 0x2C	; 44
    207e:	f0 e0       	ldi	r31, 0x00	; 0
    2080:	80 81       	ld	r24, Z
}
    2082:	cf 91       	pop	r28
    2084:	df 91       	pop	r29
    2086:	08 95       	ret

00002088 <UART_VidInit>:
void UART_VidInit(void)
{
    2088:	df 93       	push	r29
    208a:	cf 93       	push	r28
    208c:	0f 92       	push	r0
    208e:	cd b7       	in	r28, 0x3d	; 61
    2090:	de b7       	in	r29, 0x3e	; 62
	//Set frame format -> 8 data, 1 stop, no parity
	u8 local =0;
    2092:	19 82       	std	Y+1, r1	; 0x01
	SET_BIT(local,URSEL);
    2094:	89 81       	ldd	r24, Y+1	; 0x01
    2096:	80 68       	ori	r24, 0x80	; 128
    2098:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(local,UCSZ1);
    209a:	89 81       	ldd	r24, Y+1	; 0x01
    209c:	84 60       	ori	r24, 0x04	; 4
    209e:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(local,UCSZ0);
    20a0:	89 81       	ldd	r24, Y+1	; 0x01
    20a2:	82 60       	ori	r24, 0x02	; 2
    20a4:	89 83       	std	Y+1, r24	; 0x01

	UCSRC=local;//or 0x68,0b100000110
    20a6:	e0 e4       	ldi	r30, 0x40	; 64
    20a8:	f0 e0       	ldi	r31, 0x00	; 0
    20aa:	89 81       	ldd	r24, Y+1	; 0x01
    20ac:	80 83       	st	Z, r24

	//boud rate 9600........ table datasheet
	UBRRL=51;
    20ae:	e9 e2       	ldi	r30, 0x29	; 41
    20b0:	f0 e0       	ldi	r31, 0x00	; 0
    20b2:	83 e3       	ldi	r24, 0x33	; 51
    20b4:	80 83       	st	Z, r24
	//rx enable and tx enable
	SET_BIT(UCSRB,RXEN);
    20b6:	aa e2       	ldi	r26, 0x2A	; 42
    20b8:	b0 e0       	ldi	r27, 0x00	; 0
    20ba:	ea e2       	ldi	r30, 0x2A	; 42
    20bc:	f0 e0       	ldi	r31, 0x00	; 0
    20be:	80 81       	ld	r24, Z
    20c0:	80 61       	ori	r24, 0x10	; 16
    20c2:	8c 93       	st	X, r24
	SET_BIT(UCSRB,TXEN);
    20c4:	aa e2       	ldi	r26, 0x2A	; 42
    20c6:	b0 e0       	ldi	r27, 0x00	; 0
    20c8:	ea e2       	ldi	r30, 0x2A	; 42
    20ca:	f0 e0       	ldi	r31, 0x00	; 0
    20cc:	80 81       	ld	r24, Z
    20ce:	88 60       	ori	r24, 0x08	; 8
    20d0:	8c 93       	st	X, r24
}
    20d2:	0f 90       	pop	r0
    20d4:	cf 91       	pop	r28
    20d6:	df 91       	pop	r29
    20d8:	08 95       	ret

000020da <MDIO_vidSetPinDirection>:
#include "bit_maths.h"

#include "dio.h"

void MDIO_vidSetPinDirection(u8 cpy_u8PortNumber, u8 cpy_u8PinNumber, u8 cpy_u8PinDirection)
{
    20da:	df 93       	push	r29
    20dc:	cf 93       	push	r28
    20de:	cd b7       	in	r28, 0x3d	; 61
    20e0:	de b7       	in	r29, 0x3e	; 62
    20e2:	29 97       	sbiw	r28, 0x09	; 9
    20e4:	0f b6       	in	r0, 0x3f	; 63
    20e6:	f8 94       	cli
    20e8:	de bf       	out	0x3e, r29	; 62
    20ea:	0f be       	out	0x3f, r0	; 63
    20ec:	cd bf       	out	0x3d, r28	; 61
    20ee:	89 83       	std	Y+1, r24	; 0x01
    20f0:	6a 83       	std	Y+2, r22	; 0x02
    20f2:	4b 83       	std	Y+3, r20	; 0x03
	// DDRs
	switch (cpy_u8PinDirection)
    20f4:	8b 81       	ldd	r24, Y+3	; 0x03
    20f6:	28 2f       	mov	r18, r24
    20f8:	30 e0       	ldi	r19, 0x00	; 0
    20fa:	39 87       	std	Y+9, r19	; 0x09
    20fc:	28 87       	std	Y+8, r18	; 0x08
    20fe:	88 85       	ldd	r24, Y+8	; 0x08
    2100:	99 85       	ldd	r25, Y+9	; 0x09
    2102:	00 97       	sbiw	r24, 0x00	; 0
    2104:	09 f4       	brne	.+2      	; 0x2108 <MDIO_vidSetPinDirection+0x2e>
    2106:	76 c0       	rjmp	.+236    	; 0x21f4 <MDIO_vidSetPinDirection+0x11a>
    2108:	28 85       	ldd	r18, Y+8	; 0x08
    210a:	39 85       	ldd	r19, Y+9	; 0x09
    210c:	21 30       	cpi	r18, 0x01	; 1
    210e:	31 05       	cpc	r19, r1
    2110:	09 f0       	breq	.+2      	; 0x2114 <MDIO_vidSetPinDirection+0x3a>
    2112:	e4 c0       	rjmp	.+456    	; 0x22dc <MDIO_vidSetPinDirection+0x202>
	{
	case	OUTPUT:	// set DDRs
		switch (cpy_u8PortNumber)
    2114:	89 81       	ldd	r24, Y+1	; 0x01
    2116:	28 2f       	mov	r18, r24
    2118:	30 e0       	ldi	r19, 0x00	; 0
    211a:	3f 83       	std	Y+7, r19	; 0x07
    211c:	2e 83       	std	Y+6, r18	; 0x06
    211e:	8e 81       	ldd	r24, Y+6	; 0x06
    2120:	9f 81       	ldd	r25, Y+7	; 0x07
    2122:	82 34       	cpi	r24, 0x42	; 66
    2124:	91 05       	cpc	r25, r1
    2126:	51 f1       	breq	.+84     	; 0x217c <MDIO_vidSetPinDirection+0xa2>
    2128:	2e 81       	ldd	r18, Y+6	; 0x06
    212a:	3f 81       	ldd	r19, Y+7	; 0x07
    212c:	23 34       	cpi	r18, 0x43	; 67
    212e:	31 05       	cpc	r19, r1
    2130:	34 f4       	brge	.+12     	; 0x213e <MDIO_vidSetPinDirection+0x64>
    2132:	8e 81       	ldd	r24, Y+6	; 0x06
    2134:	9f 81       	ldd	r25, Y+7	; 0x07
    2136:	81 34       	cpi	r24, 0x41	; 65
    2138:	91 05       	cpc	r25, r1
    213a:	61 f0       	breq	.+24     	; 0x2154 <MDIO_vidSetPinDirection+0x7a>
    213c:	cf c0       	rjmp	.+414    	; 0x22dc <MDIO_vidSetPinDirection+0x202>
    213e:	2e 81       	ldd	r18, Y+6	; 0x06
    2140:	3f 81       	ldd	r19, Y+7	; 0x07
    2142:	23 34       	cpi	r18, 0x43	; 67
    2144:	31 05       	cpc	r19, r1
    2146:	71 f1       	breq	.+92     	; 0x21a4 <MDIO_vidSetPinDirection+0xca>
    2148:	8e 81       	ldd	r24, Y+6	; 0x06
    214a:	9f 81       	ldd	r25, Y+7	; 0x07
    214c:	84 34       	cpi	r24, 0x44	; 68
    214e:	91 05       	cpc	r25, r1
    2150:	e9 f1       	breq	.+122    	; 0x21cc <MDIO_vidSetPinDirection+0xf2>
    2152:	c4 c0       	rjmp	.+392    	; 0x22dc <MDIO_vidSetPinDirection+0x202>
		{
			case	PORT_A:	SET_BIT(DDRA, cpy_u8PinNumber);	break;
    2154:	aa e3       	ldi	r26, 0x3A	; 58
    2156:	b0 e0       	ldi	r27, 0x00	; 0
    2158:	ea e3       	ldi	r30, 0x3A	; 58
    215a:	f0 e0       	ldi	r31, 0x00	; 0
    215c:	80 81       	ld	r24, Z
    215e:	48 2f       	mov	r20, r24
    2160:	8a 81       	ldd	r24, Y+2	; 0x02
    2162:	28 2f       	mov	r18, r24
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	81 e0       	ldi	r24, 0x01	; 1
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	02 2e       	mov	r0, r18
    216c:	02 c0       	rjmp	.+4      	; 0x2172 <MDIO_vidSetPinDirection+0x98>
    216e:	88 0f       	add	r24, r24
    2170:	99 1f       	adc	r25, r25
    2172:	0a 94       	dec	r0
    2174:	e2 f7       	brpl	.-8      	; 0x216e <MDIO_vidSetPinDirection+0x94>
    2176:	84 2b       	or	r24, r20
    2178:	8c 93       	st	X, r24
    217a:	b0 c0       	rjmp	.+352    	; 0x22dc <MDIO_vidSetPinDirection+0x202>
			case 	PORT_B:	SET_BIT(DDRB, cpy_u8PinNumber);	break;
    217c:	a7 e3       	ldi	r26, 0x37	; 55
    217e:	b0 e0       	ldi	r27, 0x00	; 0
    2180:	e7 e3       	ldi	r30, 0x37	; 55
    2182:	f0 e0       	ldi	r31, 0x00	; 0
    2184:	80 81       	ld	r24, Z
    2186:	48 2f       	mov	r20, r24
    2188:	8a 81       	ldd	r24, Y+2	; 0x02
    218a:	28 2f       	mov	r18, r24
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	81 e0       	ldi	r24, 0x01	; 1
    2190:	90 e0       	ldi	r25, 0x00	; 0
    2192:	02 2e       	mov	r0, r18
    2194:	02 c0       	rjmp	.+4      	; 0x219a <MDIO_vidSetPinDirection+0xc0>
    2196:	88 0f       	add	r24, r24
    2198:	99 1f       	adc	r25, r25
    219a:	0a 94       	dec	r0
    219c:	e2 f7       	brpl	.-8      	; 0x2196 <MDIO_vidSetPinDirection+0xbc>
    219e:	84 2b       	or	r24, r20
    21a0:	8c 93       	st	X, r24
    21a2:	9c c0       	rjmp	.+312    	; 0x22dc <MDIO_vidSetPinDirection+0x202>
			case	PORT_C:	SET_BIT(DDRC, cpy_u8PinNumber);	break;
    21a4:	a4 e3       	ldi	r26, 0x34	; 52
    21a6:	b0 e0       	ldi	r27, 0x00	; 0
    21a8:	e4 e3       	ldi	r30, 0x34	; 52
    21aa:	f0 e0       	ldi	r31, 0x00	; 0
    21ac:	80 81       	ld	r24, Z
    21ae:	48 2f       	mov	r20, r24
    21b0:	8a 81       	ldd	r24, Y+2	; 0x02
    21b2:	28 2f       	mov	r18, r24
    21b4:	30 e0       	ldi	r19, 0x00	; 0
    21b6:	81 e0       	ldi	r24, 0x01	; 1
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	02 2e       	mov	r0, r18
    21bc:	02 c0       	rjmp	.+4      	; 0x21c2 <MDIO_vidSetPinDirection+0xe8>
    21be:	88 0f       	add	r24, r24
    21c0:	99 1f       	adc	r25, r25
    21c2:	0a 94       	dec	r0
    21c4:	e2 f7       	brpl	.-8      	; 0x21be <MDIO_vidSetPinDirection+0xe4>
    21c6:	84 2b       	or	r24, r20
    21c8:	8c 93       	st	X, r24
    21ca:	88 c0       	rjmp	.+272    	; 0x22dc <MDIO_vidSetPinDirection+0x202>
			case	PORT_D:	SET_BIT(DDRD, cpy_u8PinNumber);	break;
    21cc:	a1 e3       	ldi	r26, 0x31	; 49
    21ce:	b0 e0       	ldi	r27, 0x00	; 0
    21d0:	e1 e3       	ldi	r30, 0x31	; 49
    21d2:	f0 e0       	ldi	r31, 0x00	; 0
    21d4:	80 81       	ld	r24, Z
    21d6:	48 2f       	mov	r20, r24
    21d8:	8a 81       	ldd	r24, Y+2	; 0x02
    21da:	28 2f       	mov	r18, r24
    21dc:	30 e0       	ldi	r19, 0x00	; 0
    21de:	81 e0       	ldi	r24, 0x01	; 1
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	02 2e       	mov	r0, r18
    21e4:	02 c0       	rjmp	.+4      	; 0x21ea <MDIO_vidSetPinDirection+0x110>
    21e6:	88 0f       	add	r24, r24
    21e8:	99 1f       	adc	r25, r25
    21ea:	0a 94       	dec	r0
    21ec:	e2 f7       	brpl	.-8      	; 0x21e6 <MDIO_vidSetPinDirection+0x10c>
    21ee:	84 2b       	or	r24, r20
    21f0:	8c 93       	st	X, r24
    21f2:	74 c0       	rjmp	.+232    	; 0x22dc <MDIO_vidSetPinDirection+0x202>
			default:	/* wrong port number*/	break;
		}
		break;
	case	INPUT:	// clear
		switch (cpy_u8PortNumber)
    21f4:	89 81       	ldd	r24, Y+1	; 0x01
    21f6:	28 2f       	mov	r18, r24
    21f8:	30 e0       	ldi	r19, 0x00	; 0
    21fa:	3d 83       	std	Y+5, r19	; 0x05
    21fc:	2c 83       	std	Y+4, r18	; 0x04
    21fe:	8c 81       	ldd	r24, Y+4	; 0x04
    2200:	9d 81       	ldd	r25, Y+5	; 0x05
    2202:	82 34       	cpi	r24, 0x42	; 66
    2204:	91 05       	cpc	r25, r1
    2206:	61 f1       	breq	.+88     	; 0x2260 <MDIO_vidSetPinDirection+0x186>
    2208:	2c 81       	ldd	r18, Y+4	; 0x04
    220a:	3d 81       	ldd	r19, Y+5	; 0x05
    220c:	23 34       	cpi	r18, 0x43	; 67
    220e:	31 05       	cpc	r19, r1
    2210:	34 f4       	brge	.+12     	; 0x221e <MDIO_vidSetPinDirection+0x144>
    2212:	8c 81       	ldd	r24, Y+4	; 0x04
    2214:	9d 81       	ldd	r25, Y+5	; 0x05
    2216:	81 34       	cpi	r24, 0x41	; 65
    2218:	91 05       	cpc	r25, r1
    221a:	69 f0       	breq	.+26     	; 0x2236 <MDIO_vidSetPinDirection+0x15c>
    221c:	5f c0       	rjmp	.+190    	; 0x22dc <MDIO_vidSetPinDirection+0x202>
    221e:	2c 81       	ldd	r18, Y+4	; 0x04
    2220:	3d 81       	ldd	r19, Y+5	; 0x05
    2222:	23 34       	cpi	r18, 0x43	; 67
    2224:	31 05       	cpc	r19, r1
    2226:	89 f1       	breq	.+98     	; 0x228a <MDIO_vidSetPinDirection+0x1b0>
    2228:	8c 81       	ldd	r24, Y+4	; 0x04
    222a:	9d 81       	ldd	r25, Y+5	; 0x05
    222c:	84 34       	cpi	r24, 0x44	; 68
    222e:	91 05       	cpc	r25, r1
    2230:	09 f4       	brne	.+2      	; 0x2234 <MDIO_vidSetPinDirection+0x15a>
    2232:	40 c0       	rjmp	.+128    	; 0x22b4 <MDIO_vidSetPinDirection+0x1da>
    2234:	53 c0       	rjmp	.+166    	; 0x22dc <MDIO_vidSetPinDirection+0x202>
		{
			case	PORT_A:	CLR_BIT(DDRA, cpy_u8PinNumber);	break;
    2236:	aa e3       	ldi	r26, 0x3A	; 58
    2238:	b0 e0       	ldi	r27, 0x00	; 0
    223a:	ea e3       	ldi	r30, 0x3A	; 58
    223c:	f0 e0       	ldi	r31, 0x00	; 0
    223e:	80 81       	ld	r24, Z
    2240:	48 2f       	mov	r20, r24
    2242:	8a 81       	ldd	r24, Y+2	; 0x02
    2244:	28 2f       	mov	r18, r24
    2246:	30 e0       	ldi	r19, 0x00	; 0
    2248:	81 e0       	ldi	r24, 0x01	; 1
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	02 2e       	mov	r0, r18
    224e:	02 c0       	rjmp	.+4      	; 0x2254 <MDIO_vidSetPinDirection+0x17a>
    2250:	88 0f       	add	r24, r24
    2252:	99 1f       	adc	r25, r25
    2254:	0a 94       	dec	r0
    2256:	e2 f7       	brpl	.-8      	; 0x2250 <MDIO_vidSetPinDirection+0x176>
    2258:	80 95       	com	r24
    225a:	84 23       	and	r24, r20
    225c:	8c 93       	st	X, r24
    225e:	3e c0       	rjmp	.+124    	; 0x22dc <MDIO_vidSetPinDirection+0x202>
			case 	PORT_B:	CLR_BIT(DDRB, cpy_u8PinNumber);	break;
    2260:	a7 e3       	ldi	r26, 0x37	; 55
    2262:	b0 e0       	ldi	r27, 0x00	; 0
    2264:	e7 e3       	ldi	r30, 0x37	; 55
    2266:	f0 e0       	ldi	r31, 0x00	; 0
    2268:	80 81       	ld	r24, Z
    226a:	48 2f       	mov	r20, r24
    226c:	8a 81       	ldd	r24, Y+2	; 0x02
    226e:	28 2f       	mov	r18, r24
    2270:	30 e0       	ldi	r19, 0x00	; 0
    2272:	81 e0       	ldi	r24, 0x01	; 1
    2274:	90 e0       	ldi	r25, 0x00	; 0
    2276:	02 2e       	mov	r0, r18
    2278:	02 c0       	rjmp	.+4      	; 0x227e <MDIO_vidSetPinDirection+0x1a4>
    227a:	88 0f       	add	r24, r24
    227c:	99 1f       	adc	r25, r25
    227e:	0a 94       	dec	r0
    2280:	e2 f7       	brpl	.-8      	; 0x227a <MDIO_vidSetPinDirection+0x1a0>
    2282:	80 95       	com	r24
    2284:	84 23       	and	r24, r20
    2286:	8c 93       	st	X, r24
    2288:	29 c0       	rjmp	.+82     	; 0x22dc <MDIO_vidSetPinDirection+0x202>
			case	PORT_C:	CLR_BIT(DDRC, cpy_u8PinNumber);	break;
    228a:	a4 e3       	ldi	r26, 0x34	; 52
    228c:	b0 e0       	ldi	r27, 0x00	; 0
    228e:	e4 e3       	ldi	r30, 0x34	; 52
    2290:	f0 e0       	ldi	r31, 0x00	; 0
    2292:	80 81       	ld	r24, Z
    2294:	48 2f       	mov	r20, r24
    2296:	8a 81       	ldd	r24, Y+2	; 0x02
    2298:	28 2f       	mov	r18, r24
    229a:	30 e0       	ldi	r19, 0x00	; 0
    229c:	81 e0       	ldi	r24, 0x01	; 1
    229e:	90 e0       	ldi	r25, 0x00	; 0
    22a0:	02 2e       	mov	r0, r18
    22a2:	02 c0       	rjmp	.+4      	; 0x22a8 <MDIO_vidSetPinDirection+0x1ce>
    22a4:	88 0f       	add	r24, r24
    22a6:	99 1f       	adc	r25, r25
    22a8:	0a 94       	dec	r0
    22aa:	e2 f7       	brpl	.-8      	; 0x22a4 <MDIO_vidSetPinDirection+0x1ca>
    22ac:	80 95       	com	r24
    22ae:	84 23       	and	r24, r20
    22b0:	8c 93       	st	X, r24
    22b2:	14 c0       	rjmp	.+40     	; 0x22dc <MDIO_vidSetPinDirection+0x202>
			case	PORT_D:	CLR_BIT(DDRD, cpy_u8PinNumber);	break;
    22b4:	a1 e3       	ldi	r26, 0x31	; 49
    22b6:	b0 e0       	ldi	r27, 0x00	; 0
    22b8:	e1 e3       	ldi	r30, 0x31	; 49
    22ba:	f0 e0       	ldi	r31, 0x00	; 0
    22bc:	80 81       	ld	r24, Z
    22be:	48 2f       	mov	r20, r24
    22c0:	8a 81       	ldd	r24, Y+2	; 0x02
    22c2:	28 2f       	mov	r18, r24
    22c4:	30 e0       	ldi	r19, 0x00	; 0
    22c6:	81 e0       	ldi	r24, 0x01	; 1
    22c8:	90 e0       	ldi	r25, 0x00	; 0
    22ca:	02 2e       	mov	r0, r18
    22cc:	02 c0       	rjmp	.+4      	; 0x22d2 <MDIO_vidSetPinDirection+0x1f8>
    22ce:	88 0f       	add	r24, r24
    22d0:	99 1f       	adc	r25, r25
    22d2:	0a 94       	dec	r0
    22d4:	e2 f7       	brpl	.-8      	; 0x22ce <MDIO_vidSetPinDirection+0x1f4>
    22d6:	80 95       	com	r24
    22d8:	84 23       	and	r24, r20
    22da:	8c 93       	st	X, r24
		break;
	default:
		/* wrong direction */
		break;
	}
}
    22dc:	29 96       	adiw	r28, 0x09	; 9
    22de:	0f b6       	in	r0, 0x3f	; 63
    22e0:	f8 94       	cli
    22e2:	de bf       	out	0x3e, r29	; 62
    22e4:	0f be       	out	0x3f, r0	; 63
    22e6:	cd bf       	out	0x3d, r28	; 61
    22e8:	cf 91       	pop	r28
    22ea:	df 91       	pop	r29
    22ec:	08 95       	ret

000022ee <MDIO_vidSetPinValue>:



void MDIO_vidSetPinValue(u8 cpy_u8PortNumber, u8 cpy_u8PinNumber, u8 cpy_u8PinValue)
{
    22ee:	df 93       	push	r29
    22f0:	cf 93       	push	r28
    22f2:	cd b7       	in	r28, 0x3d	; 61
    22f4:	de b7       	in	r29, 0x3e	; 62
    22f6:	29 97       	sbiw	r28, 0x09	; 9
    22f8:	0f b6       	in	r0, 0x3f	; 63
    22fa:	f8 94       	cli
    22fc:	de bf       	out	0x3e, r29	; 62
    22fe:	0f be       	out	0x3f, r0	; 63
    2300:	cd bf       	out	0x3d, r28	; 61
    2302:	89 83       	std	Y+1, r24	; 0x01
    2304:	6a 83       	std	Y+2, r22	; 0x02
    2306:	4b 83       	std	Y+3, r20	; 0x03
	// PORTs registers
	switch (cpy_u8PinValue)
    2308:	8b 81       	ldd	r24, Y+3	; 0x03
    230a:	28 2f       	mov	r18, r24
    230c:	30 e0       	ldi	r19, 0x00	; 0
    230e:	39 87       	std	Y+9, r19	; 0x09
    2310:	28 87       	std	Y+8, r18	; 0x08
    2312:	88 85       	ldd	r24, Y+8	; 0x08
    2314:	99 85       	ldd	r25, Y+9	; 0x09
    2316:	00 97       	sbiw	r24, 0x00	; 0
    2318:	09 f4       	brne	.+2      	; 0x231c <MDIO_vidSetPinValue+0x2e>
    231a:	76 c0       	rjmp	.+236    	; 0x2408 <MDIO_vidSetPinValue+0x11a>
    231c:	28 85       	ldd	r18, Y+8	; 0x08
    231e:	39 85       	ldd	r19, Y+9	; 0x09
    2320:	21 30       	cpi	r18, 0x01	; 1
    2322:	31 05       	cpc	r19, r1
    2324:	09 f0       	breq	.+2      	; 0x2328 <MDIO_vidSetPinValue+0x3a>
    2326:	e4 c0       	rjmp	.+456    	; 0x24f0 <MDIO_vidSetPinValue+0x202>
	{
	case	HIGH:	// set
		switch (cpy_u8PortNumber)
    2328:	89 81       	ldd	r24, Y+1	; 0x01
    232a:	28 2f       	mov	r18, r24
    232c:	30 e0       	ldi	r19, 0x00	; 0
    232e:	3f 83       	std	Y+7, r19	; 0x07
    2330:	2e 83       	std	Y+6, r18	; 0x06
    2332:	8e 81       	ldd	r24, Y+6	; 0x06
    2334:	9f 81       	ldd	r25, Y+7	; 0x07
    2336:	82 34       	cpi	r24, 0x42	; 66
    2338:	91 05       	cpc	r25, r1
    233a:	51 f1       	breq	.+84     	; 0x2390 <MDIO_vidSetPinValue+0xa2>
    233c:	2e 81       	ldd	r18, Y+6	; 0x06
    233e:	3f 81       	ldd	r19, Y+7	; 0x07
    2340:	23 34       	cpi	r18, 0x43	; 67
    2342:	31 05       	cpc	r19, r1
    2344:	34 f4       	brge	.+12     	; 0x2352 <MDIO_vidSetPinValue+0x64>
    2346:	8e 81       	ldd	r24, Y+6	; 0x06
    2348:	9f 81       	ldd	r25, Y+7	; 0x07
    234a:	81 34       	cpi	r24, 0x41	; 65
    234c:	91 05       	cpc	r25, r1
    234e:	61 f0       	breq	.+24     	; 0x2368 <MDIO_vidSetPinValue+0x7a>
    2350:	cf c0       	rjmp	.+414    	; 0x24f0 <MDIO_vidSetPinValue+0x202>
    2352:	2e 81       	ldd	r18, Y+6	; 0x06
    2354:	3f 81       	ldd	r19, Y+7	; 0x07
    2356:	23 34       	cpi	r18, 0x43	; 67
    2358:	31 05       	cpc	r19, r1
    235a:	71 f1       	breq	.+92     	; 0x23b8 <MDIO_vidSetPinValue+0xca>
    235c:	8e 81       	ldd	r24, Y+6	; 0x06
    235e:	9f 81       	ldd	r25, Y+7	; 0x07
    2360:	84 34       	cpi	r24, 0x44	; 68
    2362:	91 05       	cpc	r25, r1
    2364:	e9 f1       	breq	.+122    	; 0x23e0 <MDIO_vidSetPinValue+0xf2>
    2366:	c4 c0       	rjmp	.+392    	; 0x24f0 <MDIO_vidSetPinValue+0x202>
		{
		case 	PORT_A:	SET_BIT(PORTA, cpy_u8PinNumber);	break;
    2368:	ab e3       	ldi	r26, 0x3B	; 59
    236a:	b0 e0       	ldi	r27, 0x00	; 0
    236c:	eb e3       	ldi	r30, 0x3B	; 59
    236e:	f0 e0       	ldi	r31, 0x00	; 0
    2370:	80 81       	ld	r24, Z
    2372:	48 2f       	mov	r20, r24
    2374:	8a 81       	ldd	r24, Y+2	; 0x02
    2376:	28 2f       	mov	r18, r24
    2378:	30 e0       	ldi	r19, 0x00	; 0
    237a:	81 e0       	ldi	r24, 0x01	; 1
    237c:	90 e0       	ldi	r25, 0x00	; 0
    237e:	02 2e       	mov	r0, r18
    2380:	02 c0       	rjmp	.+4      	; 0x2386 <MDIO_vidSetPinValue+0x98>
    2382:	88 0f       	add	r24, r24
    2384:	99 1f       	adc	r25, r25
    2386:	0a 94       	dec	r0
    2388:	e2 f7       	brpl	.-8      	; 0x2382 <MDIO_vidSetPinValue+0x94>
    238a:	84 2b       	or	r24, r20
    238c:	8c 93       	st	X, r24
    238e:	b0 c0       	rjmp	.+352    	; 0x24f0 <MDIO_vidSetPinValue+0x202>
		case	PORT_B:	SET_BIT(PORTB, cpy_u8PinNumber);	break;
    2390:	a8 e3       	ldi	r26, 0x38	; 56
    2392:	b0 e0       	ldi	r27, 0x00	; 0
    2394:	e8 e3       	ldi	r30, 0x38	; 56
    2396:	f0 e0       	ldi	r31, 0x00	; 0
    2398:	80 81       	ld	r24, Z
    239a:	48 2f       	mov	r20, r24
    239c:	8a 81       	ldd	r24, Y+2	; 0x02
    239e:	28 2f       	mov	r18, r24
    23a0:	30 e0       	ldi	r19, 0x00	; 0
    23a2:	81 e0       	ldi	r24, 0x01	; 1
    23a4:	90 e0       	ldi	r25, 0x00	; 0
    23a6:	02 2e       	mov	r0, r18
    23a8:	02 c0       	rjmp	.+4      	; 0x23ae <MDIO_vidSetPinValue+0xc0>
    23aa:	88 0f       	add	r24, r24
    23ac:	99 1f       	adc	r25, r25
    23ae:	0a 94       	dec	r0
    23b0:	e2 f7       	brpl	.-8      	; 0x23aa <MDIO_vidSetPinValue+0xbc>
    23b2:	84 2b       	or	r24, r20
    23b4:	8c 93       	st	X, r24
    23b6:	9c c0       	rjmp	.+312    	; 0x24f0 <MDIO_vidSetPinValue+0x202>
		case	PORT_C:	SET_BIT(PORTC, cpy_u8PinNumber);	break;
    23b8:	a5 e3       	ldi	r26, 0x35	; 53
    23ba:	b0 e0       	ldi	r27, 0x00	; 0
    23bc:	e5 e3       	ldi	r30, 0x35	; 53
    23be:	f0 e0       	ldi	r31, 0x00	; 0
    23c0:	80 81       	ld	r24, Z
    23c2:	48 2f       	mov	r20, r24
    23c4:	8a 81       	ldd	r24, Y+2	; 0x02
    23c6:	28 2f       	mov	r18, r24
    23c8:	30 e0       	ldi	r19, 0x00	; 0
    23ca:	81 e0       	ldi	r24, 0x01	; 1
    23cc:	90 e0       	ldi	r25, 0x00	; 0
    23ce:	02 2e       	mov	r0, r18
    23d0:	02 c0       	rjmp	.+4      	; 0x23d6 <MDIO_vidSetPinValue+0xe8>
    23d2:	88 0f       	add	r24, r24
    23d4:	99 1f       	adc	r25, r25
    23d6:	0a 94       	dec	r0
    23d8:	e2 f7       	brpl	.-8      	; 0x23d2 <MDIO_vidSetPinValue+0xe4>
    23da:	84 2b       	or	r24, r20
    23dc:	8c 93       	st	X, r24
    23de:	88 c0       	rjmp	.+272    	; 0x24f0 <MDIO_vidSetPinValue+0x202>
		case	PORT_D:	SET_BIT(PORTD, cpy_u8PinNumber);	break;
    23e0:	a2 e3       	ldi	r26, 0x32	; 50
    23e2:	b0 e0       	ldi	r27, 0x00	; 0
    23e4:	e2 e3       	ldi	r30, 0x32	; 50
    23e6:	f0 e0       	ldi	r31, 0x00	; 0
    23e8:	80 81       	ld	r24, Z
    23ea:	48 2f       	mov	r20, r24
    23ec:	8a 81       	ldd	r24, Y+2	; 0x02
    23ee:	28 2f       	mov	r18, r24
    23f0:	30 e0       	ldi	r19, 0x00	; 0
    23f2:	81 e0       	ldi	r24, 0x01	; 1
    23f4:	90 e0       	ldi	r25, 0x00	; 0
    23f6:	02 2e       	mov	r0, r18
    23f8:	02 c0       	rjmp	.+4      	; 0x23fe <MDIO_vidSetPinValue+0x110>
    23fa:	88 0f       	add	r24, r24
    23fc:	99 1f       	adc	r25, r25
    23fe:	0a 94       	dec	r0
    2400:	e2 f7       	brpl	.-8      	; 0x23fa <MDIO_vidSetPinValue+0x10c>
    2402:	84 2b       	or	r24, r20
    2404:	8c 93       	st	X, r24
    2406:	74 c0       	rjmp	.+232    	; 0x24f0 <MDIO_vidSetPinValue+0x202>
		default:	/* wrong port number */	break;
		}
		break;
	case	LOW:	// clear
		switch (cpy_u8PortNumber)
    2408:	89 81       	ldd	r24, Y+1	; 0x01
    240a:	28 2f       	mov	r18, r24
    240c:	30 e0       	ldi	r19, 0x00	; 0
    240e:	3d 83       	std	Y+5, r19	; 0x05
    2410:	2c 83       	std	Y+4, r18	; 0x04
    2412:	8c 81       	ldd	r24, Y+4	; 0x04
    2414:	9d 81       	ldd	r25, Y+5	; 0x05
    2416:	82 34       	cpi	r24, 0x42	; 66
    2418:	91 05       	cpc	r25, r1
    241a:	61 f1       	breq	.+88     	; 0x2474 <MDIO_vidSetPinValue+0x186>
    241c:	2c 81       	ldd	r18, Y+4	; 0x04
    241e:	3d 81       	ldd	r19, Y+5	; 0x05
    2420:	23 34       	cpi	r18, 0x43	; 67
    2422:	31 05       	cpc	r19, r1
    2424:	34 f4       	brge	.+12     	; 0x2432 <MDIO_vidSetPinValue+0x144>
    2426:	8c 81       	ldd	r24, Y+4	; 0x04
    2428:	9d 81       	ldd	r25, Y+5	; 0x05
    242a:	81 34       	cpi	r24, 0x41	; 65
    242c:	91 05       	cpc	r25, r1
    242e:	69 f0       	breq	.+26     	; 0x244a <MDIO_vidSetPinValue+0x15c>
    2430:	5f c0       	rjmp	.+190    	; 0x24f0 <MDIO_vidSetPinValue+0x202>
    2432:	2c 81       	ldd	r18, Y+4	; 0x04
    2434:	3d 81       	ldd	r19, Y+5	; 0x05
    2436:	23 34       	cpi	r18, 0x43	; 67
    2438:	31 05       	cpc	r19, r1
    243a:	89 f1       	breq	.+98     	; 0x249e <MDIO_vidSetPinValue+0x1b0>
    243c:	8c 81       	ldd	r24, Y+4	; 0x04
    243e:	9d 81       	ldd	r25, Y+5	; 0x05
    2440:	84 34       	cpi	r24, 0x44	; 68
    2442:	91 05       	cpc	r25, r1
    2444:	09 f4       	brne	.+2      	; 0x2448 <MDIO_vidSetPinValue+0x15a>
    2446:	40 c0       	rjmp	.+128    	; 0x24c8 <MDIO_vidSetPinValue+0x1da>
    2448:	53 c0       	rjmp	.+166    	; 0x24f0 <MDIO_vidSetPinValue+0x202>
		{
		case 	PORT_A:	CLR_BIT(PORTA, cpy_u8PinNumber);	break;
    244a:	ab e3       	ldi	r26, 0x3B	; 59
    244c:	b0 e0       	ldi	r27, 0x00	; 0
    244e:	eb e3       	ldi	r30, 0x3B	; 59
    2450:	f0 e0       	ldi	r31, 0x00	; 0
    2452:	80 81       	ld	r24, Z
    2454:	48 2f       	mov	r20, r24
    2456:	8a 81       	ldd	r24, Y+2	; 0x02
    2458:	28 2f       	mov	r18, r24
    245a:	30 e0       	ldi	r19, 0x00	; 0
    245c:	81 e0       	ldi	r24, 0x01	; 1
    245e:	90 e0       	ldi	r25, 0x00	; 0
    2460:	02 2e       	mov	r0, r18
    2462:	02 c0       	rjmp	.+4      	; 0x2468 <MDIO_vidSetPinValue+0x17a>
    2464:	88 0f       	add	r24, r24
    2466:	99 1f       	adc	r25, r25
    2468:	0a 94       	dec	r0
    246a:	e2 f7       	brpl	.-8      	; 0x2464 <MDIO_vidSetPinValue+0x176>
    246c:	80 95       	com	r24
    246e:	84 23       	and	r24, r20
    2470:	8c 93       	st	X, r24
    2472:	3e c0       	rjmp	.+124    	; 0x24f0 <MDIO_vidSetPinValue+0x202>
		case	PORT_B:	CLR_BIT(PORTB, cpy_u8PinNumber);	break;
    2474:	a8 e3       	ldi	r26, 0x38	; 56
    2476:	b0 e0       	ldi	r27, 0x00	; 0
    2478:	e8 e3       	ldi	r30, 0x38	; 56
    247a:	f0 e0       	ldi	r31, 0x00	; 0
    247c:	80 81       	ld	r24, Z
    247e:	48 2f       	mov	r20, r24
    2480:	8a 81       	ldd	r24, Y+2	; 0x02
    2482:	28 2f       	mov	r18, r24
    2484:	30 e0       	ldi	r19, 0x00	; 0
    2486:	81 e0       	ldi	r24, 0x01	; 1
    2488:	90 e0       	ldi	r25, 0x00	; 0
    248a:	02 2e       	mov	r0, r18
    248c:	02 c0       	rjmp	.+4      	; 0x2492 <MDIO_vidSetPinValue+0x1a4>
    248e:	88 0f       	add	r24, r24
    2490:	99 1f       	adc	r25, r25
    2492:	0a 94       	dec	r0
    2494:	e2 f7       	brpl	.-8      	; 0x248e <MDIO_vidSetPinValue+0x1a0>
    2496:	80 95       	com	r24
    2498:	84 23       	and	r24, r20
    249a:	8c 93       	st	X, r24
    249c:	29 c0       	rjmp	.+82     	; 0x24f0 <MDIO_vidSetPinValue+0x202>
		case	PORT_C:	CLR_BIT(PORTC, cpy_u8PinNumber);	break;
    249e:	a5 e3       	ldi	r26, 0x35	; 53
    24a0:	b0 e0       	ldi	r27, 0x00	; 0
    24a2:	e5 e3       	ldi	r30, 0x35	; 53
    24a4:	f0 e0       	ldi	r31, 0x00	; 0
    24a6:	80 81       	ld	r24, Z
    24a8:	48 2f       	mov	r20, r24
    24aa:	8a 81       	ldd	r24, Y+2	; 0x02
    24ac:	28 2f       	mov	r18, r24
    24ae:	30 e0       	ldi	r19, 0x00	; 0
    24b0:	81 e0       	ldi	r24, 0x01	; 1
    24b2:	90 e0       	ldi	r25, 0x00	; 0
    24b4:	02 2e       	mov	r0, r18
    24b6:	02 c0       	rjmp	.+4      	; 0x24bc <MDIO_vidSetPinValue+0x1ce>
    24b8:	88 0f       	add	r24, r24
    24ba:	99 1f       	adc	r25, r25
    24bc:	0a 94       	dec	r0
    24be:	e2 f7       	brpl	.-8      	; 0x24b8 <MDIO_vidSetPinValue+0x1ca>
    24c0:	80 95       	com	r24
    24c2:	84 23       	and	r24, r20
    24c4:	8c 93       	st	X, r24
    24c6:	14 c0       	rjmp	.+40     	; 0x24f0 <MDIO_vidSetPinValue+0x202>
		case	PORT_D:	CLR_BIT(PORTD, cpy_u8PinNumber);	break;
    24c8:	a2 e3       	ldi	r26, 0x32	; 50
    24ca:	b0 e0       	ldi	r27, 0x00	; 0
    24cc:	e2 e3       	ldi	r30, 0x32	; 50
    24ce:	f0 e0       	ldi	r31, 0x00	; 0
    24d0:	80 81       	ld	r24, Z
    24d2:	48 2f       	mov	r20, r24
    24d4:	8a 81       	ldd	r24, Y+2	; 0x02
    24d6:	28 2f       	mov	r18, r24
    24d8:	30 e0       	ldi	r19, 0x00	; 0
    24da:	81 e0       	ldi	r24, 0x01	; 1
    24dc:	90 e0       	ldi	r25, 0x00	; 0
    24de:	02 2e       	mov	r0, r18
    24e0:	02 c0       	rjmp	.+4      	; 0x24e6 <MDIO_vidSetPinValue+0x1f8>
    24e2:	88 0f       	add	r24, r24
    24e4:	99 1f       	adc	r25, r25
    24e6:	0a 94       	dec	r0
    24e8:	e2 f7       	brpl	.-8      	; 0x24e2 <MDIO_vidSetPinValue+0x1f4>
    24ea:	80 95       	com	r24
    24ec:	84 23       	and	r24, r20
    24ee:	8c 93       	st	X, r24
	default:
		/* wrong value */
		break;
	}

}
    24f0:	29 96       	adiw	r28, 0x09	; 9
    24f2:	0f b6       	in	r0, 0x3f	; 63
    24f4:	f8 94       	cli
    24f6:	de bf       	out	0x3e, r29	; 62
    24f8:	0f be       	out	0x3f, r0	; 63
    24fa:	cd bf       	out	0x3d, r28	; 61
    24fc:	cf 91       	pop	r28
    24fe:	df 91       	pop	r29
    2500:	08 95       	ret

00002502 <MDIO_vidGetPinValue>:



void MDIO_vidGetPinValue(u8 cpy_u8PortNumber, u8 cpy_u8PinNumber, u8* buf_u8PinValue)
{
    2502:	df 93       	push	r29
    2504:	cf 93       	push	r28
    2506:	00 d0       	rcall	.+0      	; 0x2508 <MDIO_vidGetPinValue+0x6>
    2508:	00 d0       	rcall	.+0      	; 0x250a <MDIO_vidGetPinValue+0x8>
    250a:	00 d0       	rcall	.+0      	; 0x250c <MDIO_vidGetPinValue+0xa>
    250c:	cd b7       	in	r28, 0x3d	; 61
    250e:	de b7       	in	r29, 0x3e	; 62
    2510:	89 83       	std	Y+1, r24	; 0x01
    2512:	6a 83       	std	Y+2, r22	; 0x02
    2514:	5c 83       	std	Y+4, r21	; 0x04
    2516:	4b 83       	std	Y+3, r20	; 0x03
	// PINs registers
	switch (cpy_u8PortNumber)	// get bit
    2518:	89 81       	ldd	r24, Y+1	; 0x01
    251a:	28 2f       	mov	r18, r24
    251c:	30 e0       	ldi	r19, 0x00	; 0
    251e:	3e 83       	std	Y+6, r19	; 0x06
    2520:	2d 83       	std	Y+5, r18	; 0x05
    2522:	4d 81       	ldd	r20, Y+5	; 0x05
    2524:	5e 81       	ldd	r21, Y+6	; 0x06
    2526:	42 34       	cpi	r20, 0x42	; 66
    2528:	51 05       	cpc	r21, r1
    252a:	59 f1       	breq	.+86     	; 0x2582 <MDIO_vidGetPinValue+0x80>
    252c:	8d 81       	ldd	r24, Y+5	; 0x05
    252e:	9e 81       	ldd	r25, Y+6	; 0x06
    2530:	83 34       	cpi	r24, 0x43	; 67
    2532:	91 05       	cpc	r25, r1
    2534:	34 f4       	brge	.+12     	; 0x2542 <MDIO_vidGetPinValue+0x40>
    2536:	2d 81       	ldd	r18, Y+5	; 0x05
    2538:	3e 81       	ldd	r19, Y+6	; 0x06
    253a:	21 34       	cpi	r18, 0x41	; 65
    253c:	31 05       	cpc	r19, r1
    253e:	69 f0       	breq	.+26     	; 0x255a <MDIO_vidGetPinValue+0x58>
    2540:	5b c0       	rjmp	.+182    	; 0x25f8 <MDIO_vidGetPinValue+0xf6>
    2542:	4d 81       	ldd	r20, Y+5	; 0x05
    2544:	5e 81       	ldd	r21, Y+6	; 0x06
    2546:	43 34       	cpi	r20, 0x43	; 67
    2548:	51 05       	cpc	r21, r1
    254a:	79 f1       	breq	.+94     	; 0x25aa <MDIO_vidGetPinValue+0xa8>
    254c:	8d 81       	ldd	r24, Y+5	; 0x05
    254e:	9e 81       	ldd	r25, Y+6	; 0x06
    2550:	84 34       	cpi	r24, 0x44	; 68
    2552:	91 05       	cpc	r25, r1
    2554:	09 f4       	brne	.+2      	; 0x2558 <MDIO_vidGetPinValue+0x56>
    2556:	3d c0       	rjmp	.+122    	; 0x25d2 <MDIO_vidGetPinValue+0xd0>
    2558:	4f c0       	rjmp	.+158    	; 0x25f8 <MDIO_vidGetPinValue+0xf6>
	{
	case	PORT_A:	*buf_u8PinValue = GET_BIT(PINA, cpy_u8PinNumber);	break;
    255a:	e9 e3       	ldi	r30, 0x39	; 57
    255c:	f0 e0       	ldi	r31, 0x00	; 0
    255e:	80 81       	ld	r24, Z
    2560:	28 2f       	mov	r18, r24
    2562:	30 e0       	ldi	r19, 0x00	; 0
    2564:	8a 81       	ldd	r24, Y+2	; 0x02
    2566:	88 2f       	mov	r24, r24
    2568:	90 e0       	ldi	r25, 0x00	; 0
    256a:	a9 01       	movw	r20, r18
    256c:	02 c0       	rjmp	.+4      	; 0x2572 <MDIO_vidGetPinValue+0x70>
    256e:	55 95       	asr	r21
    2570:	47 95       	ror	r20
    2572:	8a 95       	dec	r24
    2574:	e2 f7       	brpl	.-8      	; 0x256e <MDIO_vidGetPinValue+0x6c>
    2576:	ca 01       	movw	r24, r20
    2578:	81 70       	andi	r24, 0x01	; 1
    257a:	eb 81       	ldd	r30, Y+3	; 0x03
    257c:	fc 81       	ldd	r31, Y+4	; 0x04
    257e:	80 83       	st	Z, r24
    2580:	3b c0       	rjmp	.+118    	; 0x25f8 <MDIO_vidGetPinValue+0xf6>
	case	PORT_B:	*buf_u8PinValue = GET_BIT(PINB, cpy_u8PinNumber);	break;
    2582:	e6 e3       	ldi	r30, 0x36	; 54
    2584:	f0 e0       	ldi	r31, 0x00	; 0
    2586:	80 81       	ld	r24, Z
    2588:	28 2f       	mov	r18, r24
    258a:	30 e0       	ldi	r19, 0x00	; 0
    258c:	8a 81       	ldd	r24, Y+2	; 0x02
    258e:	88 2f       	mov	r24, r24
    2590:	90 e0       	ldi	r25, 0x00	; 0
    2592:	a9 01       	movw	r20, r18
    2594:	02 c0       	rjmp	.+4      	; 0x259a <MDIO_vidGetPinValue+0x98>
    2596:	55 95       	asr	r21
    2598:	47 95       	ror	r20
    259a:	8a 95       	dec	r24
    259c:	e2 f7       	brpl	.-8      	; 0x2596 <MDIO_vidGetPinValue+0x94>
    259e:	ca 01       	movw	r24, r20
    25a0:	81 70       	andi	r24, 0x01	; 1
    25a2:	eb 81       	ldd	r30, Y+3	; 0x03
    25a4:	fc 81       	ldd	r31, Y+4	; 0x04
    25a6:	80 83       	st	Z, r24
    25a8:	27 c0       	rjmp	.+78     	; 0x25f8 <MDIO_vidGetPinValue+0xf6>
	case	PORT_C:	*buf_u8PinValue = GET_BIT(PINC, cpy_u8PinNumber);	break;
    25aa:	e3 e3       	ldi	r30, 0x33	; 51
    25ac:	f0 e0       	ldi	r31, 0x00	; 0
    25ae:	80 81       	ld	r24, Z
    25b0:	28 2f       	mov	r18, r24
    25b2:	30 e0       	ldi	r19, 0x00	; 0
    25b4:	8a 81       	ldd	r24, Y+2	; 0x02
    25b6:	88 2f       	mov	r24, r24
    25b8:	90 e0       	ldi	r25, 0x00	; 0
    25ba:	a9 01       	movw	r20, r18
    25bc:	02 c0       	rjmp	.+4      	; 0x25c2 <MDIO_vidGetPinValue+0xc0>
    25be:	55 95       	asr	r21
    25c0:	47 95       	ror	r20
    25c2:	8a 95       	dec	r24
    25c4:	e2 f7       	brpl	.-8      	; 0x25be <MDIO_vidGetPinValue+0xbc>
    25c6:	ca 01       	movw	r24, r20
    25c8:	81 70       	andi	r24, 0x01	; 1
    25ca:	eb 81       	ldd	r30, Y+3	; 0x03
    25cc:	fc 81       	ldd	r31, Y+4	; 0x04
    25ce:	80 83       	st	Z, r24
    25d0:	13 c0       	rjmp	.+38     	; 0x25f8 <MDIO_vidGetPinValue+0xf6>
	case	PORT_D:	*buf_u8PinValue = GET_BIT(PIND, cpy_u8PinNumber);	break;
    25d2:	e0 e3       	ldi	r30, 0x30	; 48
    25d4:	f0 e0       	ldi	r31, 0x00	; 0
    25d6:	80 81       	ld	r24, Z
    25d8:	28 2f       	mov	r18, r24
    25da:	30 e0       	ldi	r19, 0x00	; 0
    25dc:	8a 81       	ldd	r24, Y+2	; 0x02
    25de:	88 2f       	mov	r24, r24
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	a9 01       	movw	r20, r18
    25e4:	02 c0       	rjmp	.+4      	; 0x25ea <MDIO_vidGetPinValue+0xe8>
    25e6:	55 95       	asr	r21
    25e8:	47 95       	ror	r20
    25ea:	8a 95       	dec	r24
    25ec:	e2 f7       	brpl	.-8      	; 0x25e6 <MDIO_vidGetPinValue+0xe4>
    25ee:	ca 01       	movw	r24, r20
    25f0:	81 70       	andi	r24, 0x01	; 1
    25f2:	eb 81       	ldd	r30, Y+3	; 0x03
    25f4:	fc 81       	ldd	r31, Y+4	; 0x04
    25f6:	80 83       	st	Z, r24
	default:	/* wrong port number */	break;
	}
}
    25f8:	26 96       	adiw	r28, 0x06	; 6
    25fa:	0f b6       	in	r0, 0x3f	; 63
    25fc:	f8 94       	cli
    25fe:	de bf       	out	0x3e, r29	; 62
    2600:	0f be       	out	0x3f, r0	; 63
    2602:	cd bf       	out	0x3d, r28	; 61
    2604:	cf 91       	pop	r28
    2606:	df 91       	pop	r29
    2608:	08 95       	ret

0000260a <MDIO_vidSetPortDirection>:



void MDIO_vidSetPortDirection(u8 cpy_u8PortNumber, u8 cpy_u8PortDirection)
{
    260a:	df 93       	push	r29
    260c:	cf 93       	push	r28
    260e:	00 d0       	rcall	.+0      	; 0x2610 <MDIO_vidSetPortDirection+0x6>
    2610:	00 d0       	rcall	.+0      	; 0x2612 <MDIO_vidSetPortDirection+0x8>
    2612:	cd b7       	in	r28, 0x3d	; 61
    2614:	de b7       	in	r29, 0x3e	; 62
    2616:	89 83       	std	Y+1, r24	; 0x01
    2618:	6a 83       	std	Y+2, r22	; 0x02
	// DDRs
	switch (cpy_u8PortNumber)
    261a:	89 81       	ldd	r24, Y+1	; 0x01
    261c:	28 2f       	mov	r18, r24
    261e:	30 e0       	ldi	r19, 0x00	; 0
    2620:	3c 83       	std	Y+4, r19	; 0x04
    2622:	2b 83       	std	Y+3, r18	; 0x03
    2624:	8b 81       	ldd	r24, Y+3	; 0x03
    2626:	9c 81       	ldd	r25, Y+4	; 0x04
    2628:	82 34       	cpi	r24, 0x42	; 66
    262a:	91 05       	cpc	r25, r1
    262c:	d9 f0       	breq	.+54     	; 0x2664 <MDIO_vidSetPortDirection+0x5a>
    262e:	2b 81       	ldd	r18, Y+3	; 0x03
    2630:	3c 81       	ldd	r19, Y+4	; 0x04
    2632:	23 34       	cpi	r18, 0x43	; 67
    2634:	31 05       	cpc	r19, r1
    2636:	34 f4       	brge	.+12     	; 0x2644 <MDIO_vidSetPortDirection+0x3a>
    2638:	8b 81       	ldd	r24, Y+3	; 0x03
    263a:	9c 81       	ldd	r25, Y+4	; 0x04
    263c:	81 34       	cpi	r24, 0x41	; 65
    263e:	91 05       	cpc	r25, r1
    2640:	61 f0       	breq	.+24     	; 0x265a <MDIO_vidSetPortDirection+0x50>
    2642:	1e c0       	rjmp	.+60     	; 0x2680 <MDIO_vidSetPortDirection+0x76>
    2644:	2b 81       	ldd	r18, Y+3	; 0x03
    2646:	3c 81       	ldd	r19, Y+4	; 0x04
    2648:	23 34       	cpi	r18, 0x43	; 67
    264a:	31 05       	cpc	r19, r1
    264c:	81 f0       	breq	.+32     	; 0x266e <MDIO_vidSetPortDirection+0x64>
    264e:	8b 81       	ldd	r24, Y+3	; 0x03
    2650:	9c 81       	ldd	r25, Y+4	; 0x04
    2652:	84 34       	cpi	r24, 0x44	; 68
    2654:	91 05       	cpc	r25, r1
    2656:	81 f0       	breq	.+32     	; 0x2678 <MDIO_vidSetPortDirection+0x6e>
    2658:	13 c0       	rjmp	.+38     	; 0x2680 <MDIO_vidSetPortDirection+0x76>
	{
	case 	PORT_A:	DDRA = cpy_u8PortDirection;	break;
    265a:	ea e3       	ldi	r30, 0x3A	; 58
    265c:	f0 e0       	ldi	r31, 0x00	; 0
    265e:	8a 81       	ldd	r24, Y+2	; 0x02
    2660:	80 83       	st	Z, r24
    2662:	0e c0       	rjmp	.+28     	; 0x2680 <MDIO_vidSetPortDirection+0x76>
	case	PORT_B:	DDRB = cpy_u8PortDirection;	break;
    2664:	e7 e3       	ldi	r30, 0x37	; 55
    2666:	f0 e0       	ldi	r31, 0x00	; 0
    2668:	8a 81       	ldd	r24, Y+2	; 0x02
    266a:	80 83       	st	Z, r24
    266c:	09 c0       	rjmp	.+18     	; 0x2680 <MDIO_vidSetPortDirection+0x76>
	case	PORT_C:	DDRC = cpy_u8PortDirection;	break;
    266e:	e4 e3       	ldi	r30, 0x34	; 52
    2670:	f0 e0       	ldi	r31, 0x00	; 0
    2672:	8a 81       	ldd	r24, Y+2	; 0x02
    2674:	80 83       	st	Z, r24
    2676:	04 c0       	rjmp	.+8      	; 0x2680 <MDIO_vidSetPortDirection+0x76>
	case	PORT_D:	DDRD = cpy_u8PortDirection;	break;
    2678:	e1 e3       	ldi	r30, 0x31	; 49
    267a:	f0 e0       	ldi	r31, 0x00	; 0
    267c:	8a 81       	ldd	r24, Y+2	; 0x02
    267e:	80 83       	st	Z, r24
	default:/* wrong port number */	break;
	}
}
    2680:	0f 90       	pop	r0
    2682:	0f 90       	pop	r0
    2684:	0f 90       	pop	r0
    2686:	0f 90       	pop	r0
    2688:	cf 91       	pop	r28
    268a:	df 91       	pop	r29
    268c:	08 95       	ret

0000268e <MDIO_vidSetPortValue>:

void MDIO_vidSetPortValue(u8 cpy_u8PortNumber, u8 cpy_u8PortValue)
{
    268e:	df 93       	push	r29
    2690:	cf 93       	push	r28
    2692:	00 d0       	rcall	.+0      	; 0x2694 <MDIO_vidSetPortValue+0x6>
    2694:	00 d0       	rcall	.+0      	; 0x2696 <MDIO_vidSetPortValue+0x8>
    2696:	cd b7       	in	r28, 0x3d	; 61
    2698:	de b7       	in	r29, 0x3e	; 62
    269a:	89 83       	std	Y+1, r24	; 0x01
    269c:	6a 83       	std	Y+2, r22	; 0x02
	// PORTs registers
	switch (cpy_u8PortNumber)
    269e:	89 81       	ldd	r24, Y+1	; 0x01
    26a0:	28 2f       	mov	r18, r24
    26a2:	30 e0       	ldi	r19, 0x00	; 0
    26a4:	3c 83       	std	Y+4, r19	; 0x04
    26a6:	2b 83       	std	Y+3, r18	; 0x03
    26a8:	8b 81       	ldd	r24, Y+3	; 0x03
    26aa:	9c 81       	ldd	r25, Y+4	; 0x04
    26ac:	82 34       	cpi	r24, 0x42	; 66
    26ae:	91 05       	cpc	r25, r1
    26b0:	d9 f0       	breq	.+54     	; 0x26e8 <MDIO_vidSetPortValue+0x5a>
    26b2:	2b 81       	ldd	r18, Y+3	; 0x03
    26b4:	3c 81       	ldd	r19, Y+4	; 0x04
    26b6:	23 34       	cpi	r18, 0x43	; 67
    26b8:	31 05       	cpc	r19, r1
    26ba:	34 f4       	brge	.+12     	; 0x26c8 <MDIO_vidSetPortValue+0x3a>
    26bc:	8b 81       	ldd	r24, Y+3	; 0x03
    26be:	9c 81       	ldd	r25, Y+4	; 0x04
    26c0:	81 34       	cpi	r24, 0x41	; 65
    26c2:	91 05       	cpc	r25, r1
    26c4:	61 f0       	breq	.+24     	; 0x26de <MDIO_vidSetPortValue+0x50>
    26c6:	1e c0       	rjmp	.+60     	; 0x2704 <MDIO_vidSetPortValue+0x76>
    26c8:	2b 81       	ldd	r18, Y+3	; 0x03
    26ca:	3c 81       	ldd	r19, Y+4	; 0x04
    26cc:	23 34       	cpi	r18, 0x43	; 67
    26ce:	31 05       	cpc	r19, r1
    26d0:	81 f0       	breq	.+32     	; 0x26f2 <MDIO_vidSetPortValue+0x64>
    26d2:	8b 81       	ldd	r24, Y+3	; 0x03
    26d4:	9c 81       	ldd	r25, Y+4	; 0x04
    26d6:	84 34       	cpi	r24, 0x44	; 68
    26d8:	91 05       	cpc	r25, r1
    26da:	81 f0       	breq	.+32     	; 0x26fc <MDIO_vidSetPortValue+0x6e>
    26dc:	13 c0       	rjmp	.+38     	; 0x2704 <MDIO_vidSetPortValue+0x76>
	{
	case 	PORT_A:	PORTA = cpy_u8PortValue;	break;
    26de:	eb e3       	ldi	r30, 0x3B	; 59
    26e0:	f0 e0       	ldi	r31, 0x00	; 0
    26e2:	8a 81       	ldd	r24, Y+2	; 0x02
    26e4:	80 83       	st	Z, r24
    26e6:	0e c0       	rjmp	.+28     	; 0x2704 <MDIO_vidSetPortValue+0x76>
	case	PORT_B:	PORTB = cpy_u8PortValue;	break;
    26e8:	e8 e3       	ldi	r30, 0x38	; 56
    26ea:	f0 e0       	ldi	r31, 0x00	; 0
    26ec:	8a 81       	ldd	r24, Y+2	; 0x02
    26ee:	80 83       	st	Z, r24
    26f0:	09 c0       	rjmp	.+18     	; 0x2704 <MDIO_vidSetPortValue+0x76>
	case	PORT_C:	PORTC = cpy_u8PortValue;	break;
    26f2:	e5 e3       	ldi	r30, 0x35	; 53
    26f4:	f0 e0       	ldi	r31, 0x00	; 0
    26f6:	8a 81       	ldd	r24, Y+2	; 0x02
    26f8:	80 83       	st	Z, r24
    26fa:	04 c0       	rjmp	.+8      	; 0x2704 <MDIO_vidSetPortValue+0x76>
	case	PORT_D:	PORTD = cpy_u8PortValue;	break;
    26fc:	e2 e3       	ldi	r30, 0x32	; 50
    26fe:	f0 e0       	ldi	r31, 0x00	; 0
    2700:	8a 81       	ldd	r24, Y+2	; 0x02
    2702:	80 83       	st	Z, r24
	default:	/* wrong port number */	break;
	}
}
    2704:	0f 90       	pop	r0
    2706:	0f 90       	pop	r0
    2708:	0f 90       	pop	r0
    270a:	0f 90       	pop	r0
    270c:	cf 91       	pop	r28
    270e:	df 91       	pop	r29
    2710:	08 95       	ret

00002712 <MDIO_vidGetPortValue>:

void MDIO_vidGetPortValue(u8 cpy_u8PortNumber, u8* buf_u8PortValue)
{
    2712:	df 93       	push	r29
    2714:	cf 93       	push	r28
    2716:	00 d0       	rcall	.+0      	; 0x2718 <MDIO_vidGetPortValue+0x6>
    2718:	00 d0       	rcall	.+0      	; 0x271a <MDIO_vidGetPortValue+0x8>
    271a:	0f 92       	push	r0
    271c:	cd b7       	in	r28, 0x3d	; 61
    271e:	de b7       	in	r29, 0x3e	; 62
    2720:	89 83       	std	Y+1, r24	; 0x01
    2722:	7b 83       	std	Y+3, r23	; 0x03
    2724:	6a 83       	std	Y+2, r22	; 0x02
	// PINs registers
	switch (cpy_u8PortNumber)
    2726:	89 81       	ldd	r24, Y+1	; 0x01
    2728:	28 2f       	mov	r18, r24
    272a:	30 e0       	ldi	r19, 0x00	; 0
    272c:	3d 83       	std	Y+5, r19	; 0x05
    272e:	2c 83       	std	Y+4, r18	; 0x04
    2730:	8c 81       	ldd	r24, Y+4	; 0x04
    2732:	9d 81       	ldd	r25, Y+5	; 0x05
    2734:	82 34       	cpi	r24, 0x42	; 66
    2736:	91 05       	cpc	r25, r1
    2738:	e9 f0       	breq	.+58     	; 0x2774 <MDIO_vidGetPortValue+0x62>
    273a:	2c 81       	ldd	r18, Y+4	; 0x04
    273c:	3d 81       	ldd	r19, Y+5	; 0x05
    273e:	23 34       	cpi	r18, 0x43	; 67
    2740:	31 05       	cpc	r19, r1
    2742:	34 f4       	brge	.+12     	; 0x2750 <MDIO_vidGetPortValue+0x3e>
    2744:	8c 81       	ldd	r24, Y+4	; 0x04
    2746:	9d 81       	ldd	r25, Y+5	; 0x05
    2748:	81 34       	cpi	r24, 0x41	; 65
    274a:	91 05       	cpc	r25, r1
    274c:	61 f0       	breq	.+24     	; 0x2766 <MDIO_vidGetPortValue+0x54>
    274e:	26 c0       	rjmp	.+76     	; 0x279c <MDIO_vidGetPortValue+0x8a>
    2750:	2c 81       	ldd	r18, Y+4	; 0x04
    2752:	3d 81       	ldd	r19, Y+5	; 0x05
    2754:	23 34       	cpi	r18, 0x43	; 67
    2756:	31 05       	cpc	r19, r1
    2758:	a1 f0       	breq	.+40     	; 0x2782 <MDIO_vidGetPortValue+0x70>
    275a:	8c 81       	ldd	r24, Y+4	; 0x04
    275c:	9d 81       	ldd	r25, Y+5	; 0x05
    275e:	84 34       	cpi	r24, 0x44	; 68
    2760:	91 05       	cpc	r25, r1
    2762:	b1 f0       	breq	.+44     	; 0x2790 <MDIO_vidGetPortValue+0x7e>
    2764:	1b c0       	rjmp	.+54     	; 0x279c <MDIO_vidGetPortValue+0x8a>
	{
	case 	PORT_A:	*buf_u8PortValue = PINA;	break;
    2766:	e9 e3       	ldi	r30, 0x39	; 57
    2768:	f0 e0       	ldi	r31, 0x00	; 0
    276a:	80 81       	ld	r24, Z
    276c:	ea 81       	ldd	r30, Y+2	; 0x02
    276e:	fb 81       	ldd	r31, Y+3	; 0x03
    2770:	80 83       	st	Z, r24
    2772:	14 c0       	rjmp	.+40     	; 0x279c <MDIO_vidGetPortValue+0x8a>
	case	PORT_B:	*buf_u8PortValue = PINB;	break;
    2774:	e6 e3       	ldi	r30, 0x36	; 54
    2776:	f0 e0       	ldi	r31, 0x00	; 0
    2778:	80 81       	ld	r24, Z
    277a:	ea 81       	ldd	r30, Y+2	; 0x02
    277c:	fb 81       	ldd	r31, Y+3	; 0x03
    277e:	80 83       	st	Z, r24
    2780:	0d c0       	rjmp	.+26     	; 0x279c <MDIO_vidGetPortValue+0x8a>
	case	PORT_C:	*buf_u8PortValue = PINC;	break;
    2782:	e3 e3       	ldi	r30, 0x33	; 51
    2784:	f0 e0       	ldi	r31, 0x00	; 0
    2786:	80 81       	ld	r24, Z
    2788:	ea 81       	ldd	r30, Y+2	; 0x02
    278a:	fb 81       	ldd	r31, Y+3	; 0x03
    278c:	80 83       	st	Z, r24
    278e:	06 c0       	rjmp	.+12     	; 0x279c <MDIO_vidGetPortValue+0x8a>
	case	PORT_D:	*buf_u8PortValue = PIND;	break;
    2790:	e0 e3       	ldi	r30, 0x30	; 48
    2792:	f0 e0       	ldi	r31, 0x00	; 0
    2794:	80 81       	ld	r24, Z
    2796:	ea 81       	ldd	r30, Y+2	; 0x02
    2798:	fb 81       	ldd	r31, Y+3	; 0x03
    279a:	80 83       	st	Z, r24
	default:	/* wrong port number */	break;
	}
}
    279c:	0f 90       	pop	r0
    279e:	0f 90       	pop	r0
    27a0:	0f 90       	pop	r0
    27a2:	0f 90       	pop	r0
    27a4:	0f 90       	pop	r0
    27a6:	cf 91       	pop	r28
    27a8:	df 91       	pop	r29
    27aa:	08 95       	ret

000027ac <Welcome>:
u8 global_u8Choose;
u8 global_u8ChooseFlag;


void Welcome()
{
    27ac:	df 93       	push	r29
    27ae:	cf 93       	push	r28
    27b0:	cd b7       	in	r28, 0x3d	; 61
    27b2:	de b7       	in	r29, 0x3e	; 62
    27b4:	6c 97       	sbiw	r28, 0x1c	; 28
    27b6:	0f b6       	in	r0, 0x3f	; 63
    27b8:	f8 94       	cli
    27ba:	de bf       	out	0x3e, r29	; 62
    27bc:	0f be       	out	0x3f, r0	; 63
    27be:	cd bf       	out	0x3d, r28	; 61
	LCD_voidGoTo(1 , 5);
    27c0:	81 e0       	ldi	r24, 0x01	; 1
    27c2:	65 e0       	ldi	r22, 0x05	; 5
    27c4:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <LCD_voidGoTo>
	LCD_voidWriteString("WELCOME!");
    27c8:	80 e6       	ldi	r24, 0x60	; 96
    27ca:	90 e0       	ldi	r25, 0x00	; 0
    27cc:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <LCD_voidWriteString>
    27d0:	80 e0       	ldi	r24, 0x00	; 0
    27d2:	90 e0       	ldi	r25, 0x00	; 0
    27d4:	aa e7       	ldi	r26, 0x7A	; 122
    27d6:	b4 e4       	ldi	r27, 0x44	; 68
    27d8:	89 8f       	std	Y+25, r24	; 0x19
    27da:	9a 8f       	std	Y+26, r25	; 0x1a
    27dc:	ab 8f       	std	Y+27, r26	; 0x1b
    27de:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27e0:	69 8d       	ldd	r22, Y+25	; 0x19
    27e2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27e8:	20 e0       	ldi	r18, 0x00	; 0
    27ea:	30 e0       	ldi	r19, 0x00	; 0
    27ec:	4a ef       	ldi	r20, 0xFA	; 250
    27ee:	54 e4       	ldi	r21, 0x44	; 68
    27f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27f4:	dc 01       	movw	r26, r24
    27f6:	cb 01       	movw	r24, r22
    27f8:	8d 8b       	std	Y+21, r24	; 0x15
    27fa:	9e 8b       	std	Y+22, r25	; 0x16
    27fc:	af 8b       	std	Y+23, r26	; 0x17
    27fe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2800:	6d 89       	ldd	r22, Y+21	; 0x15
    2802:	7e 89       	ldd	r23, Y+22	; 0x16
    2804:	8f 89       	ldd	r24, Y+23	; 0x17
    2806:	98 8d       	ldd	r25, Y+24	; 0x18
    2808:	20 e0       	ldi	r18, 0x00	; 0
    280a:	30 e0       	ldi	r19, 0x00	; 0
    280c:	40 e8       	ldi	r20, 0x80	; 128
    280e:	5f e3       	ldi	r21, 0x3F	; 63
    2810:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2814:	88 23       	and	r24, r24
    2816:	2c f4       	brge	.+10     	; 0x2822 <Welcome+0x76>
		__ticks = 1;
    2818:	81 e0       	ldi	r24, 0x01	; 1
    281a:	90 e0       	ldi	r25, 0x00	; 0
    281c:	9c 8b       	std	Y+20, r25	; 0x14
    281e:	8b 8b       	std	Y+19, r24	; 0x13
    2820:	3f c0       	rjmp	.+126    	; 0x28a0 <Welcome+0xf4>
	else if (__tmp > 65535)
    2822:	6d 89       	ldd	r22, Y+21	; 0x15
    2824:	7e 89       	ldd	r23, Y+22	; 0x16
    2826:	8f 89       	ldd	r24, Y+23	; 0x17
    2828:	98 8d       	ldd	r25, Y+24	; 0x18
    282a:	20 e0       	ldi	r18, 0x00	; 0
    282c:	3f ef       	ldi	r19, 0xFF	; 255
    282e:	4f e7       	ldi	r20, 0x7F	; 127
    2830:	57 e4       	ldi	r21, 0x47	; 71
    2832:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2836:	18 16       	cp	r1, r24
    2838:	4c f5       	brge	.+82     	; 0x288c <Welcome+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    283a:	69 8d       	ldd	r22, Y+25	; 0x19
    283c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    283e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2840:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2842:	20 e0       	ldi	r18, 0x00	; 0
    2844:	30 e0       	ldi	r19, 0x00	; 0
    2846:	40 e2       	ldi	r20, 0x20	; 32
    2848:	51 e4       	ldi	r21, 0x41	; 65
    284a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    284e:	dc 01       	movw	r26, r24
    2850:	cb 01       	movw	r24, r22
    2852:	bc 01       	movw	r22, r24
    2854:	cd 01       	movw	r24, r26
    2856:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    285a:	dc 01       	movw	r26, r24
    285c:	cb 01       	movw	r24, r22
    285e:	9c 8b       	std	Y+20, r25	; 0x14
    2860:	8b 8b       	std	Y+19, r24	; 0x13
    2862:	0f c0       	rjmp	.+30     	; 0x2882 <Welcome+0xd6>
    2864:	88 ec       	ldi	r24, 0xC8	; 200
    2866:	90 e0       	ldi	r25, 0x00	; 0
    2868:	9a 8b       	std	Y+18, r25	; 0x12
    286a:	89 8b       	std	Y+17, r24	; 0x11
    286c:	89 89       	ldd	r24, Y+17	; 0x11
    286e:	9a 89       	ldd	r25, Y+18	; 0x12
    2870:	01 97       	sbiw	r24, 0x01	; 1
    2872:	f1 f7       	brne	.-4      	; 0x2870 <Welcome+0xc4>
    2874:	9a 8b       	std	Y+18, r25	; 0x12
    2876:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2878:	8b 89       	ldd	r24, Y+19	; 0x13
    287a:	9c 89       	ldd	r25, Y+20	; 0x14
    287c:	01 97       	sbiw	r24, 0x01	; 1
    287e:	9c 8b       	std	Y+20, r25	; 0x14
    2880:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2882:	8b 89       	ldd	r24, Y+19	; 0x13
    2884:	9c 89       	ldd	r25, Y+20	; 0x14
    2886:	00 97       	sbiw	r24, 0x00	; 0
    2888:	69 f7       	brne	.-38     	; 0x2864 <Welcome+0xb8>
    288a:	14 c0       	rjmp	.+40     	; 0x28b4 <Welcome+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    288c:	6d 89       	ldd	r22, Y+21	; 0x15
    288e:	7e 89       	ldd	r23, Y+22	; 0x16
    2890:	8f 89       	ldd	r24, Y+23	; 0x17
    2892:	98 8d       	ldd	r25, Y+24	; 0x18
    2894:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2898:	dc 01       	movw	r26, r24
    289a:	cb 01       	movw	r24, r22
    289c:	9c 8b       	std	Y+20, r25	; 0x14
    289e:	8b 8b       	std	Y+19, r24	; 0x13
    28a0:	8b 89       	ldd	r24, Y+19	; 0x13
    28a2:	9c 89       	ldd	r25, Y+20	; 0x14
    28a4:	98 8b       	std	Y+16, r25	; 0x10
    28a6:	8f 87       	std	Y+15, r24	; 0x0f
    28a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    28aa:	98 89       	ldd	r25, Y+16	; 0x10
    28ac:	01 97       	sbiw	r24, 0x01	; 1
    28ae:	f1 f7       	brne	.-4      	; 0x28ac <Welcome+0x100>
    28b0:	98 8b       	std	Y+16, r25	; 0x10
    28b2:	8f 87       	std	Y+15, r24	; 0x0f

	// Clear the text letter after letter
	_delay_ms(1000); // Wait for 2 seconds
	LCD_voidSendCommand(lcd_Clear);
    28b4:	81 e0       	ldi	r24, 0x01	; 1
    28b6:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <LCD_voidSendCommand>

	// Display "TEMPERATURE CONTROL SYSTEM" all text at the same time

	LCD_voidGoTo(1 , 3);   /* Move to second line */
    28ba:	81 e0       	ldi	r24, 0x01	; 1
    28bc:	63 e0       	ldi	r22, 0x03	; 3
    28be:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <LCD_voidGoTo>
	LCD_voidWriteString("TEMPERATURE");
    28c2:	89 e6       	ldi	r24, 0x69	; 105
    28c4:	90 e0       	ldi	r25, 0x00	; 0
    28c6:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <LCD_voidWriteString>
	LCD_voidGoTo(2 , 2);
    28ca:	82 e0       	ldi	r24, 0x02	; 2
    28cc:	62 e0       	ldi	r22, 0x02	; 2
    28ce:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <LCD_voidGoTo>
	LCD_voidWriteString("CONTROL SYSTEM");
    28d2:	85 e7       	ldi	r24, 0x75	; 117
    28d4:	90 e0       	ldi	r25, 0x00	; 0
    28d6:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <LCD_voidWriteString>
    28da:	80 e0       	ldi	r24, 0x00	; 0
    28dc:	90 e0       	ldi	r25, 0x00	; 0
    28de:	aa e7       	ldi	r26, 0x7A	; 122
    28e0:	b4 e4       	ldi	r27, 0x44	; 68
    28e2:	8b 87       	std	Y+11, r24	; 0x0b
    28e4:	9c 87       	std	Y+12, r25	; 0x0c
    28e6:	ad 87       	std	Y+13, r26	; 0x0d
    28e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    28ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    28ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    28f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    28f2:	20 e0       	ldi	r18, 0x00	; 0
    28f4:	30 e0       	ldi	r19, 0x00	; 0
    28f6:	4a ef       	ldi	r20, 0xFA	; 250
    28f8:	54 e4       	ldi	r21, 0x44	; 68
    28fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28fe:	dc 01       	movw	r26, r24
    2900:	cb 01       	movw	r24, r22
    2902:	8f 83       	std	Y+7, r24	; 0x07
    2904:	98 87       	std	Y+8, r25	; 0x08
    2906:	a9 87       	std	Y+9, r26	; 0x09
    2908:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    290a:	6f 81       	ldd	r22, Y+7	; 0x07
    290c:	78 85       	ldd	r23, Y+8	; 0x08
    290e:	89 85       	ldd	r24, Y+9	; 0x09
    2910:	9a 85       	ldd	r25, Y+10	; 0x0a
    2912:	20 e0       	ldi	r18, 0x00	; 0
    2914:	30 e0       	ldi	r19, 0x00	; 0
    2916:	40 e8       	ldi	r20, 0x80	; 128
    2918:	5f e3       	ldi	r21, 0x3F	; 63
    291a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    291e:	88 23       	and	r24, r24
    2920:	2c f4       	brge	.+10     	; 0x292c <Welcome+0x180>
		__ticks = 1;
    2922:	81 e0       	ldi	r24, 0x01	; 1
    2924:	90 e0       	ldi	r25, 0x00	; 0
    2926:	9e 83       	std	Y+6, r25	; 0x06
    2928:	8d 83       	std	Y+5, r24	; 0x05
    292a:	3f c0       	rjmp	.+126    	; 0x29aa <Welcome+0x1fe>
	else if (__tmp > 65535)
    292c:	6f 81       	ldd	r22, Y+7	; 0x07
    292e:	78 85       	ldd	r23, Y+8	; 0x08
    2930:	89 85       	ldd	r24, Y+9	; 0x09
    2932:	9a 85       	ldd	r25, Y+10	; 0x0a
    2934:	20 e0       	ldi	r18, 0x00	; 0
    2936:	3f ef       	ldi	r19, 0xFF	; 255
    2938:	4f e7       	ldi	r20, 0x7F	; 127
    293a:	57 e4       	ldi	r21, 0x47	; 71
    293c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2940:	18 16       	cp	r1, r24
    2942:	4c f5       	brge	.+82     	; 0x2996 <Welcome+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2944:	6b 85       	ldd	r22, Y+11	; 0x0b
    2946:	7c 85       	ldd	r23, Y+12	; 0x0c
    2948:	8d 85       	ldd	r24, Y+13	; 0x0d
    294a:	9e 85       	ldd	r25, Y+14	; 0x0e
    294c:	20 e0       	ldi	r18, 0x00	; 0
    294e:	30 e0       	ldi	r19, 0x00	; 0
    2950:	40 e2       	ldi	r20, 0x20	; 32
    2952:	51 e4       	ldi	r21, 0x41	; 65
    2954:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2958:	dc 01       	movw	r26, r24
    295a:	cb 01       	movw	r24, r22
    295c:	bc 01       	movw	r22, r24
    295e:	cd 01       	movw	r24, r26
    2960:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2964:	dc 01       	movw	r26, r24
    2966:	cb 01       	movw	r24, r22
    2968:	9e 83       	std	Y+6, r25	; 0x06
    296a:	8d 83       	std	Y+5, r24	; 0x05
    296c:	0f c0       	rjmp	.+30     	; 0x298c <Welcome+0x1e0>
    296e:	88 ec       	ldi	r24, 0xC8	; 200
    2970:	90 e0       	ldi	r25, 0x00	; 0
    2972:	9c 83       	std	Y+4, r25	; 0x04
    2974:	8b 83       	std	Y+3, r24	; 0x03
    2976:	8b 81       	ldd	r24, Y+3	; 0x03
    2978:	9c 81       	ldd	r25, Y+4	; 0x04
    297a:	01 97       	sbiw	r24, 0x01	; 1
    297c:	f1 f7       	brne	.-4      	; 0x297a <Welcome+0x1ce>
    297e:	9c 83       	std	Y+4, r25	; 0x04
    2980:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2982:	8d 81       	ldd	r24, Y+5	; 0x05
    2984:	9e 81       	ldd	r25, Y+6	; 0x06
    2986:	01 97       	sbiw	r24, 0x01	; 1
    2988:	9e 83       	std	Y+6, r25	; 0x06
    298a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    298c:	8d 81       	ldd	r24, Y+5	; 0x05
    298e:	9e 81       	ldd	r25, Y+6	; 0x06
    2990:	00 97       	sbiw	r24, 0x00	; 0
    2992:	69 f7       	brne	.-38     	; 0x296e <Welcome+0x1c2>
    2994:	14 c0       	rjmp	.+40     	; 0x29be <Welcome+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2996:	6f 81       	ldd	r22, Y+7	; 0x07
    2998:	78 85       	ldd	r23, Y+8	; 0x08
    299a:	89 85       	ldd	r24, Y+9	; 0x09
    299c:	9a 85       	ldd	r25, Y+10	; 0x0a
    299e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29a2:	dc 01       	movw	r26, r24
    29a4:	cb 01       	movw	r24, r22
    29a6:	9e 83       	std	Y+6, r25	; 0x06
    29a8:	8d 83       	std	Y+5, r24	; 0x05
    29aa:	8d 81       	ldd	r24, Y+5	; 0x05
    29ac:	9e 81       	ldd	r25, Y+6	; 0x06
    29ae:	9a 83       	std	Y+2, r25	; 0x02
    29b0:	89 83       	std	Y+1, r24	; 0x01
    29b2:	89 81       	ldd	r24, Y+1	; 0x01
    29b4:	9a 81       	ldd	r25, Y+2	; 0x02
    29b6:	01 97       	sbiw	r24, 0x01	; 1
    29b8:	f1 f7       	brne	.-4      	; 0x29b6 <Welcome+0x20a>
    29ba:	9a 83       	std	Y+2, r25	; 0x02
    29bc:	89 83       	std	Y+1, r24	; 0x01
	// Clear all text
	_delay_ms(1000); // Wait for 2 seconds
	LCD_voidWriteString(lcd_Clear);
    29be:	81 e0       	ldi	r24, 0x01	; 1
    29c0:	90 e0       	ldi	r25, 0x00	; 0
    29c2:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <LCD_voidWriteString>
}
    29c6:	6c 96       	adiw	r28, 0x1c	; 28
    29c8:	0f b6       	in	r0, 0x3f	; 63
    29ca:	f8 94       	cli
    29cc:	de bf       	out	0x3e, r29	; 62
    29ce:	0f be       	out	0x3f, r0	; 63
    29d0:	cd bf       	out	0x3d, r28	; 61
    29d2:	cf 91       	pop	r28
    29d4:	df 91       	pop	r29
    29d6:	08 95       	ret

000029d8 <ReceiveOperation>:

//#define OFFSET         (u8)1


void ReceiveOperation(u8 Operation)
{
    29d8:	df 93       	push	r29
    29da:	cf 93       	push	r28
    29dc:	0f 92       	push	r0
    29de:	cd b7       	in	r28, 0x3d	; 61
    29e0:	de b7       	in	r29, 0x3e	; 62
    29e2:	89 83       	std	Y+1, r24	; 0x01
	MDIO_vidSetPinDirection(PORT_A,3,OUTPUT);
    29e4:	81 e4       	ldi	r24, 0x41	; 65
    29e6:	63 e0       	ldi	r22, 0x03	; 3
    29e8:	41 e0       	ldi	r20, 0x01	; 1
    29ea:	0e 94 6d 10 	call	0x20da	; 0x20da <MDIO_vidSetPinDirection>
	MDIO_vidSetPinDirection(PORT_A,4,OUTPUT);
    29ee:	81 e4       	ldi	r24, 0x41	; 65
    29f0:	64 e0       	ldi	r22, 0x04	; 4
    29f2:	41 e0       	ldi	r20, 0x01	; 1
    29f4:	0e 94 6d 10 	call	0x20da	; 0x20da <MDIO_vidSetPinDirection>
	MDIO_vidSetPinDirection(PORT_A,5,OUTPUT);
    29f8:	81 e4       	ldi	r24, 0x41	; 65
    29fa:	65 e0       	ldi	r22, 0x05	; 5
    29fc:	41 e0       	ldi	r20, 0x01	; 1
    29fe:	0e 94 6d 10 	call	0x20da	; 0x20da <MDIO_vidSetPinDirection>
//	LCD_voidSendCommand(lcd_Clear);
//	LCD_voidWriteString(lcd_Clear);

	if(Operation == HEATING)
    2a02:	89 81       	ldd	r24, Y+1	; 0x01
    2a04:	88 23       	and	r24, r24
    2a06:	c1 f4       	brne	.+48     	; 0x2a38 <ReceiveOperation+0x60>
	{
		MDIO_vidSetPinValue(PORT_A,5,LOW);
    2a08:	81 e4       	ldi	r24, 0x41	; 65
    2a0a:	65 e0       	ldi	r22, 0x05	; 5
    2a0c:	40 e0       	ldi	r20, 0x00	; 0
    2a0e:	0e 94 77 11 	call	0x22ee	; 0x22ee <MDIO_vidSetPinValue>
		MDIO_vidSetPinValue(PORT_A,4,LOW);
    2a12:	81 e4       	ldi	r24, 0x41	; 65
    2a14:	64 e0       	ldi	r22, 0x04	; 4
    2a16:	40 e0       	ldi	r20, 0x00	; 0
    2a18:	0e 94 77 11 	call	0x22ee	; 0x22ee <MDIO_vidSetPinValue>
		MDIO_vidSetPinValue(PORT_A,3,HIGH);
    2a1c:	81 e4       	ldi	r24, 0x41	; 65
    2a1e:	63 e0       	ldi	r22, 0x03	; 3
    2a20:	41 e0       	ldi	r20, 0x01	; 1
    2a22:	0e 94 77 11 	call	0x22ee	; 0x22ee <MDIO_vidSetPinValue>
//		TOG_BIT(PORTA,3);
//		LCD_voidWriteString(lcd_Clear);
		LCD_voidGoTo(2 , 5);
    2a26:	82 e0       	ldi	r24, 0x02	; 2
    2a28:	65 e0       	ldi	r22, 0x05	; 5
    2a2a:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <LCD_voidGoTo>
     	LCD_voidWriteString("HEATING");
    2a2e:	84 e8       	ldi	r24, 0x84	; 132
    2a30:	90 e0       	ldi	r25, 0x00	; 0
    2a32:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <LCD_voidWriteString>
    2a36:	35 c0       	rjmp	.+106    	; 0x2aa2 <ReceiveOperation+0xca>
		//_delay_ms(500);
	}
	else if(Operation == COOLING)
    2a38:	89 81       	ldd	r24, Y+1	; 0x01
    2a3a:	81 30       	cpi	r24, 0x01	; 1
    2a3c:	c1 f4       	brne	.+48     	; 0x2a6e <ReceiveOperation+0x96>
	{
		MDIO_vidSetPinValue(PORT_A,5,LOW);
    2a3e:	81 e4       	ldi	r24, 0x41	; 65
    2a40:	65 e0       	ldi	r22, 0x05	; 5
    2a42:	40 e0       	ldi	r20, 0x00	; 0
    2a44:	0e 94 77 11 	call	0x22ee	; 0x22ee <MDIO_vidSetPinValue>
		MDIO_vidSetPinValue(PORT_A,3,LOW);
    2a48:	81 e4       	ldi	r24, 0x41	; 65
    2a4a:	63 e0       	ldi	r22, 0x03	; 3
    2a4c:	40 e0       	ldi	r20, 0x00	; 0
    2a4e:	0e 94 77 11 	call	0x22ee	; 0x22ee <MDIO_vidSetPinValue>
		MDIO_vidSetPinValue(PORT_A,4,HIGH);
    2a52:	81 e4       	ldi	r24, 0x41	; 65
    2a54:	64 e0       	ldi	r22, 0x04	; 4
    2a56:	41 e0       	ldi	r20, 0x01	; 1
    2a58:	0e 94 77 11 	call	0x22ee	; 0x22ee <MDIO_vidSetPinValue>
		//TOG_BIT(PORTA,4);
		LCD_voidGoTo(2 , 5);
    2a5c:	82 e0       	ldi	r24, 0x02	; 2
    2a5e:	65 e0       	ldi	r22, 0x05	; 5
    2a60:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <LCD_voidGoTo>
		LCD_voidWriteString("COOLING");
    2a64:	8c e8       	ldi	r24, 0x8C	; 140
    2a66:	90 e0       	ldi	r25, 0x00	; 0
    2a68:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <LCD_voidWriteString>
    2a6c:	1a c0       	rjmp	.+52     	; 0x2aa2 <ReceiveOperation+0xca>
		//_delay_ms(500);
	}
	else if(Operation == NoOperation)
    2a6e:	89 81       	ldd	r24, Y+1	; 0x01
    2a70:	82 30       	cpi	r24, 0x02	; 2
    2a72:	b9 f4       	brne	.+46     	; 0x2aa2 <ReceiveOperation+0xca>
	{
		MDIO_vidSetPinValue(PORT_A,3,LOW);
    2a74:	81 e4       	ldi	r24, 0x41	; 65
    2a76:	63 e0       	ldi	r22, 0x03	; 3
    2a78:	40 e0       	ldi	r20, 0x00	; 0
    2a7a:	0e 94 77 11 	call	0x22ee	; 0x22ee <MDIO_vidSetPinValue>
		MDIO_vidSetPinValue(PORT_A,4,LOW);
    2a7e:	81 e4       	ldi	r24, 0x41	; 65
    2a80:	64 e0       	ldi	r22, 0x04	; 4
    2a82:	40 e0       	ldi	r20, 0x00	; 0
    2a84:	0e 94 77 11 	call	0x22ee	; 0x22ee <MDIO_vidSetPinValue>
		MDIO_vidSetPinValue(PORT_A,5,HIGH);
    2a88:	81 e4       	ldi	r24, 0x41	; 65
    2a8a:	65 e0       	ldi	r22, 0x05	; 5
    2a8c:	41 e0       	ldi	r20, 0x01	; 1
    2a8e:	0e 94 77 11 	call	0x22ee	; 0x22ee <MDIO_vidSetPinValue>
		//TOG_BIT(PORTA,5);
		//LCD_voidWriteString(lcd_Clear);
		LCD_voidGoTo(2 , 3);
    2a92:	82 e0       	ldi	r24, 0x02	; 2
    2a94:	63 e0       	ldi	r22, 0x03	; 3
    2a96:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <LCD_voidGoTo>
		LCD_voidWriteString("NO Operation");
    2a9a:	84 e9       	ldi	r24, 0x94	; 148
    2a9c:	90 e0       	ldi	r25, 0x00	; 0
    2a9e:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <LCD_voidWriteString>
		//_delay_ms(500);
	}
}
    2aa2:	0f 90       	pop	r0
    2aa4:	cf 91       	pop	r28
    2aa6:	df 91       	pop	r29
    2aa8:	08 95       	ret

00002aaa <SendReceiveData>:

void SendReceiveData(u8 CurrentTemp,u8 DesiredTemp)
{
    2aaa:	df 93       	push	r29
    2aac:	cf 93       	push	r28
    2aae:	00 d0       	rcall	.+0      	; 0x2ab0 <SendReceiveData+0x6>
    2ab0:	0f 92       	push	r0
    2ab2:	cd b7       	in	r28, 0x3d	; 61
    2ab4:	de b7       	in	r29, 0x3e	; 62
    2ab6:	8a 83       	std	Y+2, r24	; 0x02
    2ab8:	6b 83       	std	Y+3, r22	; 0x03
	u8 Operation;

	if(global_u8Choose !='2')
    2aba:	80 91 25 02 	lds	r24, 0x0225
    2abe:	82 33       	cpi	r24, 0x32	; 50
    2ac0:	19 f0       	breq	.+6      	; 0x2ac8 <SendReceiveData+0x1e>
	UART_VidSendData(DesiredTemp);
    2ac2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ac4:	0e 94 18 10 	call	0x2030	; 0x2030 <UART_VidSendData>
	//_delay_ms(100);

	UART_VidSendData(CurrentTemp);
    2ac8:	8a 81       	ldd	r24, Y+2	; 0x02
    2aca:	0e 94 18 10 	call	0x2030	; 0x2030 <UART_VidSendData>
	//_delay_ms(100);

	Operation=UART_VidReceiveData();
    2ace:	0e 94 32 10 	call	0x2064	; 0x2064 <UART_VidReceiveData>
    2ad2:	89 83       	std	Y+1, r24	; 0x01
	//_delay_ms(100);

	LCD_voidSendCommand(lcd_Clear);
    2ad4:	81 e0       	ldi	r24, 0x01	; 1
    2ad6:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <LCD_voidSendCommand>
	LCD_voidGoTo(1 , 4);
    2ada:	81 e0       	ldi	r24, 0x01	; 1
    2adc:	64 e0       	ldi	r22, 0x04	; 4
    2ade:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <LCD_voidGoTo>
	LCD_voidPrintInt(CurrentTemp);
    2ae2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ae4:	88 2f       	mov	r24, r24
    2ae6:	90 e0       	ldi	r25, 0x00	; 0
    2ae8:	a0 e0       	ldi	r26, 0x00	; 0
    2aea:	b0 e0       	ldi	r27, 0x00	; 0
    2aec:	bc 01       	movw	r22, r24
    2aee:	cd 01       	movw	r24, r26
    2af0:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <LCD_voidPrintInt>
	LCD_voidWriteString(" --> ");
    2af4:	81 ea       	ldi	r24, 0xA1	; 161
    2af6:	90 e0       	ldi	r25, 0x00	; 0
    2af8:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <LCD_voidWriteString>
	LCD_voidPrintInt(DesiredTemp);
    2afc:	8b 81       	ldd	r24, Y+3	; 0x03
    2afe:	88 2f       	mov	r24, r24
    2b00:	90 e0       	ldi	r25, 0x00	; 0
    2b02:	a0 e0       	ldi	r26, 0x00	; 0
    2b04:	b0 e0       	ldi	r27, 0x00	; 0
    2b06:	bc 01       	movw	r22, r24
    2b08:	cd 01       	movw	r24, r26
    2b0a:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <LCD_voidPrintInt>

	ReceiveOperation(Operation);
    2b0e:	89 81       	ldd	r24, Y+1	; 0x01
    2b10:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <ReceiveOperation>
}
    2b14:	0f 90       	pop	r0
    2b16:	0f 90       	pop	r0
    2b18:	0f 90       	pop	r0
    2b1a:	cf 91       	pop	r28
    2b1c:	df 91       	pop	r29
    2b1e:	08 95       	ret

00002b20 <GETDesiredTemp>:




void GETDesiredTemp(u8 CurrentTemp)
{
    2b20:	df 93       	push	r29
    2b22:	cf 93       	push	r28
    2b24:	cd b7       	in	r28, 0x3d	; 61
    2b26:	de b7       	in	r29, 0x3e	; 62
    2b28:	e9 97       	sbiw	r28, 0x39	; 57
    2b2a:	0f b6       	in	r0, 0x3f	; 63
    2b2c:	f8 94       	cli
    2b2e:	de bf       	out	0x3e, r29	; 62
    2b30:	0f be       	out	0x3f, r0	; 63
    2b32:	cd bf       	out	0x3d, r28	; 61
    2b34:	89 af       	std	Y+57, r24	; 0x39
	/* Clear screen at the start of every operation */
			LCD_voidSendCommand(lcd_Clear);
    2b36:	81 e0       	ldi	r24, 0x01	; 1
    2b38:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <LCD_voidSendCommand>

			LCD_voidWriteString("Current Temp:");
    2b3c:	87 ea       	ldi	r24, 0xA7	; 167
    2b3e:	90 e0       	ldi	r25, 0x00	; 0
    2b40:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <LCD_voidWriteString>
			LCD_voidPrintInt(CurrentTemp);
    2b44:	89 ad       	ldd	r24, Y+57	; 0x39
    2b46:	88 2f       	mov	r24, r24
    2b48:	90 e0       	ldi	r25, 0x00	; 0
    2b4a:	a0 e0       	ldi	r26, 0x00	; 0
    2b4c:	b0 e0       	ldi	r27, 0x00	; 0
    2b4e:	bc 01       	movw	r22, r24
    2b50:	cd 01       	movw	r24, r26
    2b52:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <LCD_voidPrintInt>

			LCD_voidSendCommand(0xC0);
    2b56:	80 ec       	ldi	r24, 0xC0	; 192
    2b58:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <LCD_voidSendCommand>
			LCD_voidWriteString("1.New 2.Old ");
    2b5c:	85 eb       	ldi	r24, 0xB5	; 181
    2b5e:	90 e0       	ldi	r25, 0x00	; 0
    2b60:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <LCD_voidWriteString>
    2b64:	04 c0       	rjmp	.+8      	; 0x2b6e <GETDesiredTemp+0x4e>

			while (global_u8Choose != '1'  && global_u8Choose != '2' )
			{
				global_u8Choose = KPD_u8GetPressedKey();
    2b66:	0e 94 24 07 	call	0xe48	; 0xe48 <KPD_u8GetPressedKey>
    2b6a:	80 93 25 02 	sts	0x0225, r24
			LCD_voidPrintInt(CurrentTemp);

			LCD_voidSendCommand(0xC0);
			LCD_voidWriteString("1.New 2.Old ");

			while (global_u8Choose != '1'  && global_u8Choose != '2' )
    2b6e:	80 91 25 02 	lds	r24, 0x0225
    2b72:	81 33       	cpi	r24, 0x31	; 49
    2b74:	21 f0       	breq	.+8      	; 0x2b7e <GETDesiredTemp+0x5e>
    2b76:	80 91 25 02 	lds	r24, 0x0225
    2b7a:	82 33       	cpi	r24, 0x32	; 50
    2b7c:	a1 f7       	brne	.-24     	; 0x2b66 <GETDesiredTemp+0x46>
			{
				global_u8Choose = KPD_u8GetPressedKey();

			}

			if((global_u8Choose != '1'  &&  global_u8Choose != '2' ))
    2b7e:	80 91 25 02 	lds	r24, 0x0225
    2b82:	81 33       	cpi	r24, 0x31	; 49
    2b84:	09 f4       	brne	.+2      	; 0x2b88 <GETDesiredTemp+0x68>
    2b86:	8a c0       	rjmp	.+276    	; 0x2c9c <GETDesiredTemp+0x17c>
    2b88:	80 91 25 02 	lds	r24, 0x0225
    2b8c:	82 33       	cpi	r24, 0x32	; 50
    2b8e:	09 f4       	brne	.+2      	; 0x2b92 <GETDesiredTemp+0x72>
    2b90:	85 c0       	rjmp	.+266    	; 0x2c9c <GETDesiredTemp+0x17c>
			{
				//global_u8ChooseFlag=1;
				LCD_voidSendCommand(lcd_Clear);
    2b92:	81 e0       	ldi	r24, 0x01	; 1
    2b94:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <LCD_voidSendCommand>
				LCD_voidWriteString("WRONG INPUT !");
    2b98:	82 ec       	ldi	r24, 0xC2	; 194
    2b9a:	90 e0       	ldi	r25, 0x00	; 0
    2b9c:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <LCD_voidWriteString>
				LCD_voidSendCommand(0xC0);
    2ba0:	80 ec       	ldi	r24, 0xC0	; 192
    2ba2:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <LCD_voidSendCommand>
				LCD_voidWriteString("TRY AGAIN !");
    2ba6:	80 ed       	ldi	r24, 0xD0	; 208
    2ba8:	90 e0       	ldi	r25, 0x00	; 0
    2baa:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <LCD_voidWriteString>
    2bae:	80 e0       	ldi	r24, 0x00	; 0
    2bb0:	90 e0       	ldi	r25, 0x00	; 0
    2bb2:	aa e7       	ldi	r26, 0x7A	; 122
    2bb4:	b4 e4       	ldi	r27, 0x44	; 68
    2bb6:	8d ab       	std	Y+53, r24	; 0x35
    2bb8:	9e ab       	std	Y+54, r25	; 0x36
    2bba:	af ab       	std	Y+55, r26	; 0x37
    2bbc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bbe:	6d a9       	ldd	r22, Y+53	; 0x35
    2bc0:	7e a9       	ldd	r23, Y+54	; 0x36
    2bc2:	8f a9       	ldd	r24, Y+55	; 0x37
    2bc4:	98 ad       	ldd	r25, Y+56	; 0x38
    2bc6:	20 e0       	ldi	r18, 0x00	; 0
    2bc8:	30 e0       	ldi	r19, 0x00	; 0
    2bca:	4a ef       	ldi	r20, 0xFA	; 250
    2bcc:	54 e4       	ldi	r21, 0x44	; 68
    2bce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bd2:	dc 01       	movw	r26, r24
    2bd4:	cb 01       	movw	r24, r22
    2bd6:	89 ab       	std	Y+49, r24	; 0x31
    2bd8:	9a ab       	std	Y+50, r25	; 0x32
    2bda:	ab ab       	std	Y+51, r26	; 0x33
    2bdc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2bde:	69 a9       	ldd	r22, Y+49	; 0x31
    2be0:	7a a9       	ldd	r23, Y+50	; 0x32
    2be2:	8b a9       	ldd	r24, Y+51	; 0x33
    2be4:	9c a9       	ldd	r25, Y+52	; 0x34
    2be6:	20 e0       	ldi	r18, 0x00	; 0
    2be8:	30 e0       	ldi	r19, 0x00	; 0
    2bea:	40 e8       	ldi	r20, 0x80	; 128
    2bec:	5f e3       	ldi	r21, 0x3F	; 63
    2bee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bf2:	88 23       	and	r24, r24
    2bf4:	2c f4       	brge	.+10     	; 0x2c00 <GETDesiredTemp+0xe0>
		__ticks = 1;
    2bf6:	81 e0       	ldi	r24, 0x01	; 1
    2bf8:	90 e0       	ldi	r25, 0x00	; 0
    2bfa:	98 ab       	std	Y+48, r25	; 0x30
    2bfc:	8f a7       	std	Y+47, r24	; 0x2f
    2bfe:	3f c0       	rjmp	.+126    	; 0x2c7e <GETDesiredTemp+0x15e>
	else if (__tmp > 65535)
    2c00:	69 a9       	ldd	r22, Y+49	; 0x31
    2c02:	7a a9       	ldd	r23, Y+50	; 0x32
    2c04:	8b a9       	ldd	r24, Y+51	; 0x33
    2c06:	9c a9       	ldd	r25, Y+52	; 0x34
    2c08:	20 e0       	ldi	r18, 0x00	; 0
    2c0a:	3f ef       	ldi	r19, 0xFF	; 255
    2c0c:	4f e7       	ldi	r20, 0x7F	; 127
    2c0e:	57 e4       	ldi	r21, 0x47	; 71
    2c10:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c14:	18 16       	cp	r1, r24
    2c16:	4c f5       	brge	.+82     	; 0x2c6a <GETDesiredTemp+0x14a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c18:	6d a9       	ldd	r22, Y+53	; 0x35
    2c1a:	7e a9       	ldd	r23, Y+54	; 0x36
    2c1c:	8f a9       	ldd	r24, Y+55	; 0x37
    2c1e:	98 ad       	ldd	r25, Y+56	; 0x38
    2c20:	20 e0       	ldi	r18, 0x00	; 0
    2c22:	30 e0       	ldi	r19, 0x00	; 0
    2c24:	40 e2       	ldi	r20, 0x20	; 32
    2c26:	51 e4       	ldi	r21, 0x41	; 65
    2c28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c2c:	dc 01       	movw	r26, r24
    2c2e:	cb 01       	movw	r24, r22
    2c30:	bc 01       	movw	r22, r24
    2c32:	cd 01       	movw	r24, r26
    2c34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c38:	dc 01       	movw	r26, r24
    2c3a:	cb 01       	movw	r24, r22
    2c3c:	98 ab       	std	Y+48, r25	; 0x30
    2c3e:	8f a7       	std	Y+47, r24	; 0x2f
    2c40:	0f c0       	rjmp	.+30     	; 0x2c60 <GETDesiredTemp+0x140>
    2c42:	88 ec       	ldi	r24, 0xC8	; 200
    2c44:	90 e0       	ldi	r25, 0x00	; 0
    2c46:	9e a7       	std	Y+46, r25	; 0x2e
    2c48:	8d a7       	std	Y+45, r24	; 0x2d
    2c4a:	8d a5       	ldd	r24, Y+45	; 0x2d
    2c4c:	9e a5       	ldd	r25, Y+46	; 0x2e
    2c4e:	01 97       	sbiw	r24, 0x01	; 1
    2c50:	f1 f7       	brne	.-4      	; 0x2c4e <GETDesiredTemp+0x12e>
    2c52:	9e a7       	std	Y+46, r25	; 0x2e
    2c54:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c56:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c58:	98 a9       	ldd	r25, Y+48	; 0x30
    2c5a:	01 97       	sbiw	r24, 0x01	; 1
    2c5c:	98 ab       	std	Y+48, r25	; 0x30
    2c5e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c60:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c62:	98 a9       	ldd	r25, Y+48	; 0x30
    2c64:	00 97       	sbiw	r24, 0x00	; 0
    2c66:	69 f7       	brne	.-38     	; 0x2c42 <GETDesiredTemp+0x122>
    2c68:	14 c0       	rjmp	.+40     	; 0x2c92 <GETDesiredTemp+0x172>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c6a:	69 a9       	ldd	r22, Y+49	; 0x31
    2c6c:	7a a9       	ldd	r23, Y+50	; 0x32
    2c6e:	8b a9       	ldd	r24, Y+51	; 0x33
    2c70:	9c a9       	ldd	r25, Y+52	; 0x34
    2c72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c76:	dc 01       	movw	r26, r24
    2c78:	cb 01       	movw	r24, r22
    2c7a:	98 ab       	std	Y+48, r25	; 0x30
    2c7c:	8f a7       	std	Y+47, r24	; 0x2f
    2c7e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c80:	98 a9       	ldd	r25, Y+48	; 0x30
    2c82:	9c a7       	std	Y+44, r25	; 0x2c
    2c84:	8b a7       	std	Y+43, r24	; 0x2b
    2c86:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c88:	9c a5       	ldd	r25, Y+44	; 0x2c
    2c8a:	01 97       	sbiw	r24, 0x01	; 1
    2c8c:	f1 f7       	brne	.-4      	; 0x2c8a <GETDesiredTemp+0x16a>
    2c8e:	9c a7       	std	Y+44, r25	; 0x2c
    2c90:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(1000);
				global_u8Choose=0;
    2c92:	10 92 25 02 	sts	0x0225, r1
				GETDesiredTemp(CurrentTemp);
    2c96:	89 ad       	ldd	r24, Y+57	; 0x39
    2c98:	0e 94 90 15 	call	0x2b20	; 0x2b20 <GETDesiredTemp>

			}
			if(global_u8Choose=='1')
    2c9c:	80 91 25 02 	lds	r24, 0x0225
    2ca0:	81 33       	cpi	r24, 0x31	; 49
    2ca2:	09 f0       	breq	.+2      	; 0x2ca6 <GETDesiredTemp+0x186>
    2ca4:	62 c1       	rjmp	.+708    	; 0x2f6a <GETDesiredTemp+0x44a>
			{
				LCD_voidSendCommand(0xC0);
    2ca6:	80 ec       	ldi	r24, 0xC0	; 192
    2ca8:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <LCD_voidSendCommand>
				LCD_voidWriteString("Desired Temp: ");
    2cac:	8c ed       	ldi	r24, 0xDC	; 220
    2cae:	90 e0       	ldi	r25, 0x00	; 0
    2cb0:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <LCD_voidWriteString>
    2cb4:	04 c0       	rjmp	.+8      	; 0x2cbe <GETDesiredTemp+0x19e>
				/************** To Enter first operand ******************/

				/* Wait till button is pressed */
				while (global_u8Num1 == 0)
				{
					global_u8Num1 = KPD_u8GetPressedKey();
    2cb6:	0e 94 24 07 	call	0xe48	; 0xe48 <KPD_u8GetPressedKey>
    2cba:	80 93 14 02 	sts	0x0214, r24
				//LCD_DisplayMessage("Targeted Temp:");

				/************** To Enter first operand ******************/

				/* Wait till button is pressed */
				while (global_u8Num1 == 0)
    2cbe:	80 91 14 02 	lds	r24, 0x0214
    2cc2:	88 23       	and	r24, r24
    2cc4:	c1 f3       	breq	.-16     	; 0x2cb6 <GETDesiredTemp+0x196>
				{
					global_u8Num1 = KPD_u8GetPressedKey();
				}
				if(global_u8Num1 <'1' || global_u8Num1 > '9')
    2cc6:	80 91 14 02 	lds	r24, 0x0214
    2cca:	81 33       	cpi	r24, 0x31	; 49
    2ccc:	28 f0       	brcs	.+10     	; 0x2cd8 <GETDesiredTemp+0x1b8>
    2cce:	80 91 14 02 	lds	r24, 0x0214
    2cd2:	8a 33       	cpi	r24, 0x3A	; 58
    2cd4:	08 f4       	brcc	.+2      	; 0x2cd8 <GETDesiredTemp+0x1b8>
    2cd6:	87 c0       	rjmp	.+270    	; 0x2de6 <GETDesiredTemp+0x2c6>
				{
					LCD_voidSendCommand(lcd_Clear);
    2cd8:	81 e0       	ldi	r24, 0x01	; 1
    2cda:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <LCD_voidSendCommand>
					LCD_voidWriteString("WRONG INPUT !");
    2cde:	82 ec       	ldi	r24, 0xC2	; 194
    2ce0:	90 e0       	ldi	r25, 0x00	; 0
    2ce2:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <LCD_voidWriteString>
					LCD_voidSendCommand(0xC0);
    2ce6:	80 ec       	ldi	r24, 0xC0	; 192
    2ce8:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <LCD_voidSendCommand>
					LCD_voidWriteString("TRY AGAIN !");
    2cec:	80 ed       	ldi	r24, 0xD0	; 208
    2cee:	90 e0       	ldi	r25, 0x00	; 0
    2cf0:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <LCD_voidWriteString>
    2cf4:	80 e0       	ldi	r24, 0x00	; 0
    2cf6:	90 e0       	ldi	r25, 0x00	; 0
    2cf8:	aa e7       	ldi	r26, 0x7A	; 122
    2cfa:	b4 e4       	ldi	r27, 0x44	; 68
    2cfc:	8f a3       	std	Y+39, r24	; 0x27
    2cfe:	98 a7       	std	Y+40, r25	; 0x28
    2d00:	a9 a7       	std	Y+41, r26	; 0x29
    2d02:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d04:	6f a1       	ldd	r22, Y+39	; 0x27
    2d06:	78 a5       	ldd	r23, Y+40	; 0x28
    2d08:	89 a5       	ldd	r24, Y+41	; 0x29
    2d0a:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d0c:	20 e0       	ldi	r18, 0x00	; 0
    2d0e:	30 e0       	ldi	r19, 0x00	; 0
    2d10:	4a ef       	ldi	r20, 0xFA	; 250
    2d12:	54 e4       	ldi	r21, 0x44	; 68
    2d14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d18:	dc 01       	movw	r26, r24
    2d1a:	cb 01       	movw	r24, r22
    2d1c:	8b a3       	std	Y+35, r24	; 0x23
    2d1e:	9c a3       	std	Y+36, r25	; 0x24
    2d20:	ad a3       	std	Y+37, r26	; 0x25
    2d22:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2d24:	6b a1       	ldd	r22, Y+35	; 0x23
    2d26:	7c a1       	ldd	r23, Y+36	; 0x24
    2d28:	8d a1       	ldd	r24, Y+37	; 0x25
    2d2a:	9e a1       	ldd	r25, Y+38	; 0x26
    2d2c:	20 e0       	ldi	r18, 0x00	; 0
    2d2e:	30 e0       	ldi	r19, 0x00	; 0
    2d30:	40 e8       	ldi	r20, 0x80	; 128
    2d32:	5f e3       	ldi	r21, 0x3F	; 63
    2d34:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d38:	88 23       	and	r24, r24
    2d3a:	2c f4       	brge	.+10     	; 0x2d46 <GETDesiredTemp+0x226>
		__ticks = 1;
    2d3c:	81 e0       	ldi	r24, 0x01	; 1
    2d3e:	90 e0       	ldi	r25, 0x00	; 0
    2d40:	9a a3       	std	Y+34, r25	; 0x22
    2d42:	89 a3       	std	Y+33, r24	; 0x21
    2d44:	3f c0       	rjmp	.+126    	; 0x2dc4 <GETDesiredTemp+0x2a4>
	else if (__tmp > 65535)
    2d46:	6b a1       	ldd	r22, Y+35	; 0x23
    2d48:	7c a1       	ldd	r23, Y+36	; 0x24
    2d4a:	8d a1       	ldd	r24, Y+37	; 0x25
    2d4c:	9e a1       	ldd	r25, Y+38	; 0x26
    2d4e:	20 e0       	ldi	r18, 0x00	; 0
    2d50:	3f ef       	ldi	r19, 0xFF	; 255
    2d52:	4f e7       	ldi	r20, 0x7F	; 127
    2d54:	57 e4       	ldi	r21, 0x47	; 71
    2d56:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d5a:	18 16       	cp	r1, r24
    2d5c:	4c f5       	brge	.+82     	; 0x2db0 <GETDesiredTemp+0x290>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d5e:	6f a1       	ldd	r22, Y+39	; 0x27
    2d60:	78 a5       	ldd	r23, Y+40	; 0x28
    2d62:	89 a5       	ldd	r24, Y+41	; 0x29
    2d64:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d66:	20 e0       	ldi	r18, 0x00	; 0
    2d68:	30 e0       	ldi	r19, 0x00	; 0
    2d6a:	40 e2       	ldi	r20, 0x20	; 32
    2d6c:	51 e4       	ldi	r21, 0x41	; 65
    2d6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d72:	dc 01       	movw	r26, r24
    2d74:	cb 01       	movw	r24, r22
    2d76:	bc 01       	movw	r22, r24
    2d78:	cd 01       	movw	r24, r26
    2d7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d7e:	dc 01       	movw	r26, r24
    2d80:	cb 01       	movw	r24, r22
    2d82:	9a a3       	std	Y+34, r25	; 0x22
    2d84:	89 a3       	std	Y+33, r24	; 0x21
    2d86:	0f c0       	rjmp	.+30     	; 0x2da6 <GETDesiredTemp+0x286>
    2d88:	88 ec       	ldi	r24, 0xC8	; 200
    2d8a:	90 e0       	ldi	r25, 0x00	; 0
    2d8c:	98 a3       	std	Y+32, r25	; 0x20
    2d8e:	8f 8f       	std	Y+31, r24	; 0x1f
    2d90:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d92:	98 a1       	ldd	r25, Y+32	; 0x20
    2d94:	01 97       	sbiw	r24, 0x01	; 1
    2d96:	f1 f7       	brne	.-4      	; 0x2d94 <GETDesiredTemp+0x274>
    2d98:	98 a3       	std	Y+32, r25	; 0x20
    2d9a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d9c:	89 a1       	ldd	r24, Y+33	; 0x21
    2d9e:	9a a1       	ldd	r25, Y+34	; 0x22
    2da0:	01 97       	sbiw	r24, 0x01	; 1
    2da2:	9a a3       	std	Y+34, r25	; 0x22
    2da4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2da6:	89 a1       	ldd	r24, Y+33	; 0x21
    2da8:	9a a1       	ldd	r25, Y+34	; 0x22
    2daa:	00 97       	sbiw	r24, 0x00	; 0
    2dac:	69 f7       	brne	.-38     	; 0x2d88 <GETDesiredTemp+0x268>
    2dae:	14 c0       	rjmp	.+40     	; 0x2dd8 <GETDesiredTemp+0x2b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2db0:	6b a1       	ldd	r22, Y+35	; 0x23
    2db2:	7c a1       	ldd	r23, Y+36	; 0x24
    2db4:	8d a1       	ldd	r24, Y+37	; 0x25
    2db6:	9e a1       	ldd	r25, Y+38	; 0x26
    2db8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dbc:	dc 01       	movw	r26, r24
    2dbe:	cb 01       	movw	r24, r22
    2dc0:	9a a3       	std	Y+34, r25	; 0x22
    2dc2:	89 a3       	std	Y+33, r24	; 0x21
    2dc4:	89 a1       	ldd	r24, Y+33	; 0x21
    2dc6:	9a a1       	ldd	r25, Y+34	; 0x22
    2dc8:	9e 8f       	std	Y+30, r25	; 0x1e
    2dca:	8d 8f       	std	Y+29, r24	; 0x1d
    2dcc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2dce:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2dd0:	01 97       	sbiw	r24, 0x01	; 1
    2dd2:	f1 f7       	brne	.-4      	; 0x2dd0 <GETDesiredTemp+0x2b0>
    2dd4:	9e 8f       	std	Y+30, r25	; 0x1e
    2dd6:	8d 8f       	std	Y+29, r24	; 0x1d
					_delay_ms(1000);
					global_u8Choose=0;
    2dd8:	10 92 25 02 	sts	0x0225, r1
					global_u8Num1 = 0 ;
    2ddc:	10 92 14 02 	sts	0x0214, r1
					GETDesiredTemp(CurrentTemp);
    2de0:	89 ad       	ldd	r24, Y+57	; 0x39
    2de2:	0e 94 90 15 	call	0x2b20	; 0x2b20 <GETDesiredTemp>

				// Set cursor to the first line
				//LCD_voidSendCommand(lcd_Clear);

				/* Print the number on screen first */
				LCD_voidSendChar(global_u8Num1);
    2de6:	80 91 14 02 	lds	r24, 0x0214
    2dea:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <LCD_voidSendChar>

				/* Then convert from Ascii to integer */
				global_u8Num1 -= 48 ;
    2dee:	80 91 14 02 	lds	r24, 0x0214
    2df2:	80 53       	subi	r24, 0x30	; 48
    2df4:	80 93 14 02 	sts	0x0214, r24
    2df8:	04 c0       	rjmp	.+8      	; 0x2e02 <GETDesiredTemp+0x2e2>
				/********************** To Enter second operand *************/

				/* Wait till button is pressed */
				while (global_u8Num2 == 0)
				{
					global_u8Num2 = KPD_u8GetPressedKey();
    2dfa:	0e 94 24 07 	call	0xe48	; 0xe48 <KPD_u8GetPressedKey>
    2dfe:	80 93 22 02 	sts	0x0222, r24
				//global_u8DesiredTemp=global_u8Num1*10;

				/********************** To Enter second operand *************/

				/* Wait till button is pressed */
				while (global_u8Num2 == 0)
    2e02:	80 91 22 02 	lds	r24, 0x0222
    2e06:	88 23       	and	r24, r24
    2e08:	c1 f3       	breq	.-16     	; 0x2dfa <GETDesiredTemp+0x2da>
				{
					global_u8Num2 = KPD_u8GetPressedKey();
				}
				if(global_u8Num2 <'0' || global_u8Num2 > '9')
    2e0a:	80 91 22 02 	lds	r24, 0x0222
    2e0e:	80 33       	cpi	r24, 0x30	; 48
    2e10:	28 f0       	brcs	.+10     	; 0x2e1c <GETDesiredTemp+0x2fc>
    2e12:	80 91 22 02 	lds	r24, 0x0222
    2e16:	8a 33       	cpi	r24, 0x3A	; 58
    2e18:	08 f4       	brcc	.+2      	; 0x2e1c <GETDesiredTemp+0x2fc>
    2e1a:	89 c0       	rjmp	.+274    	; 0x2f2e <GETDesiredTemp+0x40e>
				{
					LCD_voidSendCommand(lcd_Clear);
    2e1c:	81 e0       	ldi	r24, 0x01	; 1
    2e1e:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <LCD_voidSendCommand>
					LCD_voidWriteString("WRONG INPUT !");
    2e22:	82 ec       	ldi	r24, 0xC2	; 194
    2e24:	90 e0       	ldi	r25, 0x00	; 0
    2e26:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <LCD_voidWriteString>
					LCD_voidSendCommand(0xC0);
    2e2a:	80 ec       	ldi	r24, 0xC0	; 192
    2e2c:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <LCD_voidSendCommand>
					LCD_voidWriteString("TRY AGAIN !");
    2e30:	80 ed       	ldi	r24, 0xD0	; 208
    2e32:	90 e0       	ldi	r25, 0x00	; 0
    2e34:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <LCD_voidWriteString>
    2e38:	80 e0       	ldi	r24, 0x00	; 0
    2e3a:	90 e0       	ldi	r25, 0x00	; 0
    2e3c:	aa e7       	ldi	r26, 0x7A	; 122
    2e3e:	b4 e4       	ldi	r27, 0x44	; 68
    2e40:	89 8f       	std	Y+25, r24	; 0x19
    2e42:	9a 8f       	std	Y+26, r25	; 0x1a
    2e44:	ab 8f       	std	Y+27, r26	; 0x1b
    2e46:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e48:	69 8d       	ldd	r22, Y+25	; 0x19
    2e4a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e4c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e4e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e50:	20 e0       	ldi	r18, 0x00	; 0
    2e52:	30 e0       	ldi	r19, 0x00	; 0
    2e54:	4a ef       	ldi	r20, 0xFA	; 250
    2e56:	54 e4       	ldi	r21, 0x44	; 68
    2e58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e5c:	dc 01       	movw	r26, r24
    2e5e:	cb 01       	movw	r24, r22
    2e60:	8d 8b       	std	Y+21, r24	; 0x15
    2e62:	9e 8b       	std	Y+22, r25	; 0x16
    2e64:	af 8b       	std	Y+23, r26	; 0x17
    2e66:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e68:	6d 89       	ldd	r22, Y+21	; 0x15
    2e6a:	7e 89       	ldd	r23, Y+22	; 0x16
    2e6c:	8f 89       	ldd	r24, Y+23	; 0x17
    2e6e:	98 8d       	ldd	r25, Y+24	; 0x18
    2e70:	20 e0       	ldi	r18, 0x00	; 0
    2e72:	30 e0       	ldi	r19, 0x00	; 0
    2e74:	40 e8       	ldi	r20, 0x80	; 128
    2e76:	5f e3       	ldi	r21, 0x3F	; 63
    2e78:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e7c:	88 23       	and	r24, r24
    2e7e:	2c f4       	brge	.+10     	; 0x2e8a <GETDesiredTemp+0x36a>
		__ticks = 1;
    2e80:	81 e0       	ldi	r24, 0x01	; 1
    2e82:	90 e0       	ldi	r25, 0x00	; 0
    2e84:	9c 8b       	std	Y+20, r25	; 0x14
    2e86:	8b 8b       	std	Y+19, r24	; 0x13
    2e88:	3f c0       	rjmp	.+126    	; 0x2f08 <GETDesiredTemp+0x3e8>
	else if (__tmp > 65535)
    2e8a:	6d 89       	ldd	r22, Y+21	; 0x15
    2e8c:	7e 89       	ldd	r23, Y+22	; 0x16
    2e8e:	8f 89       	ldd	r24, Y+23	; 0x17
    2e90:	98 8d       	ldd	r25, Y+24	; 0x18
    2e92:	20 e0       	ldi	r18, 0x00	; 0
    2e94:	3f ef       	ldi	r19, 0xFF	; 255
    2e96:	4f e7       	ldi	r20, 0x7F	; 127
    2e98:	57 e4       	ldi	r21, 0x47	; 71
    2e9a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e9e:	18 16       	cp	r1, r24
    2ea0:	4c f5       	brge	.+82     	; 0x2ef4 <GETDesiredTemp+0x3d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ea2:	69 8d       	ldd	r22, Y+25	; 0x19
    2ea4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ea6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ea8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2eaa:	20 e0       	ldi	r18, 0x00	; 0
    2eac:	30 e0       	ldi	r19, 0x00	; 0
    2eae:	40 e2       	ldi	r20, 0x20	; 32
    2eb0:	51 e4       	ldi	r21, 0x41	; 65
    2eb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eb6:	dc 01       	movw	r26, r24
    2eb8:	cb 01       	movw	r24, r22
    2eba:	bc 01       	movw	r22, r24
    2ebc:	cd 01       	movw	r24, r26
    2ebe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ec2:	dc 01       	movw	r26, r24
    2ec4:	cb 01       	movw	r24, r22
    2ec6:	9c 8b       	std	Y+20, r25	; 0x14
    2ec8:	8b 8b       	std	Y+19, r24	; 0x13
    2eca:	0f c0       	rjmp	.+30     	; 0x2eea <GETDesiredTemp+0x3ca>
    2ecc:	88 ec       	ldi	r24, 0xC8	; 200
    2ece:	90 e0       	ldi	r25, 0x00	; 0
    2ed0:	9a 8b       	std	Y+18, r25	; 0x12
    2ed2:	89 8b       	std	Y+17, r24	; 0x11
    2ed4:	89 89       	ldd	r24, Y+17	; 0x11
    2ed6:	9a 89       	ldd	r25, Y+18	; 0x12
    2ed8:	01 97       	sbiw	r24, 0x01	; 1
    2eda:	f1 f7       	brne	.-4      	; 0x2ed8 <GETDesiredTemp+0x3b8>
    2edc:	9a 8b       	std	Y+18, r25	; 0x12
    2ede:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ee0:	8b 89       	ldd	r24, Y+19	; 0x13
    2ee2:	9c 89       	ldd	r25, Y+20	; 0x14
    2ee4:	01 97       	sbiw	r24, 0x01	; 1
    2ee6:	9c 8b       	std	Y+20, r25	; 0x14
    2ee8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eea:	8b 89       	ldd	r24, Y+19	; 0x13
    2eec:	9c 89       	ldd	r25, Y+20	; 0x14
    2eee:	00 97       	sbiw	r24, 0x00	; 0
    2ef0:	69 f7       	brne	.-38     	; 0x2ecc <GETDesiredTemp+0x3ac>
    2ef2:	14 c0       	rjmp	.+40     	; 0x2f1c <GETDesiredTemp+0x3fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ef4:	6d 89       	ldd	r22, Y+21	; 0x15
    2ef6:	7e 89       	ldd	r23, Y+22	; 0x16
    2ef8:	8f 89       	ldd	r24, Y+23	; 0x17
    2efa:	98 8d       	ldd	r25, Y+24	; 0x18
    2efc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f00:	dc 01       	movw	r26, r24
    2f02:	cb 01       	movw	r24, r22
    2f04:	9c 8b       	std	Y+20, r25	; 0x14
    2f06:	8b 8b       	std	Y+19, r24	; 0x13
    2f08:	8b 89       	ldd	r24, Y+19	; 0x13
    2f0a:	9c 89       	ldd	r25, Y+20	; 0x14
    2f0c:	98 8b       	std	Y+16, r25	; 0x10
    2f0e:	8f 87       	std	Y+15, r24	; 0x0f
    2f10:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f12:	98 89       	ldd	r25, Y+16	; 0x10
    2f14:	01 97       	sbiw	r24, 0x01	; 1
    2f16:	f1 f7       	brne	.-4      	; 0x2f14 <GETDesiredTemp+0x3f4>
    2f18:	98 8b       	std	Y+16, r25	; 0x10
    2f1a:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(1000);
					global_u8Choose = 0;
    2f1c:	10 92 25 02 	sts	0x0225, r1
					global_u8Num1 = 0 ;
    2f20:	10 92 14 02 	sts	0x0214, r1
					global_u8Num2 = 0 ;
    2f24:	10 92 22 02 	sts	0x0222, r1
					GETDesiredTemp(CurrentTemp);
    2f28:	89 ad       	ldd	r24, Y+57	; 0x39
    2f2a:	0e 94 90 15 	call	0x2b20	; 0x2b20 <GETDesiredTemp>
				}

				/* Print the number on screen first */
				LCD_voidSendChar(global_u8Num2);
    2f2e:	80 91 22 02 	lds	r24, 0x0222
    2f32:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <LCD_voidSendChar>

				/* Then convert from Ascii to integer */
				global_u8Num2 -= 48 ;
    2f36:	80 91 22 02 	lds	r24, 0x0222
    2f3a:	80 53       	subi	r24, 0x30	; 48
    2f3c:	80 93 22 02 	sts	0x0222, r24

				/****************** Wait to enter equal *********************/
				//while (KPD_u8GetPressedKey() != 'C');

				global_u8DesiredTemp = global_u8Num1*10 + global_u8Num2;
    2f40:	80 91 14 02 	lds	r24, 0x0214
    2f44:	88 2f       	mov	r24, r24
    2f46:	90 e0       	ldi	r25, 0x00	; 0
    2f48:	9c 01       	movw	r18, r24
    2f4a:	22 0f       	add	r18, r18
    2f4c:	33 1f       	adc	r19, r19
    2f4e:	c9 01       	movw	r24, r18
    2f50:	88 0f       	add	r24, r24
    2f52:	99 1f       	adc	r25, r25
    2f54:	88 0f       	add	r24, r24
    2f56:	99 1f       	adc	r25, r25
    2f58:	82 0f       	add	r24, r18
    2f5a:	93 1f       	adc	r25, r19
    2f5c:	98 2f       	mov	r25, r24
    2f5e:	80 91 22 02 	lds	r24, 0x0222
    2f62:	89 0f       	add	r24, r25
    2f64:	80 93 20 02 	sts	0x0220, r24
    2f68:	1c c0       	rjmp	.+56     	; 0x2fa2 <GETDesiredTemp+0x482>

			}
			else if(global_u8Choose=='2')
    2f6a:	80 91 25 02 	lds	r24, 0x0225
    2f6e:	82 33       	cpi	r24, 0x32	; 50
    2f70:	c1 f4       	brne	.+48     	; 0x2fa2 <GETDesiredTemp+0x482>
			{
				UART_VidSendData(2);
    2f72:	82 e0       	ldi	r24, 0x02	; 2
    2f74:	0e 94 18 10 	call	0x2030	; 0x2030 <UART_VidSendData>
				global_u8DesiredTemp = UART_VidReceiveData();
    2f78:	0e 94 32 10 	call	0x2064	; 0x2064 <UART_VidReceiveData>
    2f7c:	80 93 20 02 	sts	0x0220, r24
				LCD_voidSendCommand(0xC0);
    2f80:	80 ec       	ldi	r24, 0xC0	; 192
    2f82:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <LCD_voidSendCommand>
				LCD_voidWriteString("Desired Temp: ");
    2f86:	8c ed       	ldi	r24, 0xDC	; 220
    2f88:	90 e0       	ldi	r25, 0x00	; 0
    2f8a:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <LCD_voidWriteString>
				LCD_voidPrintInt(global_u8DesiredTemp);
    2f8e:	80 91 20 02 	lds	r24, 0x0220
    2f92:	88 2f       	mov	r24, r24
    2f94:	90 e0       	ldi	r25, 0x00	; 0
    2f96:	a0 e0       	ldi	r26, 0x00	; 0
    2f98:	b0 e0       	ldi	r27, 0x00	; 0
    2f9a:	bc 01       	movw	r22, r24
    2f9c:	cd 01       	movw	r24, r26
    2f9e:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <LCD_voidPrintInt>
				//LCD_voidSendCommand(lcd_Clear);
			}


			if(global_u8DesiredTemp>=20 && global_u8DesiredTemp <=40 )
    2fa2:	80 91 20 02 	lds	r24, 0x0220
    2fa6:	84 31       	cpi	r24, 0x14	; 20
    2fa8:	78 f0       	brcs	.+30     	; 0x2fc8 <GETDesiredTemp+0x4a8>
    2faa:	80 91 20 02 	lds	r24, 0x0220
    2fae:	89 32       	cpi	r24, 0x29	; 41
    2fb0:	58 f4       	brcc	.+22     	; 0x2fc8 <GETDesiredTemp+0x4a8>
			{
				MDIO_vidSetPinDirection(PORT_A,6,OUTPUT);
    2fb2:	81 e4       	ldi	r24, 0x41	; 65
    2fb4:	66 e0       	ldi	r22, 0x06	; 6
    2fb6:	41 e0       	ldi	r20, 0x01	; 1
    2fb8:	0e 94 6d 10 	call	0x20da	; 0x20da <MDIO_vidSetPinDirection>
				MDIO_vidSetPinValue(PORT_A,6,HIGH);
    2fbc:	81 e4       	ldi	r24, 0x41	; 65
    2fbe:	66 e0       	ldi	r22, 0x06	; 6
    2fc0:	41 e0       	ldi	r20, 0x01	; 1
    2fc2:	0e 94 77 11 	call	0x22ee	; 0x22ee <MDIO_vidSetPinValue>
    2fc6:	95 c0       	rjmp	.+298    	; 0x30f2 <GETDesiredTemp+0x5d2>
			}
			else
			{
				MDIO_vidSetPinDirection(PORT_A,6,OUTPUT);
    2fc8:	81 e4       	ldi	r24, 0x41	; 65
    2fca:	66 e0       	ldi	r22, 0x06	; 6
    2fcc:	41 e0       	ldi	r20, 0x01	; 1
    2fce:	0e 94 6d 10 	call	0x20da	; 0x20da <MDIO_vidSetPinDirection>
				MDIO_vidSetPinValue(PORT_A,6,LOW);
    2fd2:	81 e4       	ldi	r24, 0x41	; 65
    2fd4:	66 e0       	ldi	r22, 0x06	; 6
    2fd6:	40 e0       	ldi	r20, 0x00	; 0
    2fd8:	0e 94 77 11 	call	0x22ee	; 0x22ee <MDIO_vidSetPinValue>
				LCD_voidSendCommand(lcd_Clear);
    2fdc:	81 e0       	ldi	r24, 0x01	; 1
    2fde:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <LCD_voidSendCommand>
				//LCD_voidSendCommand(0xC0);
				//LCD_voidGoTo(2 , 5);   /* Move to second line */
				LCD_voidWriteString("WRONG INPUT !");
    2fe2:	82 ec       	ldi	r24, 0xC2	; 194
    2fe4:	90 e0       	ldi	r25, 0x00	; 0
    2fe6:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <LCD_voidWriteString>
				LCD_voidSendCommand(0xC0);
    2fea:	80 ec       	ldi	r24, 0xC0	; 192
    2fec:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <LCD_voidSendCommand>
				LCD_voidWriteString("TRY AGAIN !");
    2ff0:	80 ed       	ldi	r24, 0xD0	; 208
    2ff2:	90 e0       	ldi	r25, 0x00	; 0
    2ff4:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <LCD_voidWriteString>
    2ff8:	80 e0       	ldi	r24, 0x00	; 0
    2ffa:	90 e0       	ldi	r25, 0x00	; 0
    2ffc:	aa e7       	ldi	r26, 0x7A	; 122
    2ffe:	b4 e4       	ldi	r27, 0x44	; 68
    3000:	8b 87       	std	Y+11, r24	; 0x0b
    3002:	9c 87       	std	Y+12, r25	; 0x0c
    3004:	ad 87       	std	Y+13, r26	; 0x0d
    3006:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3008:	6b 85       	ldd	r22, Y+11	; 0x0b
    300a:	7c 85       	ldd	r23, Y+12	; 0x0c
    300c:	8d 85       	ldd	r24, Y+13	; 0x0d
    300e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3010:	20 e0       	ldi	r18, 0x00	; 0
    3012:	30 e0       	ldi	r19, 0x00	; 0
    3014:	4a ef       	ldi	r20, 0xFA	; 250
    3016:	54 e4       	ldi	r21, 0x44	; 68
    3018:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    301c:	dc 01       	movw	r26, r24
    301e:	cb 01       	movw	r24, r22
    3020:	8f 83       	std	Y+7, r24	; 0x07
    3022:	98 87       	std	Y+8, r25	; 0x08
    3024:	a9 87       	std	Y+9, r26	; 0x09
    3026:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3028:	6f 81       	ldd	r22, Y+7	; 0x07
    302a:	78 85       	ldd	r23, Y+8	; 0x08
    302c:	89 85       	ldd	r24, Y+9	; 0x09
    302e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3030:	20 e0       	ldi	r18, 0x00	; 0
    3032:	30 e0       	ldi	r19, 0x00	; 0
    3034:	40 e8       	ldi	r20, 0x80	; 128
    3036:	5f e3       	ldi	r21, 0x3F	; 63
    3038:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    303c:	88 23       	and	r24, r24
    303e:	2c f4       	brge	.+10     	; 0x304a <GETDesiredTemp+0x52a>
		__ticks = 1;
    3040:	81 e0       	ldi	r24, 0x01	; 1
    3042:	90 e0       	ldi	r25, 0x00	; 0
    3044:	9e 83       	std	Y+6, r25	; 0x06
    3046:	8d 83       	std	Y+5, r24	; 0x05
    3048:	3f c0       	rjmp	.+126    	; 0x30c8 <GETDesiredTemp+0x5a8>
	else if (__tmp > 65535)
    304a:	6f 81       	ldd	r22, Y+7	; 0x07
    304c:	78 85       	ldd	r23, Y+8	; 0x08
    304e:	89 85       	ldd	r24, Y+9	; 0x09
    3050:	9a 85       	ldd	r25, Y+10	; 0x0a
    3052:	20 e0       	ldi	r18, 0x00	; 0
    3054:	3f ef       	ldi	r19, 0xFF	; 255
    3056:	4f e7       	ldi	r20, 0x7F	; 127
    3058:	57 e4       	ldi	r21, 0x47	; 71
    305a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    305e:	18 16       	cp	r1, r24
    3060:	4c f5       	brge	.+82     	; 0x30b4 <GETDesiredTemp+0x594>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3062:	6b 85       	ldd	r22, Y+11	; 0x0b
    3064:	7c 85       	ldd	r23, Y+12	; 0x0c
    3066:	8d 85       	ldd	r24, Y+13	; 0x0d
    3068:	9e 85       	ldd	r25, Y+14	; 0x0e
    306a:	20 e0       	ldi	r18, 0x00	; 0
    306c:	30 e0       	ldi	r19, 0x00	; 0
    306e:	40 e2       	ldi	r20, 0x20	; 32
    3070:	51 e4       	ldi	r21, 0x41	; 65
    3072:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3076:	dc 01       	movw	r26, r24
    3078:	cb 01       	movw	r24, r22
    307a:	bc 01       	movw	r22, r24
    307c:	cd 01       	movw	r24, r26
    307e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3082:	dc 01       	movw	r26, r24
    3084:	cb 01       	movw	r24, r22
    3086:	9e 83       	std	Y+6, r25	; 0x06
    3088:	8d 83       	std	Y+5, r24	; 0x05
    308a:	0f c0       	rjmp	.+30     	; 0x30aa <GETDesiredTemp+0x58a>
    308c:	88 ec       	ldi	r24, 0xC8	; 200
    308e:	90 e0       	ldi	r25, 0x00	; 0
    3090:	9c 83       	std	Y+4, r25	; 0x04
    3092:	8b 83       	std	Y+3, r24	; 0x03
    3094:	8b 81       	ldd	r24, Y+3	; 0x03
    3096:	9c 81       	ldd	r25, Y+4	; 0x04
    3098:	01 97       	sbiw	r24, 0x01	; 1
    309a:	f1 f7       	brne	.-4      	; 0x3098 <GETDesiredTemp+0x578>
    309c:	9c 83       	std	Y+4, r25	; 0x04
    309e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30a0:	8d 81       	ldd	r24, Y+5	; 0x05
    30a2:	9e 81       	ldd	r25, Y+6	; 0x06
    30a4:	01 97       	sbiw	r24, 0x01	; 1
    30a6:	9e 83       	std	Y+6, r25	; 0x06
    30a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30aa:	8d 81       	ldd	r24, Y+5	; 0x05
    30ac:	9e 81       	ldd	r25, Y+6	; 0x06
    30ae:	00 97       	sbiw	r24, 0x00	; 0
    30b0:	69 f7       	brne	.-38     	; 0x308c <GETDesiredTemp+0x56c>
    30b2:	14 c0       	rjmp	.+40     	; 0x30dc <GETDesiredTemp+0x5bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30b4:	6f 81       	ldd	r22, Y+7	; 0x07
    30b6:	78 85       	ldd	r23, Y+8	; 0x08
    30b8:	89 85       	ldd	r24, Y+9	; 0x09
    30ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    30bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30c0:	dc 01       	movw	r26, r24
    30c2:	cb 01       	movw	r24, r22
    30c4:	9e 83       	std	Y+6, r25	; 0x06
    30c6:	8d 83       	std	Y+5, r24	; 0x05
    30c8:	8d 81       	ldd	r24, Y+5	; 0x05
    30ca:	9e 81       	ldd	r25, Y+6	; 0x06
    30cc:	9a 83       	std	Y+2, r25	; 0x02
    30ce:	89 83       	std	Y+1, r24	; 0x01
    30d0:	89 81       	ldd	r24, Y+1	; 0x01
    30d2:	9a 81       	ldd	r25, Y+2	; 0x02
    30d4:	01 97       	sbiw	r24, 0x01	; 1
    30d6:	f1 f7       	brne	.-4      	; 0x30d4 <GETDesiredTemp+0x5b4>
    30d8:	9a 83       	std	Y+2, r25	; 0x02
    30da:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(1000);
				global_u8Choose = 0;
    30dc:	10 92 25 02 	sts	0x0225, r1
				global_u8Num1 = 0 ;
    30e0:	10 92 14 02 	sts	0x0214, r1
				global_u8Num2 = 0 ;
    30e4:	10 92 22 02 	sts	0x0222, r1
				//global_u8Operation = 0 ;
				global_u8DesiredTemp=0;
    30e8:	10 92 20 02 	sts	0x0220, r1

				GETDesiredTemp(CurrentTemp);
    30ec:	89 ad       	ldd	r24, Y+57	; 0x39
    30ee:	0e 94 90 15 	call	0x2b20	; 0x2b20 <GETDesiredTemp>
			}

			SendReceiveData(CurrentTemp,global_u8DesiredTemp);
    30f2:	90 91 20 02 	lds	r25, 0x0220
    30f6:	89 ad       	ldd	r24, Y+57	; 0x39
    30f8:	69 2f       	mov	r22, r25
    30fa:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <SendReceiveData>
//			global_u8Choose=0;
//
//			/********* Wait User to enter any key to start new operation  ******/
//			while ( ! (KPD_u8GetPressedKey()) );

}
    30fe:	e9 96       	adiw	r28, 0x39	; 57
    3100:	0f b6       	in	r0, 0x3f	; 63
    3102:	f8 94       	cli
    3104:	de bf       	out	0x3e, r29	; 62
    3106:	0f be       	out	0x3f, r0	; 63
    3108:	cd bf       	out	0x3d, r28	; 61
    310a:	cf 91       	pop	r28
    310c:	df 91       	pop	r29
    310e:	08 95       	ret

00003110 <GetCurrentTemp>:
//	_delay_ms(1000); // Wait for 2 seconds
//	LCD_voidWriteString(lcd_Clear);


void GetCurrentTemp()
{
    3110:	df 93       	push	r29
    3112:	cf 93       	push	r28
    3114:	00 d0       	rcall	.+0      	; 0x3116 <GetCurrentTemp+0x6>
    3116:	cd b7       	in	r28, 0x3d	; 61
    3118:	de b7       	in	r29, 0x3e	; 62
	u8 CurrentTemp;

	u8 DesiredTemp=35;
    311a:	83 e2       	ldi	r24, 0x23	; 35
    311c:	89 83       	std	Y+1, r24	; 0x01
	CurrentTemp = ADC_u16ReadChannelSyn(channel7);
    311e:	87 e0       	ldi	r24, 0x07	; 7
    3120:	0e 94 88 06 	call	0xd10	; 0xd10 <ADC_u16ReadChannelSyn>
    3124:	8a 83       	std	Y+2, r24	; 0x02
	//float temperature = ((CurrentTemp * 5.0) / (1024.0 * 10.0))/2;
    //float temperature = (float)CurrentTemp * (60.0 / 1023.0) - 10.0;
    CurrentTemp = (CurrentTemp *0.5)-1;
    3126:	8a 81       	ldd	r24, Y+2	; 0x02
    3128:	88 2f       	mov	r24, r24
    312a:	90 e0       	ldi	r25, 0x00	; 0
    312c:	aa 27       	eor	r26, r26
    312e:	97 fd       	sbrc	r25, 7
    3130:	a0 95       	com	r26
    3132:	ba 2f       	mov	r27, r26
    3134:	bc 01       	movw	r22, r24
    3136:	cd 01       	movw	r24, r26
    3138:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
    313c:	dc 01       	movw	r26, r24
    313e:	cb 01       	movw	r24, r22
    3140:	bc 01       	movw	r22, r24
    3142:	cd 01       	movw	r24, r26
    3144:	20 e0       	ldi	r18, 0x00	; 0
    3146:	30 e0       	ldi	r19, 0x00	; 0
    3148:	40 e0       	ldi	r20, 0x00	; 0
    314a:	5f e3       	ldi	r21, 0x3F	; 63
    314c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3150:	dc 01       	movw	r26, r24
    3152:	cb 01       	movw	r24, r22
    3154:	bc 01       	movw	r22, r24
    3156:	cd 01       	movw	r24, r26
    3158:	20 e0       	ldi	r18, 0x00	; 0
    315a:	30 e0       	ldi	r19, 0x00	; 0
    315c:	40 e8       	ldi	r20, 0x80	; 128
    315e:	5f e3       	ldi	r21, 0x3F	; 63
    3160:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    3164:	dc 01       	movw	r26, r24
    3166:	cb 01       	movw	r24, r22
    3168:	bc 01       	movw	r22, r24
    316a:	cd 01       	movw	r24, r26
    316c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3170:	dc 01       	movw	r26, r24
    3172:	cb 01       	movw	r24, r22
    3174:	8a 83       	std	Y+2, r24	; 0x02
    //_delay_ms(100);
    GETDesiredTemp(CurrentTemp);
    3176:	8a 81       	ldd	r24, Y+2	; 0x02
    3178:	0e 94 90 15 	call	0x2b20	; 0x2b20 <GETDesiredTemp>
   // SendReceiveData( CurrentTemp, DesiredTemp);

}
    317c:	0f 90       	pop	r0
    317e:	0f 90       	pop	r0
    3180:	cf 91       	pop	r28
    3182:	df 91       	pop	r29
    3184:	08 95       	ret

00003186 <Start>:
//    }
//}


void Start()
{
    3186:	df 93       	push	r29
    3188:	cf 93       	push	r28
    318a:	cd b7       	in	r28, 0x3d	; 61
    318c:	de b7       	in	r29, 0x3e	; 62
	GetCurrentTemp();
    318e:	0e 94 88 18 	call	0x3110	; 0x3110 <GetCurrentTemp>
}
    3192:	cf 91       	pop	r28
    3194:	df 91       	pop	r29
    3196:	08 95       	ret

00003198 <main>:
int main()
{
    3198:	df 93       	push	r29
    319a:	cf 93       	push	r28
    319c:	cd b7       	in	r28, 0x3d	; 61
    319e:	de b7       	in	r29, 0x3e	; 62

	//MDIO_vidSetPinDirection(PORT_A,0,OUTPUT);

//  SPI_VidMasterInit();

	LCD_voidInit();
    31a0:	0e 94 28 08 	call	0x1050	; 0x1050 <LCD_voidInit>
	KPD_voidInitPins();
    31a4:	0e 94 be 06 	call	0xd7c	; 0xd7c <KPD_voidInitPins>

	Welcome();
    31a8:	0e 94 d6 13 	call	0x27ac	; 0x27ac <Welcome>

	MDIO_vidSetPinDirection(PORT_D,0,INPUT);
    31ac:	84 e4       	ldi	r24, 0x44	; 68
    31ae:	60 e0       	ldi	r22, 0x00	; 0
    31b0:	40 e0       	ldi	r20, 0x00	; 0
    31b2:	0e 94 6d 10 	call	0x20da	; 0x20da <MDIO_vidSetPinDirection>
	MDIO_vidSetPinDirection(PORT_D,1,OUTPUT);
    31b6:	84 e4       	ldi	r24, 0x44	; 68
    31b8:	61 e0       	ldi	r22, 0x01	; 1
    31ba:	41 e0       	ldi	r20, 0x01	; 1
    31bc:	0e 94 6d 10 	call	0x20da	; 0x20da <MDIO_vidSetPinDirection>

	ADC_VidInIt();
    31c0:	0e 94 50 06 	call	0xca0	; 0xca0 <ADC_VidInIt>

	UART_VidInit();
    31c4:	0e 94 44 10 	call	0x2088	; 0x2088 <UART_VidInit>


	while(1)
	{
		//GetCurrentTemp();
		Start();
    31c8:	0e 94 c3 18 	call	0x3186	; 0x3186 <Start>
		global_u8Num1 = 0 ;
    31cc:	10 92 14 02 	sts	0x0214, r1
		global_u8Num2 = 0 ;
    31d0:	10 92 22 02 	sts	0x0222, r1
		global_u8DesiredTemp=0;
    31d4:	10 92 20 02 	sts	0x0220, r1
		global_u8Choose=0;
    31d8:	10 92 25 02 	sts	0x0225, r1

		/********* Wait User to enter any key to start new operation  ******/
		while ( ! (KPD_u8GetPressedKey()) );
    31dc:	0e 94 24 07 	call	0xe48	; 0xe48 <KPD_u8GetPressedKey>
    31e0:	88 23       	and	r24, r24
    31e2:	e1 f3       	breq	.-8      	; 0x31dc <main+0x44>
    31e4:	f1 cf       	rjmp	.-30     	; 0x31c8 <main+0x30>

000031e6 <__divmodsi4>:
    31e6:	97 fb       	bst	r25, 7
    31e8:	09 2e       	mov	r0, r25
    31ea:	05 26       	eor	r0, r21
    31ec:	0e d0       	rcall	.+28     	; 0x320a <__divmodsi4_neg1>
    31ee:	57 fd       	sbrc	r21, 7
    31f0:	04 d0       	rcall	.+8      	; 0x31fa <__divmodsi4_neg2>
    31f2:	14 d0       	rcall	.+40     	; 0x321c <__udivmodsi4>
    31f4:	0a d0       	rcall	.+20     	; 0x320a <__divmodsi4_neg1>
    31f6:	00 1c       	adc	r0, r0
    31f8:	38 f4       	brcc	.+14     	; 0x3208 <__divmodsi4_exit>

000031fa <__divmodsi4_neg2>:
    31fa:	50 95       	com	r21
    31fc:	40 95       	com	r20
    31fe:	30 95       	com	r19
    3200:	21 95       	neg	r18
    3202:	3f 4f       	sbci	r19, 0xFF	; 255
    3204:	4f 4f       	sbci	r20, 0xFF	; 255
    3206:	5f 4f       	sbci	r21, 0xFF	; 255

00003208 <__divmodsi4_exit>:
    3208:	08 95       	ret

0000320a <__divmodsi4_neg1>:
    320a:	f6 f7       	brtc	.-4      	; 0x3208 <__divmodsi4_exit>
    320c:	90 95       	com	r25
    320e:	80 95       	com	r24
    3210:	70 95       	com	r23
    3212:	61 95       	neg	r22
    3214:	7f 4f       	sbci	r23, 0xFF	; 255
    3216:	8f 4f       	sbci	r24, 0xFF	; 255
    3218:	9f 4f       	sbci	r25, 0xFF	; 255
    321a:	08 95       	ret

0000321c <__udivmodsi4>:
    321c:	a1 e2       	ldi	r26, 0x21	; 33
    321e:	1a 2e       	mov	r1, r26
    3220:	aa 1b       	sub	r26, r26
    3222:	bb 1b       	sub	r27, r27
    3224:	fd 01       	movw	r30, r26
    3226:	0d c0       	rjmp	.+26     	; 0x3242 <__udivmodsi4_ep>

00003228 <__udivmodsi4_loop>:
    3228:	aa 1f       	adc	r26, r26
    322a:	bb 1f       	adc	r27, r27
    322c:	ee 1f       	adc	r30, r30
    322e:	ff 1f       	adc	r31, r31
    3230:	a2 17       	cp	r26, r18
    3232:	b3 07       	cpc	r27, r19
    3234:	e4 07       	cpc	r30, r20
    3236:	f5 07       	cpc	r31, r21
    3238:	20 f0       	brcs	.+8      	; 0x3242 <__udivmodsi4_ep>
    323a:	a2 1b       	sub	r26, r18
    323c:	b3 0b       	sbc	r27, r19
    323e:	e4 0b       	sbc	r30, r20
    3240:	f5 0b       	sbc	r31, r21

00003242 <__udivmodsi4_ep>:
    3242:	66 1f       	adc	r22, r22
    3244:	77 1f       	adc	r23, r23
    3246:	88 1f       	adc	r24, r24
    3248:	99 1f       	adc	r25, r25
    324a:	1a 94       	dec	r1
    324c:	69 f7       	brne	.-38     	; 0x3228 <__udivmodsi4_loop>
    324e:	60 95       	com	r22
    3250:	70 95       	com	r23
    3252:	80 95       	com	r24
    3254:	90 95       	com	r25
    3256:	9b 01       	movw	r18, r22
    3258:	ac 01       	movw	r20, r24
    325a:	bd 01       	movw	r22, r26
    325c:	cf 01       	movw	r24, r30
    325e:	08 95       	ret

00003260 <__prologue_saves__>:
    3260:	2f 92       	push	r2
    3262:	3f 92       	push	r3
    3264:	4f 92       	push	r4
    3266:	5f 92       	push	r5
    3268:	6f 92       	push	r6
    326a:	7f 92       	push	r7
    326c:	8f 92       	push	r8
    326e:	9f 92       	push	r9
    3270:	af 92       	push	r10
    3272:	bf 92       	push	r11
    3274:	cf 92       	push	r12
    3276:	df 92       	push	r13
    3278:	ef 92       	push	r14
    327a:	ff 92       	push	r15
    327c:	0f 93       	push	r16
    327e:	1f 93       	push	r17
    3280:	cf 93       	push	r28
    3282:	df 93       	push	r29
    3284:	cd b7       	in	r28, 0x3d	; 61
    3286:	de b7       	in	r29, 0x3e	; 62
    3288:	ca 1b       	sub	r28, r26
    328a:	db 0b       	sbc	r29, r27
    328c:	0f b6       	in	r0, 0x3f	; 63
    328e:	f8 94       	cli
    3290:	de bf       	out	0x3e, r29	; 62
    3292:	0f be       	out	0x3f, r0	; 63
    3294:	cd bf       	out	0x3d, r28	; 61
    3296:	09 94       	ijmp

00003298 <__epilogue_restores__>:
    3298:	2a 88       	ldd	r2, Y+18	; 0x12
    329a:	39 88       	ldd	r3, Y+17	; 0x11
    329c:	48 88       	ldd	r4, Y+16	; 0x10
    329e:	5f 84       	ldd	r5, Y+15	; 0x0f
    32a0:	6e 84       	ldd	r6, Y+14	; 0x0e
    32a2:	7d 84       	ldd	r7, Y+13	; 0x0d
    32a4:	8c 84       	ldd	r8, Y+12	; 0x0c
    32a6:	9b 84       	ldd	r9, Y+11	; 0x0b
    32a8:	aa 84       	ldd	r10, Y+10	; 0x0a
    32aa:	b9 84       	ldd	r11, Y+9	; 0x09
    32ac:	c8 84       	ldd	r12, Y+8	; 0x08
    32ae:	df 80       	ldd	r13, Y+7	; 0x07
    32b0:	ee 80       	ldd	r14, Y+6	; 0x06
    32b2:	fd 80       	ldd	r15, Y+5	; 0x05
    32b4:	0c 81       	ldd	r16, Y+4	; 0x04
    32b6:	1b 81       	ldd	r17, Y+3	; 0x03
    32b8:	aa 81       	ldd	r26, Y+2	; 0x02
    32ba:	b9 81       	ldd	r27, Y+1	; 0x01
    32bc:	ce 0f       	add	r28, r30
    32be:	d1 1d       	adc	r29, r1
    32c0:	0f b6       	in	r0, 0x3f	; 63
    32c2:	f8 94       	cli
    32c4:	de bf       	out	0x3e, r29	; 62
    32c6:	0f be       	out	0x3f, r0	; 63
    32c8:	cd bf       	out	0x3d, r28	; 61
    32ca:	ed 01       	movw	r28, r26
    32cc:	08 95       	ret

000032ce <_exit>:
    32ce:	f8 94       	cli

000032d0 <__stop_program>:
    32d0:	ff cf       	rjmp	.-2      	; 0x32d0 <__stop_program>
