
SLAVE_SPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000024ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  000024ec  00002580  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  0080006c  0080006c  0000258c  2**0
                  ALLOC
  3 .stab         000023b8  00000000  00000000  0000258c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001213  00000000  00000000  00004944  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00005b57  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00005cb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00005e46  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00007e8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00008f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00009f10  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000a090  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000a352  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000abe0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 7d 0a 	jmp	0x14fa	; 0x14fa <__vector_10>
      2c:	0c 94 31 0a 	jmp	0x1462	; 0x1462 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ee       	ldi	r30, 0xEC	; 236
      68:	f4 e2       	ldi	r31, 0x24	; 36
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 36       	cpi	r26, 0x6C	; 108
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e6       	ldi	r26, 0x6C	; 108
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 37       	cpi	r26, 0x74	; 116
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <main>
      8a:	0c 94 74 12 	jmp	0x24e8	; 0x24e8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 3d 12 	jmp	0x247a	; 0x247a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 59 12 	jmp	0x24b2	; 0x24b2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 49 12 	jmp	0x2492	; 0x2492 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 65 12 	jmp	0x24ca	; 0x24ca <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 49 12 	jmp	0x2492	; 0x2492 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 65 12 	jmp	0x24ca	; 0x24ca <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 3d 12 	jmp	0x247a	; 0x247a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 59 12 	jmp	0x24b2	; 0x24b2 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 45 12 	jmp	0x248a	; 0x248a <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 61 12 	jmp	0x24c2	; 0x24c2 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 49 12 	jmp	0x2492	; 0x2492 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 65 12 	jmp	0x24ca	; 0x24ca <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 49 12 	jmp	0x2492	; 0x2492 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 65 12 	jmp	0x24ca	; 0x24ca <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 49 12 	jmp	0x2492	; 0x2492 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 65 12 	jmp	0x24ca	; 0x24ca <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 4d 12 	jmp	0x249a	; 0x249a <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 69 12 	jmp	0x24d2	; 0x24d2 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <EEP_WriteByte>:
#include "EEP_Interface.h"
#include "EEP_Private.h"
#include "EEP_Cfg.h"

void EEP_WriteByte (u8 address , u8 value )
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <EEP_WriteByte+0x6>
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
     ca8:	89 83       	std	Y+1, r24	; 0x01
     caa:	6a 83       	std	Y+2, r22	; 0x02
	/* Send start */
	TWI_SendStartCondition();
     cac:	0e 94 c5 07 	call	0xf8a	; 0xf8a <TWI_SendStartCondition>
	/* Send SLA + W */
	TWI_MasterSendAdrres(EEP_DEVICE_ADDRESS , TWI_WRITE);
     cb0:	81 e5       	ldi	r24, 0x51	; 81
     cb2:	60 e0       	ldi	r22, 0x00	; 0
     cb4:	0e 94 19 08 	call	0x1032	; 0x1032 <TWI_MasterSendAdrres>
	/* Send address you want to write to  */
	TWI_MasterSendData(address);
     cb8:	89 81       	ldd	r24, Y+1	; 0x01
     cba:	0e 94 71 08 	call	0x10e2	; 0x10e2 <TWI_MasterSendData>
	/* Send data you want to write to  */
	TWI_MasterSendData(value);
     cbe:	8a 81       	ldd	r24, Y+2	; 0x02
     cc0:	0e 94 71 08 	call	0x10e2	; 0x10e2 <TWI_MasterSendData>
	/* Send stop */
	TWI_SendStopCondition();
     cc4:	0e 94 06 09 	call	0x120c	; 0x120c <TWI_SendStopCondition>
}
     cc8:	0f 90       	pop	r0
     cca:	0f 90       	pop	r0
     ccc:	cf 91       	pop	r28
     cce:	df 91       	pop	r29
     cd0:	08 95       	ret

00000cd2 <EEP_WriteBlock>:

void EEP_WriteBlock (u8 address , u8 *arr , u8 size )
{
     cd2:	df 93       	push	r29
     cd4:	cf 93       	push	r28
     cd6:	00 d0       	rcall	.+0      	; 0xcd8 <EEP_WriteBlock+0x6>
     cd8:	00 d0       	rcall	.+0      	; 0xcda <EEP_WriteBlock+0x8>
     cda:	0f 92       	push	r0
     cdc:	cd b7       	in	r28, 0x3d	; 61
     cde:	de b7       	in	r29, 0x3e	; 62
     ce0:	8a 83       	std	Y+2, r24	; 0x02
     ce2:	7c 83       	std	Y+4, r23	; 0x04
     ce4:	6b 83       	std	Y+3, r22	; 0x03
     ce6:	4d 83       	std	Y+5, r20	; 0x05
	/* Send start */
	TWI_SendStartCondition();
     ce8:	0e 94 c5 07 	call	0xf8a	; 0xf8a <TWI_SendStartCondition>
	/* Send SLA + W */
	TWI_MasterSendAdrres(EEP_DEVICE_ADDRESS , TWI_WRITE);
     cec:	81 e5       	ldi	r24, 0x51	; 81
     cee:	60 e0       	ldi	r22, 0x00	; 0
     cf0:	0e 94 19 08 	call	0x1032	; 0x1032 <TWI_MasterSendAdrres>
	/* Send address you want to write to  */
	TWI_MasterSendData(address);
     cf4:	8a 81       	ldd	r24, Y+2	; 0x02
     cf6:	0e 94 71 08 	call	0x10e2	; 0x10e2 <TWI_MasterSendData>
	/* Send data you want to write to  */
	for (u8 i = 0 ; i < size ; i++)
     cfa:	19 82       	std	Y+1, r1	; 0x01
     cfc:	0e c0       	rjmp	.+28     	; 0xd1a <EEP_WriteBlock+0x48>
	{
		TWI_MasterSendData(arr[i]);
     cfe:	89 81       	ldd	r24, Y+1	; 0x01
     d00:	28 2f       	mov	r18, r24
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	8b 81       	ldd	r24, Y+3	; 0x03
     d06:	9c 81       	ldd	r25, Y+4	; 0x04
     d08:	fc 01       	movw	r30, r24
     d0a:	e2 0f       	add	r30, r18
     d0c:	f3 1f       	adc	r31, r19
     d0e:	80 81       	ld	r24, Z
     d10:	0e 94 71 08 	call	0x10e2	; 0x10e2 <TWI_MasterSendData>
	/* Send SLA + W */
	TWI_MasterSendAdrres(EEP_DEVICE_ADDRESS , TWI_WRITE);
	/* Send address you want to write to  */
	TWI_MasterSendData(address);
	/* Send data you want to write to  */
	for (u8 i = 0 ; i < size ; i++)
     d14:	89 81       	ldd	r24, Y+1	; 0x01
     d16:	8f 5f       	subi	r24, 0xFF	; 255
     d18:	89 83       	std	Y+1, r24	; 0x01
     d1a:	99 81       	ldd	r25, Y+1	; 0x01
     d1c:	8d 81       	ldd	r24, Y+5	; 0x05
     d1e:	98 17       	cp	r25, r24
     d20:	70 f3       	brcs	.-36     	; 0xcfe <EEP_WriteBlock+0x2c>
	{
		TWI_MasterSendData(arr[i]);
	}
	/* Send stop */
	TWI_SendStopCondition();
     d22:	0e 94 06 09 	call	0x120c	; 0x120c <TWI_SendStopCondition>
}
     d26:	0f 90       	pop	r0
     d28:	0f 90       	pop	r0
     d2a:	0f 90       	pop	r0
     d2c:	0f 90       	pop	r0
     d2e:	0f 90       	pop	r0
     d30:	cf 91       	pop	r28
     d32:	df 91       	pop	r29
     d34:	08 95       	ret

00000d36 <EEP_ReadByte>:

void EEP_ReadByte (u8 address , u8 *value )
{
     d36:	df 93       	push	r29
     d38:	cf 93       	push	r28
     d3a:	00 d0       	rcall	.+0      	; 0xd3c <EEP_ReadByte+0x6>
     d3c:	0f 92       	push	r0
     d3e:	cd b7       	in	r28, 0x3d	; 61
     d40:	de b7       	in	r29, 0x3e	; 62
     d42:	89 83       	std	Y+1, r24	; 0x01
     d44:	7b 83       	std	Y+3, r23	; 0x03
     d46:	6a 83       	std	Y+2, r22	; 0x02
	/* Send start */
	TWI_SendStartCondition();
     d48:	0e 94 c5 07 	call	0xf8a	; 0xf8a <TWI_SendStartCondition>
	/* Send SLA + W */
	TWI_MasterSendAdrres(EEP_DEVICE_ADDRESS , TWI_WRITE);
     d4c:	81 e5       	ldi	r24, 0x51	; 81
     d4e:	60 e0       	ldi	r22, 0x00	; 0
     d50:	0e 94 19 08 	call	0x1032	; 0x1032 <TWI_MasterSendAdrres>
	/* Send address you want to read from  */
	TWI_MasterSendData(address);
     d54:	89 81       	ldd	r24, Y+1	; 0x01
     d56:	0e 94 71 08 	call	0x10e2	; 0x10e2 <TWI_MasterSendData>
	/* Send repeated start */
	TWI_SendStartCondition();
     d5a:	0e 94 c5 07 	call	0xf8a	; 0xf8a <TWI_SendStartCondition>
	/* Send SLA + R */
	TWI_MasterSendAdrres(EEP_DEVICE_ADDRESS , TWI_READ);
     d5e:	81 e5       	ldi	r24, 0x51	; 81
     d60:	61 e0       	ldi	r22, 0x01	; 1
     d62:	0e 94 19 08 	call	0x1032	; 0x1032 <TWI_MasterSendAdrres>
	/* Read data */
	TWI_MasterReadDataWithNack(value);
     d66:	8a 81       	ldd	r24, Y+2	; 0x02
     d68:	9b 81       	ldd	r25, Y+3	; 0x03
     d6a:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <TWI_MasterReadDataWithNack>
	/* Send stop */
	TWI_SendStopCondition();
     d6e:	0e 94 06 09 	call	0x120c	; 0x120c <TWI_SendStopCondition>
}
     d72:	0f 90       	pop	r0
     d74:	0f 90       	pop	r0
     d76:	0f 90       	pop	r0
     d78:	cf 91       	pop	r28
     d7a:	df 91       	pop	r29
     d7c:	08 95       	ret

00000d7e <EEP_ReadBlock>:

void EEP_ReadBlock (u8 address , u8 *arr , u8 size)
{
     d7e:	df 93       	push	r29
     d80:	cf 93       	push	r28
     d82:	00 d0       	rcall	.+0      	; 0xd84 <EEP_ReadBlock+0x6>
     d84:	00 d0       	rcall	.+0      	; 0xd86 <EEP_ReadBlock+0x8>
     d86:	0f 92       	push	r0
     d88:	cd b7       	in	r28, 0x3d	; 61
     d8a:	de b7       	in	r29, 0x3e	; 62
     d8c:	8a 83       	std	Y+2, r24	; 0x02
     d8e:	7c 83       	std	Y+4, r23	; 0x04
     d90:	6b 83       	std	Y+3, r22	; 0x03
     d92:	4d 83       	std	Y+5, r20	; 0x05
	/* Send start */
	TWI_SendStartCondition();
     d94:	0e 94 c5 07 	call	0xf8a	; 0xf8a <TWI_SendStartCondition>
	/* Send SLA + W */
	TWI_MasterSendAdrres(EEP_DEVICE_ADDRESS , TWI_WRITE);
     d98:	81 e5       	ldi	r24, 0x51	; 81
     d9a:	60 e0       	ldi	r22, 0x00	; 0
     d9c:	0e 94 19 08 	call	0x1032	; 0x1032 <TWI_MasterSendAdrres>
	/* Send address you want to read from  */
	TWI_MasterSendData(address);
     da0:	8a 81       	ldd	r24, Y+2	; 0x02
     da2:	0e 94 71 08 	call	0x10e2	; 0x10e2 <TWI_MasterSendData>
	/* Send repeated start */
	TWI_SendStartCondition();
     da6:	0e 94 c5 07 	call	0xf8a	; 0xf8a <TWI_SendStartCondition>
	/* Send SLA + R */
	TWI_MasterSendAdrres(EEP_DEVICE_ADDRESS , TWI_READ);
     daa:	81 e5       	ldi	r24, 0x51	; 81
     dac:	61 e0       	ldi	r22, 0x01	; 1
     dae:	0e 94 19 08 	call	0x1032	; 0x1032 <TWI_MasterSendAdrres>

	/* Read data */
	for (u8 i = 0 ; i < size-1 ; i++)
     db2:	19 82       	std	Y+1, r1	; 0x01
     db4:	0c c0       	rjmp	.+24     	; 0xdce <EEP_ReadBlock+0x50>
	{
		TWI_MasterReadDataWithAck(&arr[i]);
     db6:	89 81       	ldd	r24, Y+1	; 0x01
     db8:	28 2f       	mov	r18, r24
     dba:	30 e0       	ldi	r19, 0x00	; 0
     dbc:	8b 81       	ldd	r24, Y+3	; 0x03
     dbe:	9c 81       	ldd	r25, Y+4	; 0x04
     dc0:	82 0f       	add	r24, r18
     dc2:	93 1f       	adc	r25, r19
     dc4:	0e 94 9a 08 	call	0x1134	; 0x1134 <TWI_MasterReadDataWithAck>
	TWI_SendStartCondition();
	/* Send SLA + R */
	TWI_MasterSendAdrres(EEP_DEVICE_ADDRESS , TWI_READ);

	/* Read data */
	for (u8 i = 0 ; i < size-1 ; i++)
     dc8:	89 81       	ldd	r24, Y+1	; 0x01
     dca:	8f 5f       	subi	r24, 0xFF	; 255
     dcc:	89 83       	std	Y+1, r24	; 0x01
     dce:	89 81       	ldd	r24, Y+1	; 0x01
     dd0:	28 2f       	mov	r18, r24
     dd2:	30 e0       	ldi	r19, 0x00	; 0
     dd4:	8d 81       	ldd	r24, Y+5	; 0x05
     dd6:	88 2f       	mov	r24, r24
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	01 97       	sbiw	r24, 0x01	; 1
     ddc:	28 17       	cp	r18, r24
     dde:	39 07       	cpc	r19, r25
     de0:	54 f3       	brlt	.-44     	; 0xdb6 <EEP_ReadBlock+0x38>
	{
		TWI_MasterReadDataWithAck(&arr[i]);
	}

	/* Read last byte */
	TWI_MasterReadDataWithNack(&arr[size-1]);
     de2:	8d 81       	ldd	r24, Y+5	; 0x05
     de4:	88 2f       	mov	r24, r24
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	9c 01       	movw	r18, r24
     dea:	21 50       	subi	r18, 0x01	; 1
     dec:	30 40       	sbci	r19, 0x00	; 0
     dee:	8b 81       	ldd	r24, Y+3	; 0x03
     df0:	9c 81       	ldd	r25, Y+4	; 0x04
     df2:	82 0f       	add	r24, r18
     df4:	93 1f       	adc	r25, r19
     df6:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <TWI_MasterReadDataWithNack>

	/* Send stop */
	TWI_SendStopCondition();
     dfa:	0e 94 06 09 	call	0x120c	; 0x120c <TWI_SendStopCondition>
}
     dfe:	0f 90       	pop	r0
     e00:	0f 90       	pop	r0
     e02:	0f 90       	pop	r0
     e04:	0f 90       	pop	r0
     e06:	0f 90       	pop	r0
     e08:	cf 91       	pop	r28
     e0a:	df 91       	pop	r29
     e0c:	08 95       	ret

00000e0e <SPI_VidMasterInit>:
#include "BIT_MATHS.h"
#include "SPI_private.h"
#include "SPI_interface.h"

void SPI_VidMasterInit(void)
{
     e0e:	df 93       	push	r29
     e10:	cf 93       	push	r28
     e12:	cd b7       	in	r28, 0x3d	; 61
     e14:	de b7       	in	r29, 0x3e	; 62
	//select clk pol=0;clk ph=0
	CLR_BIT(SPI_SPCR,SPCR_CPHA);
     e16:	ad e2       	ldi	r26, 0x2D	; 45
     e18:	b0 e0       	ldi	r27, 0x00	; 0
     e1a:	ed e2       	ldi	r30, 0x2D	; 45
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
     e1e:	80 81       	ld	r24, Z
     e20:	8b 7f       	andi	r24, 0xFB	; 251
     e22:	8c 93       	st	X, r24
	CLR_BIT(SPI_SPCR,SPCR_CPOL);
     e24:	ad e2       	ldi	r26, 0x2D	; 45
     e26:	b0 e0       	ldi	r27, 0x00	; 0
     e28:	ed e2       	ldi	r30, 0x2D	; 45
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	80 81       	ld	r24, Z
     e2e:	87 7f       	andi	r24, 0xF7	; 247
     e30:	8c 93       	st	X, r24

	//select master mode
	SET_BIT(SPI_SPCR,SPCR_MSTR);
     e32:	ad e2       	ldi	r26, 0x2D	; 45
     e34:	b0 e0       	ldi	r27, 0x00	; 0
     e36:	ed e2       	ldi	r30, 0x2D	; 45
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	80 81       	ld	r24, Z
     e3c:	80 61       	ori	r24, 0x10	; 16
     e3e:	8c 93       	st	X, r24

	//set data order MSB
	CLR_BIT(SPI_SPSR,SPSR_SPI2X);
     e40:	ae e2       	ldi	r26, 0x2E	; 46
     e42:	b0 e0       	ldi	r27, 0x00	; 0
     e44:	ee e2       	ldi	r30, 0x2E	; 46
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	80 81       	ld	r24, Z
     e4a:	8e 7f       	andi	r24, 0xFE	; 254
     e4c:	8c 93       	st	X, r24
	CLR_BIT(SPI_SPCR,SPCR_SPR1);
     e4e:	ad e2       	ldi	r26, 0x2D	; 45
     e50:	b0 e0       	ldi	r27, 0x00	; 0
     e52:	ed e2       	ldi	r30, 0x2D	; 45
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	80 81       	ld	r24, Z
     e58:	8d 7f       	andi	r24, 0xFD	; 253
     e5a:	8c 93       	st	X, r24
	CLR_BIT(SPI_SPCR,SPCR_SPR0);
     e5c:	ad e2       	ldi	r26, 0x2D	; 45
     e5e:	b0 e0       	ldi	r27, 0x00	; 0
     e60:	ed e2       	ldi	r30, 0x2D	; 45
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	80 81       	ld	r24, Z
     e66:	8e 7f       	andi	r24, 0xFE	; 254
     e68:	8c 93       	st	X, r24

	//enable SPI
	SET_BIT(SPI_SPCR,SPCR_SPE);
     e6a:	ad e2       	ldi	r26, 0x2D	; 45
     e6c:	b0 e0       	ldi	r27, 0x00	; 0
     e6e:	ed e2       	ldi	r30, 0x2D	; 45
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	80 81       	ld	r24, Z
     e74:	80 64       	ori	r24, 0x40	; 64
     e76:	8c 93       	st	X, r24

}
     e78:	cf 91       	pop	r28
     e7a:	df 91       	pop	r29
     e7c:	08 95       	ret

00000e7e <SPI_VidSlaveInit>:
void SPI_VidSlaveInit(void)
{
     e7e:	df 93       	push	r29
     e80:	cf 93       	push	r28
     e82:	cd b7       	in	r28, 0x3d	; 61
     e84:	de b7       	in	r29, 0x3e	; 62
	//select slave mode
	CLR_BIT(SPI_SPCR,SPCR_MSTR);
     e86:	ad e2       	ldi	r26, 0x2D	; 45
     e88:	b0 e0       	ldi	r27, 0x00	; 0
     e8a:	ed e2       	ldi	r30, 0x2D	; 45
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	80 81       	ld	r24, Z
     e90:	8f 7e       	andi	r24, 0xEF	; 239
     e92:	8c 93       	st	X, r24

	//set data order MSB
	CLR_BIT(SPI_SPCR,SPCR_DORD);
     e94:	ad e2       	ldi	r26, 0x2D	; 45
     e96:	b0 e0       	ldi	r27, 0x00	; 0
     e98:	ed e2       	ldi	r30, 0x2D	; 45
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	80 81       	ld	r24, Z
     e9e:	8f 7d       	andi	r24, 0xDF	; 223
     ea0:	8c 93       	st	X, r24

	//enable SPI
	SET_BIT(SPI_SPCR,SPCR_SPE);
     ea2:	ad e2       	ldi	r26, 0x2D	; 45
     ea4:	b0 e0       	ldi	r27, 0x00	; 0
     ea6:	ed e2       	ldi	r30, 0x2D	; 45
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	80 81       	ld	r24, Z
     eac:	80 64       	ori	r24, 0x40	; 64
     eae:	8c 93       	st	X, r24
}
     eb0:	cf 91       	pop	r28
     eb2:	df 91       	pop	r29
     eb4:	08 95       	ret

00000eb6 <SPI_U8TranSceive>:
u8 SPI_U8TranSceive(u8 Copy_U8Data)
{
     eb6:	df 93       	push	r29
     eb8:	cf 93       	push	r28
     eba:	0f 92       	push	r0
     ebc:	cd b7       	in	r28, 0x3d	; 61
     ebe:	de b7       	in	r29, 0x3e	; 62
     ec0:	89 83       	std	Y+1, r24	; 0x01
	//send data
	SPI_SPDR=Copy_U8Data;
     ec2:	ef e2       	ldi	r30, 0x2F	; 47
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	89 81       	ldd	r24, Y+1	; 0x01
     ec8:	80 83       	st	Z, r24

	//flag check
	while (GET_BIT(SPI_SPSR,SPSR_SPIF)==0);
     eca:	ee e2       	ldi	r30, 0x2E	; 46
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	80 81       	ld	r24, Z
     ed0:	88 23       	and	r24, r24
     ed2:	dc f7       	brge	.-10     	; 0xeca <SPI_U8TranSceive+0x14>
	return SPI_SPDR;
     ed4:	ef e2       	ldi	r30, 0x2F	; 47
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	80 81       	ld	r24, Z
}
     eda:	0f 90       	pop	r0
     edc:	cf 91       	pop	r28
     ede:	df 91       	pop	r29
     ee0:	08 95       	ret

00000ee2 <TWI_voidInitMaster>:
#include "TWI_Private.h"
#include "TWI_Cfg.h"


void TWI_voidInitMaster(u8 Cpy_u8Address)
{
     ee2:	df 93       	push	r29
     ee4:	cf 93       	push	r28
     ee6:	0f 92       	push	r0
     ee8:	cd b7       	in	r28, 0x3d	; 61
     eea:	de b7       	in	r29, 0x3e	; 62
     eec:	89 83       	std	Y+1, r24	; 0x01
	/* Set clock frequency to 400 kbps 
	 * With 8 Mhz Fos  
	 * TWPS = 0 */
	TWBR = 2 ;
     eee:	e0 e2       	ldi	r30, 0x20	; 32
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	82 e0       	ldi	r24, 0x02	; 2
     ef4:	80 83       	st	Z, r24
	CLR_BIT(TWSR , TWSR_TWPS1);
     ef6:	a1 e2       	ldi	r26, 0x21	; 33
     ef8:	b0 e0       	ldi	r27, 0x00	; 0
     efa:	e1 e2       	ldi	r30, 0x21	; 33
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	80 81       	ld	r24, Z
     f00:	8d 7f       	andi	r24, 0xFD	; 253
     f02:	8c 93       	st	X, r24
	CLR_BIT(TWSR , TWSR_TWPS0);
     f04:	a1 e2       	ldi	r26, 0x21	; 33
     f06:	b0 e0       	ldi	r27, 0x00	; 0
     f08:	e1 e2       	ldi	r30, 0x21	; 33
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	80 81       	ld	r24, Z
     f0e:	8e 7f       	andi	r24, 0xFE	; 254
     f10:	8c 93       	st	X, r24
	
	/* Set the address */
	if (Cpy_u8Address)
     f12:	89 81       	ldd	r24, Y+1	; 0x01
     f14:	88 23       	and	r24, r24
     f16:	69 f0       	breq	.+26     	; 0xf32 <TWI_voidInitMaster+0x50>
	{
		TWAR |= (Cpy_u8Address << TWAR_TWA0);
     f18:	a2 e2       	ldi	r26, 0x22	; 34
     f1a:	b0 e0       	ldi	r27, 0x00	; 0
     f1c:	e2 e2       	ldi	r30, 0x22	; 34
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	80 81       	ld	r24, Z
     f22:	28 2f       	mov	r18, r24
     f24:	89 81       	ldd	r24, Y+1	; 0x01
     f26:	88 2f       	mov	r24, r24
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	88 0f       	add	r24, r24
     f2c:	99 1f       	adc	r25, r25
     f2e:	82 2b       	or	r24, r18
     f30:	8c 93       	st	X, r24
	}
	
	/* Enable TWI */
	SET_BIT(TWCR , TWCR_TWEN);
     f32:	a6 e5       	ldi	r26, 0x56	; 86
     f34:	b0 e0       	ldi	r27, 0x00	; 0
     f36:	e6 e5       	ldi	r30, 0x56	; 86
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	84 60       	ori	r24, 0x04	; 4
     f3e:	8c 93       	st	X, r24
}
     f40:	0f 90       	pop	r0
     f42:	cf 91       	pop	r28
     f44:	df 91       	pop	r29
     f46:	08 95       	ret

00000f48 <TWI_voidInitSlave>:

void TWI_voidInitSlave(u8 Cpy_u8Address)
{
     f48:	df 93       	push	r29
     f4a:	cf 93       	push	r28
     f4c:	0f 92       	push	r0
     f4e:	cd b7       	in	r28, 0x3d	; 61
     f50:	de b7       	in	r29, 0x3e	; 62
     f52:	89 83       	std	Y+1, r24	; 0x01
	/* Set the address */
	if (Cpy_u8Address)
     f54:	89 81       	ldd	r24, Y+1	; 0x01
     f56:	88 23       	and	r24, r24
     f58:	69 f0       	breq	.+26     	; 0xf74 <TWI_voidInitSlave+0x2c>
	{
		TWAR |= (Cpy_u8Address << TWAR_TWA0);
     f5a:	a2 e2       	ldi	r26, 0x22	; 34
     f5c:	b0 e0       	ldi	r27, 0x00	; 0
     f5e:	e2 e2       	ldi	r30, 0x22	; 34
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	80 81       	ld	r24, Z
     f64:	28 2f       	mov	r18, r24
     f66:	89 81       	ldd	r24, Y+1	; 0x01
     f68:	88 2f       	mov	r24, r24
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	88 0f       	add	r24, r24
     f6e:	99 1f       	adc	r25, r25
     f70:	82 2b       	or	r24, r18
     f72:	8c 93       	st	X, r24
	}

	/* Enable TWI */
	SET_BIT(TWCR , TWCR_TWEN);
     f74:	a6 e5       	ldi	r26, 0x56	; 86
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	e6 e5       	ldi	r30, 0x56	; 86
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	84 60       	ori	r24, 0x04	; 4
     f80:	8c 93       	st	X, r24
}
     f82:	0f 90       	pop	r0
     f84:	cf 91       	pop	r28
     f86:	df 91       	pop	r29
     f88:	08 95       	ret

00000f8a <TWI_SendStartCondition>:

TWI_ErrState_t TWI_SendStartCondition (void)
{
     f8a:	df 93       	push	r29
     f8c:	cf 93       	push	r28
     f8e:	0f 92       	push	r0
     f90:	cd b7       	in	r28, 0x3d	; 61
     f92:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrState_t local_err = NoError ;
     f94:	19 82       	std	Y+1, r1	; 0x01
	
	/* Set start condition bit */
	SET_BIT(TWCR , TWCR_TWSTA);
     f96:	a6 e5       	ldi	r26, 0x56	; 86
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	e6 e5       	ldi	r30, 0x56	; 86
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	80 62       	ori	r24, 0x20	; 32
     fa2:	8c 93       	st	X, r24
	
	/* Clear flag so TWI start its job */
	SET_BIT(TWCR , TWCR_TWINT);
     fa4:	a6 e5       	ldi	r26, 0x56	; 86
     fa6:	b0 e0       	ldi	r27, 0x00	; 0
     fa8:	e6 e5       	ldi	r30, 0x56	; 86
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	80 81       	ld	r24, Z
     fae:	80 68       	ori	r24, 0x80	; 128
     fb0:	8c 93       	st	X, r24
	
	/* Wait till start condition is sent */
	while (GET_BIT(TWCR , TWCR_TWINT)==0);
     fb2:	e6 e5       	ldi	r30, 0x56	; 86
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	80 81       	ld	r24, Z
     fb8:	88 23       	and	r24, r24
     fba:	dc f7       	brge	.-10     	; 0xfb2 <TWI_SendStartCondition+0x28>
	
	/* Check status register */
	if ((TWSR & TWSR_MASK ) != START_ACK )
     fbc:	e1 e2       	ldi	r30, 0x21	; 33
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z
     fc2:	88 2f       	mov	r24, r24
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	88 7f       	andi	r24, 0xF8	; 248
     fc8:	90 70       	andi	r25, 0x00	; 0
     fca:	88 30       	cpi	r24, 0x08	; 8
     fcc:	91 05       	cpc	r25, r1
     fce:	11 f0       	breq	.+4      	; 0xfd4 <TWI_SendStartCondition+0x4a>
	{
		local_err = StartConditionErr ;
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	89 83       	std	Y+1, r24	; 0x01
	}
	else 
	{

	}
	return local_err ;
     fd4:	89 81       	ldd	r24, Y+1	; 0x01
}
     fd6:	0f 90       	pop	r0
     fd8:	cf 91       	pop	r28
     fda:	df 91       	pop	r29
     fdc:	08 95       	ret

00000fde <TWI_SendRepeatedStart>:

TWI_ErrState_t TWI_SendRepeatedStart (void)
{
     fde:	df 93       	push	r29
     fe0:	cf 93       	push	r28
     fe2:	0f 92       	push	r0
     fe4:	cd b7       	in	r28, 0x3d	; 61
     fe6:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrState_t local_err = NoError ;
     fe8:	19 82       	std	Y+1, r1	; 0x01
	
	/* Set start condition bit */
	SET_BIT(TWCR , TWCR_TWSTA);
     fea:	a6 e5       	ldi	r26, 0x56	; 86
     fec:	b0 e0       	ldi	r27, 0x00	; 0
     fee:	e6 e5       	ldi	r30, 0x56	; 86
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	80 81       	ld	r24, Z
     ff4:	80 62       	ori	r24, 0x20	; 32
     ff6:	8c 93       	st	X, r24
	
	/* Clear flag so TWI start its job */
	SET_BIT(TWCR , TWCR_TWINT);
     ff8:	a6 e5       	ldi	r26, 0x56	; 86
     ffa:	b0 e0       	ldi	r27, 0x00	; 0
     ffc:	e6 e5       	ldi	r30, 0x56	; 86
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	80 81       	ld	r24, Z
    1002:	80 68       	ori	r24, 0x80	; 128
    1004:	8c 93       	st	X, r24
	
	/* Wait till start condition is sent */
	while (GET_BIT(TWCR , TWCR_TWINT)==0);
    1006:	e6 e5       	ldi	r30, 0x56	; 86
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	88 23       	and	r24, r24
    100e:	dc f7       	brge	.-10     	; 0x1006 <TWI_SendRepeatedStart+0x28>
	
	/* Check status register */
	if ((TWSR & TWSR_MASK ) != START_ACK )
    1010:	e1 e2       	ldi	r30, 0x21	; 33
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	80 81       	ld	r24, Z
    1016:	88 2f       	mov	r24, r24
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	88 7f       	andi	r24, 0xF8	; 248
    101c:	90 70       	andi	r25, 0x00	; 0
    101e:	88 30       	cpi	r24, 0x08	; 8
    1020:	91 05       	cpc	r25, r1
    1022:	11 f0       	breq	.+4      	; 0x1028 <TWI_SendRepeatedStart+0x4a>
	{
		local_err = RepStartErr ;
    1024:	82 e0       	ldi	r24, 0x02	; 2
    1026:	89 83       	std	Y+1, r24	; 0x01
	}
	else 
	{

	}
	return local_err ;
    1028:	89 81       	ldd	r24, Y+1	; 0x01
}
    102a:	0f 90       	pop	r0
    102c:	cf 91       	pop	r28
    102e:	df 91       	pop	r29
    1030:	08 95       	ret

00001032 <TWI_MasterSendAdrres>:

TWI_ErrState_t TWI_MasterSendAdrres (u8 Cpy_u8Adress ,u8 Cpy_u8Operation)
{
    1032:	df 93       	push	r29
    1034:	cf 93       	push	r28
    1036:	00 d0       	rcall	.+0      	; 0x1038 <TWI_MasterSendAdrres+0x6>
    1038:	00 d0       	rcall	.+0      	; 0x103a <TWI_MasterSendAdrres+0x8>
    103a:	cd b7       	in	r28, 0x3d	; 61
    103c:	de b7       	in	r29, 0x3e	; 62
    103e:	8b 83       	std	Y+3, r24	; 0x03
    1040:	6c 83       	std	Y+4, r22	; 0x04
	TWI_ErrState_t local_err = NoError ;
    1042:	1a 82       	std	Y+2, r1	; 0x02
	u8 local_address ;

	if (Cpy_u8Operation == TWI_WRITE)
    1044:	8c 81       	ldd	r24, Y+4	; 0x04
    1046:	88 23       	and	r24, r24
    1048:	21 f4       	brne	.+8      	; 0x1052 <TWI_MasterSendAdrres+0x20>
	{
		local_address = ((Cpy_u8Adress << 1) | 0 );
    104a:	8b 81       	ldd	r24, Y+3	; 0x03
    104c:	88 0f       	add	r24, r24
    104e:	89 83       	std	Y+1, r24	; 0x01
    1050:	0a c0       	rjmp	.+20     	; 0x1066 <TWI_MasterSendAdrres+0x34>
	}
	else if (Cpy_u8Operation == TWI_READ)
    1052:	8c 81       	ldd	r24, Y+4	; 0x04
    1054:	81 30       	cpi	r24, 0x01	; 1
    1056:	39 f4       	brne	.+14     	; 0x1066 <TWI_MasterSendAdrres+0x34>
	{
		local_address = ((Cpy_u8Adress << 1) | 1 );
    1058:	8b 81       	ldd	r24, Y+3	; 0x03
    105a:	88 2f       	mov	r24, r24
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	88 0f       	add	r24, r24
    1060:	99 1f       	adc	r25, r25
    1062:	81 60       	ori	r24, 0x01	; 1
    1064:	89 83       	std	Y+1, r24	; 0x01
	{
		
	}
	
	/* Write address to data register */
	TWDR = local_address ;
    1066:	e3 e2       	ldi	r30, 0x23	; 35
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	89 81       	ldd	r24, Y+1	; 0x01
    106c:	80 83       	st	Z, r24
	
	/* Clear start condition */
	CLR_BIT(TWCR , TWCR_TWSTA);
    106e:	a6 e5       	ldi	r26, 0x56	; 86
    1070:	b0 e0       	ldi	r27, 0x00	; 0
    1072:	e6 e5       	ldi	r30, 0x56	; 86
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	80 81       	ld	r24, Z
    1078:	8f 7d       	andi	r24, 0xDF	; 223
    107a:	8c 93       	st	X, r24

	/* Clear flag so TWI start its job */
	SET_BIT(TWCR , TWCR_TWINT);
    107c:	a6 e5       	ldi	r26, 0x56	; 86
    107e:	b0 e0       	ldi	r27, 0x00	; 0
    1080:	e6 e5       	ldi	r30, 0x56	; 86
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	80 81       	ld	r24, Z
    1086:	80 68       	ori	r24, 0x80	; 128
    1088:	8c 93       	st	X, r24

	/* Wait till Job is finished */
	while (GET_BIT(TWCR , TWCR_TWINT)==0);
    108a:	e6 e5       	ldi	r30, 0x56	; 86
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	80 81       	ld	r24, Z
    1090:	88 23       	and	r24, r24
    1092:	dc f7       	brge	.-10     	; 0x108a <TWI_MasterSendAdrres+0x58>
	
	/* Check operation */
	if (((TWSR & TWSR_MASK ) != SLAVE_W_ACK ) 
    1094:	e1 e2       	ldi	r30, 0x21	; 33
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	80 81       	ld	r24, Z
    109a:	88 2f       	mov	r24, r24
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	88 7f       	andi	r24, 0xF8	; 248
    10a0:	90 70       	andi	r25, 0x00	; 0
    10a2:	88 31       	cpi	r24, 0x18	; 24
    10a4:	91 05       	cpc	r25, r1
    10a6:	31 f0       	breq	.+12     	; 0x10b4 <TWI_MasterSendAdrres+0x82>
    10a8:	8c 81       	ldd	r24, Y+4	; 0x04
    10aa:	88 23       	and	r24, r24
    10ac:	19 f4       	brne	.+6      	; 0x10b4 <TWI_MasterSendAdrres+0x82>
		&& (Cpy_u8Operation == TWI_WRITE))
	{
		local_err = AddressWriteNackErr ;
    10ae:	83 e0       	ldi	r24, 0x03	; 3
    10b0:	8a 83       	std	Y+2, r24	; 0x02
    10b2:	0f c0       	rjmp	.+30     	; 0x10d2 <TWI_MasterSendAdrres+0xa0>
	}
	else if ( ((TWSR & TWSR_MASK ) != SLAVE_R_ACK) 
    10b4:	e1 e2       	ldi	r30, 0x21	; 33
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	80 81       	ld	r24, Z
    10ba:	88 2f       	mov	r24, r24
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	88 7f       	andi	r24, 0xF8	; 248
    10c0:	90 70       	andi	r25, 0x00	; 0
    10c2:	80 34       	cpi	r24, 0x40	; 64
    10c4:	91 05       	cpc	r25, r1
    10c6:	29 f0       	breq	.+10     	; 0x10d2 <TWI_MasterSendAdrres+0xa0>
    10c8:	8c 81       	ldd	r24, Y+4	; 0x04
    10ca:	81 30       	cpi	r24, 0x01	; 1
    10cc:	11 f4       	brne	.+4      	; 0x10d2 <TWI_MasterSendAdrres+0xa0>
		       && (Cpy_u8Operation == TWI_READ))
	{
		local_err = AddressReadNackErr ;
    10ce:	84 e0       	ldi	r24, 0x04	; 4
    10d0:	8a 83       	std	Y+2, r24	; 0x02
	else 
	{
		
	}
	
	return local_err ;
    10d2:	8a 81       	ldd	r24, Y+2	; 0x02
}
    10d4:	0f 90       	pop	r0
    10d6:	0f 90       	pop	r0
    10d8:	0f 90       	pop	r0
    10da:	0f 90       	pop	r0
    10dc:	cf 91       	pop	r28
    10de:	df 91       	pop	r29
    10e0:	08 95       	ret

000010e2 <TWI_MasterSendData>:

TWI_ErrState_t TWI_MasterSendData (u8 Cpy_u8Data)
{
    10e2:	df 93       	push	r29
    10e4:	cf 93       	push	r28
    10e6:	00 d0       	rcall	.+0      	; 0x10e8 <TWI_MasterSendData+0x6>
    10e8:	cd b7       	in	r28, 0x3d	; 61
    10ea:	de b7       	in	r29, 0x3e	; 62
    10ec:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrState_t local_err = NoError ;
    10ee:	19 82       	std	Y+1, r1	; 0x01
	
	/* Write address to data register */
	TWDR = Cpy_u8Data ;
    10f0:	e3 e2       	ldi	r30, 0x23	; 35
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	8a 81       	ldd	r24, Y+2	; 0x02
    10f6:	80 83       	st	Z, r24

	/* Clear flag so TWI start its job */
	SET_BIT(TWCR , TWCR_TWINT);
    10f8:	a6 e5       	ldi	r26, 0x56	; 86
    10fa:	b0 e0       	ldi	r27, 0x00	; 0
    10fc:	e6 e5       	ldi	r30, 0x56	; 86
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	80 81       	ld	r24, Z
    1102:	80 68       	ori	r24, 0x80	; 128
    1104:	8c 93       	st	X, r24
	
	/* Wait till Job is finished */
	while (GET_BIT(TWCR , TWCR_TWINT)==0);
    1106:	e6 e5       	ldi	r30, 0x56	; 86
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	80 81       	ld	r24, Z
    110c:	88 23       	and	r24, r24
    110e:	dc f7       	brge	.-10     	; 0x1106 <TWI_MasterSendData+0x24>
	
	/* Check status register */
	if ((TWSR & TWSR_MASK ) != SLAVE_DATA_ACK )
    1110:	e1 e2       	ldi	r30, 0x21	; 33
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	88 2f       	mov	r24, r24
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	88 7f       	andi	r24, 0xF8	; 248
    111c:	90 70       	andi	r25, 0x00	; 0
    111e:	88 32       	cpi	r24, 0x28	; 40
    1120:	91 05       	cpc	r25, r1
    1122:	11 f0       	breq	.+4      	; 0x1128 <TWI_MasterSendData+0x46>
	{
		local_err = DataSlaveNackErr ;
    1124:	85 e0       	ldi	r24, 0x05	; 5
    1126:	89 83       	std	Y+1, r24	; 0x01
	}
	else 
	{
		
	}
	return local_err ;
    1128:	89 81       	ldd	r24, Y+1	; 0x01
}
    112a:	0f 90       	pop	r0
    112c:	0f 90       	pop	r0
    112e:	cf 91       	pop	r28
    1130:	df 91       	pop	r29
    1132:	08 95       	ret

00001134 <TWI_MasterReadDataWithAck>:

TWI_ErrState_t TWI_MasterReadDataWithAck (u8 *Cpy_u8Data)
{
    1134:	df 93       	push	r29
    1136:	cf 93       	push	r28
    1138:	00 d0       	rcall	.+0      	; 0x113a <TWI_MasterReadDataWithAck+0x6>
    113a:	0f 92       	push	r0
    113c:	cd b7       	in	r28, 0x3d	; 61
    113e:	de b7       	in	r29, 0x3e	; 62
    1140:	9b 83       	std	Y+3, r25	; 0x03
    1142:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrState_t local_err = NoError ;
    1144:	19 82       	std	Y+1, r1	; 0x01

	/* Enable ACK */
	SET_BIT(TWCR , TWCR_TWEA);
    1146:	a6 e5       	ldi	r26, 0x56	; 86
    1148:	b0 e0       	ldi	r27, 0x00	; 0
    114a:	e6 e5       	ldi	r30, 0x56	; 86
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	80 81       	ld	r24, Z
    1150:	80 64       	ori	r24, 0x40	; 64
    1152:	8c 93       	st	X, r24

	/* Clear flag so TWI start its job */
	SET_BIT(TWCR , TWCR_TWINT);
    1154:	a6 e5       	ldi	r26, 0x56	; 86
    1156:	b0 e0       	ldi	r27, 0x00	; 0
    1158:	e6 e5       	ldi	r30, 0x56	; 86
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	80 81       	ld	r24, Z
    115e:	80 68       	ori	r24, 0x80	; 128
    1160:	8c 93       	st	X, r24
	
	/* Wait till Job is finished */
	while (GET_BIT(TWCR , TWCR_TWINT)==0);
    1162:	e6 e5       	ldi	r30, 0x56	; 86
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	80 81       	ld	r24, Z
    1168:	88 23       	and	r24, r24
    116a:	dc f7       	brge	.-10     	; 0x1162 <TWI_MasterReadDataWithAck+0x2e>
	
	/* Check status register */
	if ((TWSR & TWSR_MASK ) != MASTER_R_DATA_ACK )
    116c:	e1 e2       	ldi	r30, 0x21	; 33
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	80 81       	ld	r24, Z
    1172:	88 2f       	mov	r24, r24
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	88 7f       	andi	r24, 0xF8	; 248
    1178:	90 70       	andi	r25, 0x00	; 0
    117a:	80 35       	cpi	r24, 0x50	; 80
    117c:	91 05       	cpc	r25, r1
    117e:	19 f0       	breq	.+6      	; 0x1186 <TWI_MasterReadDataWithAck+0x52>
	{
		local_err = DataRecNackErr ;
    1180:	86 e0       	ldi	r24, 0x06	; 6
    1182:	89 83       	std	Y+1, r24	; 0x01
    1184:	06 c0       	rjmp	.+12     	; 0x1192 <TWI_MasterReadDataWithAck+0x5e>

	}
	else 
	{
		/* Read the data */
		*Cpy_u8Data = TWDR ;
    1186:	e3 e2       	ldi	r30, 0x23	; 35
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	80 81       	ld	r24, Z
    118c:	ea 81       	ldd	r30, Y+2	; 0x02
    118e:	fb 81       	ldd	r31, Y+3	; 0x03
    1190:	80 83       	st	Z, r24
	}
	
	return local_err ;	
    1192:	89 81       	ldd	r24, Y+1	; 0x01
}
    1194:	0f 90       	pop	r0
    1196:	0f 90       	pop	r0
    1198:	0f 90       	pop	r0
    119a:	cf 91       	pop	r28
    119c:	df 91       	pop	r29
    119e:	08 95       	ret

000011a0 <TWI_MasterReadDataWithNack>:

TWI_ErrState_t TWI_MasterReadDataWithNack (u8 *Cpy_u8Data)
{
    11a0:	df 93       	push	r29
    11a2:	cf 93       	push	r28
    11a4:	00 d0       	rcall	.+0      	; 0x11a6 <TWI_MasterReadDataWithNack+0x6>
    11a6:	0f 92       	push	r0
    11a8:	cd b7       	in	r28, 0x3d	; 61
    11aa:	de b7       	in	r29, 0x3e	; 62
    11ac:	9b 83       	std	Y+3, r25	; 0x03
    11ae:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrState_t local_err = NoError ;
    11b0:	19 82       	std	Y+1, r1	; 0x01

	/* Disable ACK */
	CLR_BIT(TWCR , TWCR_TWEA);
    11b2:	a6 e5       	ldi	r26, 0x56	; 86
    11b4:	b0 e0       	ldi	r27, 0x00	; 0
    11b6:	e6 e5       	ldi	r30, 0x56	; 86
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	80 81       	ld	r24, Z
    11bc:	8f 7b       	andi	r24, 0xBF	; 191
    11be:	8c 93       	st	X, r24

	/* Clear flag so TWI start its job */
	SET_BIT(TWCR , TWCR_TWINT);
    11c0:	a6 e5       	ldi	r26, 0x56	; 86
    11c2:	b0 e0       	ldi	r27, 0x00	; 0
    11c4:	e6 e5       	ldi	r30, 0x56	; 86
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	80 81       	ld	r24, Z
    11ca:	80 68       	ori	r24, 0x80	; 128
    11cc:	8c 93       	st	X, r24

	/* Wait till Job is finished */
	while (GET_BIT(TWCR , TWCR_TWINT)==0);
    11ce:	e6 e5       	ldi	r30, 0x56	; 86
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	80 81       	ld	r24, Z
    11d4:	88 23       	and	r24, r24
    11d6:	dc f7       	brge	.-10     	; 0x11ce <TWI_MasterReadDataWithNack+0x2e>

	/* Check status register */
	if ((TWSR & TWSR_MASK ) != MASTER_R_DATA_NACK )
    11d8:	e1 e2       	ldi	r30, 0x21	; 33
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	80 81       	ld	r24, Z
    11de:	88 2f       	mov	r24, r24
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	88 7f       	andi	r24, 0xF8	; 248
    11e4:	90 70       	andi	r25, 0x00	; 0
    11e6:	88 35       	cpi	r24, 0x58	; 88
    11e8:	91 05       	cpc	r25, r1
    11ea:	19 f0       	breq	.+6      	; 0x11f2 <TWI_MasterReadDataWithNack+0x52>
	{
		local_err = DataRecNackErr;
    11ec:	86 e0       	ldi	r24, 0x06	; 6
    11ee:	89 83       	std	Y+1, r24	; 0x01
    11f0:	06 c0       	rjmp	.+12     	; 0x11fe <TWI_MasterReadDataWithNack+0x5e>
	}
	else
	{
		/* Read the data */
		*Cpy_u8Data = TWDR ;
    11f2:	e3 e2       	ldi	r30, 0x23	; 35
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	80 81       	ld	r24, Z
    11f8:	ea 81       	ldd	r30, Y+2	; 0x02
    11fa:	fb 81       	ldd	r31, Y+3	; 0x03
    11fc:	80 83       	st	Z, r24
	}

	return local_err ;
    11fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    1200:	0f 90       	pop	r0
    1202:	0f 90       	pop	r0
    1204:	0f 90       	pop	r0
    1206:	cf 91       	pop	r28
    1208:	df 91       	pop	r29
    120a:	08 95       	ret

0000120c <TWI_SendStopCondition>:

void TWI_SendStopCondition (void)
{
    120c:	df 93       	push	r29
    120e:	cf 93       	push	r28
    1210:	cd b7       	in	r28, 0x3d	; 61
    1212:	de b7       	in	r29, 0x3e	; 62
	/* Generate stop condition */
	SET_BIT(TWCR , TWCR_TWSTO);
    1214:	a6 e5       	ldi	r26, 0x56	; 86
    1216:	b0 e0       	ldi	r27, 0x00	; 0
    1218:	e6 e5       	ldi	r30, 0x56	; 86
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	80 81       	ld	r24, Z
    121e:	80 61       	ori	r24, 0x10	; 16
    1220:	8c 93       	st	X, r24
	
	/* Clear flag so TWI start its job */
	SET_BIT(TWCR , TWCR_TWINT);
    1222:	a6 e5       	ldi	r26, 0x56	; 86
    1224:	b0 e0       	ldi	r27, 0x00	; 0
    1226:	e6 e5       	ldi	r30, 0x56	; 86
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	80 81       	ld	r24, Z
    122c:	80 68       	ori	r24, 0x80	; 128
    122e:	8c 93       	st	X, r24
}
    1230:	cf 91       	pop	r28
    1232:	df 91       	pop	r29
    1234:	08 95       	ret

00001236 <TIMER0_Vid_init>:

static void(*TIMERS_pfTimer0OVF)(void) = NULL;
static void(*TIMERS_pfTimer0CTC)(void) = NULL;

void TIMER0_Vid_init(et_TIMER0MODE mode,et_TIMER0PRESSCALER presscaler)
{
    1236:	df 93       	push	r29
    1238:	cf 93       	push	r28
    123a:	00 d0       	rcall	.+0      	; 0x123c <TIMER0_Vid_init+0x6>
    123c:	00 d0       	rcall	.+0      	; 0x123e <TIMER0_Vid_init+0x8>
    123e:	cd b7       	in	r28, 0x3d	; 61
    1240:	de b7       	in	r29, 0x3e	; 62
    1242:	89 83       	std	Y+1, r24	; 0x01
    1244:	6a 83       	std	Y+2, r22	; 0x02
	//timer mode
	switch(mode)
    1246:	89 81       	ldd	r24, Y+1	; 0x01
    1248:	28 2f       	mov	r18, r24
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	3c 83       	std	Y+4, r19	; 0x04
    124e:	2b 83       	std	Y+3, r18	; 0x03
    1250:	8b 81       	ldd	r24, Y+3	; 0x03
    1252:	9c 81       	ldd	r25, Y+4	; 0x04
    1254:	81 30       	cpi	r24, 0x01	; 1
    1256:	91 05       	cpc	r25, r1
    1258:	09 f4       	brne	.+2      	; 0x125c <TIMER0_Vid_init+0x26>
    125a:	42 c0       	rjmp	.+132    	; 0x12e0 <TIMER0_Vid_init+0xaa>
    125c:	2b 81       	ldd	r18, Y+3	; 0x03
    125e:	3c 81       	ldd	r19, Y+4	; 0x04
    1260:	22 30       	cpi	r18, 0x02	; 2
    1262:	31 05       	cpc	r19, r1
    1264:	2c f4       	brge	.+10     	; 0x1270 <TIMER0_Vid_init+0x3a>
    1266:	8b 81       	ldd	r24, Y+3	; 0x03
    1268:	9c 81       	ldd	r25, Y+4	; 0x04
    126a:	00 97       	sbiw	r24, 0x00	; 0
    126c:	61 f0       	breq	.+24     	; 0x1286 <TIMER0_Vid_init+0x50>
    126e:	46 c0       	rjmp	.+140    	; 0x12fc <TIMER0_Vid_init+0xc6>
    1270:	2b 81       	ldd	r18, Y+3	; 0x03
    1272:	3c 81       	ldd	r19, Y+4	; 0x04
    1274:	22 30       	cpi	r18, 0x02	; 2
    1276:	31 05       	cpc	r19, r1
    1278:	a9 f0       	breq	.+42     	; 0x12a4 <TIMER0_Vid_init+0x6e>
    127a:	8b 81       	ldd	r24, Y+3	; 0x03
    127c:	9c 81       	ldd	r25, Y+4	; 0x04
    127e:	83 30       	cpi	r24, 0x03	; 3
    1280:	91 05       	cpc	r25, r1
    1282:	f9 f0       	breq	.+62     	; 0x12c2 <TIMER0_Vid_init+0x8c>
    1284:	3b c0       	rjmp	.+118    	; 0x12fc <TIMER0_Vid_init+0xc6>
	{
	case TIMER0_NORMAL_MODE:
		CLR_BIT(TCCR0,TCCR0_WGM00);
    1286:	a3 e5       	ldi	r26, 0x53	; 83
    1288:	b0 e0       	ldi	r27, 0x00	; 0
    128a:	e3 e5       	ldi	r30, 0x53	; 83
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	8f 7b       	andi	r24, 0xBF	; 191
    1292:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,TCCR0_WGM01);
    1294:	a3 e5       	ldi	r26, 0x53	; 83
    1296:	b0 e0       	ldi	r27, 0x00	; 0
    1298:	e3 e5       	ldi	r30, 0x53	; 83
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	80 81       	ld	r24, Z
    129e:	87 7f       	andi	r24, 0xF7	; 247
    12a0:	8c 93       	st	X, r24
    12a2:	2c c0       	rjmp	.+88     	; 0x12fc <TIMER0_Vid_init+0xc6>
		break;
	case TIMER0_CTC_MODE:
		CLR_BIT(TCCR0,TCCR0_WGM00);
    12a4:	a3 e5       	ldi	r26, 0x53	; 83
    12a6:	b0 e0       	ldi	r27, 0x00	; 0
    12a8:	e3 e5       	ldi	r30, 0x53	; 83
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	80 81       	ld	r24, Z
    12ae:	8f 7b       	andi	r24, 0xBF	; 191
    12b0:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_WGM01);
    12b2:	a3 e5       	ldi	r26, 0x53	; 83
    12b4:	b0 e0       	ldi	r27, 0x00	; 0
    12b6:	e3 e5       	ldi	r30, 0x53	; 83
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	80 81       	ld	r24, Z
    12bc:	88 60       	ori	r24, 0x08	; 8
    12be:	8c 93       	st	X, r24
    12c0:	1d c0       	rjmp	.+58     	; 0x12fc <TIMER0_Vid_init+0xc6>
		break;
	case TIMER0_FASTPWM_MODE:
		SET_BIT(TCCR0,TCCR0_WGM00);
    12c2:	a3 e5       	ldi	r26, 0x53	; 83
    12c4:	b0 e0       	ldi	r27, 0x00	; 0
    12c6:	e3 e5       	ldi	r30, 0x53	; 83
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	80 81       	ld	r24, Z
    12cc:	80 64       	ori	r24, 0x40	; 64
    12ce:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_WGM01);
    12d0:	a3 e5       	ldi	r26, 0x53	; 83
    12d2:	b0 e0       	ldi	r27, 0x00	; 0
    12d4:	e3 e5       	ldi	r30, 0x53	; 83
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	80 81       	ld	r24, Z
    12da:	88 60       	ori	r24, 0x08	; 8
    12dc:	8c 93       	st	X, r24
    12de:	0e c0       	rjmp	.+28     	; 0x12fc <TIMER0_Vid_init+0xc6>
		break;
	case TIMER0_PHASECORRECT_MODE:
		SET_BIT(TCCR0,TCCR0_WGM00);
    12e0:	a3 e5       	ldi	r26, 0x53	; 83
    12e2:	b0 e0       	ldi	r27, 0x00	; 0
    12e4:	e3 e5       	ldi	r30, 0x53	; 83
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	80 81       	ld	r24, Z
    12ea:	80 64       	ori	r24, 0x40	; 64
    12ec:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,TCCR0_WGM01);
    12ee:	a3 e5       	ldi	r26, 0x53	; 83
    12f0:	b0 e0       	ldi	r27, 0x00	; 0
    12f2:	e3 e5       	ldi	r30, 0x53	; 83
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	80 81       	ld	r24, Z
    12f8:	87 7f       	andi	r24, 0xF7	; 247
    12fa:	8c 93       	st	X, r24
		break;
	}
	//presscaler
	TCCR0=TCCR0 & 0xf8; //0b11111000 3ashan at2aked en awel 3 bit b zero
    12fc:	a3 e5       	ldi	r26, 0x53	; 83
    12fe:	b0 e0       	ldi	r27, 0x00	; 0
    1300:	e3 e5       	ldi	r30, 0x53	; 83
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	80 81       	ld	r24, Z
    1306:	88 7f       	andi	r24, 0xF8	; 248
    1308:	8c 93       	st	X, r24
	TCCR0=TCCR0 | presscaler;
    130a:	a3 e5       	ldi	r26, 0x53	; 83
    130c:	b0 e0       	ldi	r27, 0x00	; 0
    130e:	e3 e5       	ldi	r30, 0x53	; 83
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	90 81       	ld	r25, Z
    1314:	8a 81       	ldd	r24, Y+2	; 0x02
    1316:	89 2b       	or	r24, r25
    1318:	8c 93       	st	X, r24

}
    131a:	0f 90       	pop	r0
    131c:	0f 90       	pop	r0
    131e:	0f 90       	pop	r0
    1320:	0f 90       	pop	r0
    1322:	cf 91       	pop	r28
    1324:	df 91       	pop	r29
    1326:	08 95       	ret

00001328 <TIMER0_Interrupt_Enable>:
void TIMER0_Interrupt_Enable()
{
    1328:	df 93       	push	r29
    132a:	cf 93       	push	r28
    132c:	cd b7       	in	r28, 0x3d	; 61
    132e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TIMSK_TOIE0);
    1330:	a9 e5       	ldi	r26, 0x59	; 89
    1332:	b0 e0       	ldi	r27, 0x00	; 0
    1334:	e9 e5       	ldi	r30, 0x59	; 89
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	80 81       	ld	r24, Z
    133a:	81 60       	ori	r24, 0x01	; 1
    133c:	8c 93       	st	X, r24
}
    133e:	cf 91       	pop	r28
    1340:	df 91       	pop	r29
    1342:	08 95       	ret

00001344 <TIMER0_Interrupt_Disable>:

void TIMER0_Interrupt_Disable()
{
    1344:	df 93       	push	r29
    1346:	cf 93       	push	r28
    1348:	cd b7       	in	r28, 0x3d	; 61
    134a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TIMSK_TOIE0);
    134c:	a9 e5       	ldi	r26, 0x59	; 89
    134e:	b0 e0       	ldi	r27, 0x00	; 0
    1350:	e9 e5       	ldi	r30, 0x59	; 89
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	80 81       	ld	r24, Z
    1356:	8e 7f       	andi	r24, 0xFE	; 254
    1358:	8c 93       	st	X, r24
}
    135a:	cf 91       	pop	r28
    135c:	df 91       	pop	r29
    135e:	08 95       	ret

00001360 <TIMER0_Vid_SetCompMatchValue>:

void TIMER0_Vid_SetCompMatchValue(u8 value)
{
    1360:	df 93       	push	r29
    1362:	cf 93       	push	r28
    1364:	0f 92       	push	r0
    1366:	cd b7       	in	r28, 0x3d	; 61
    1368:	de b7       	in	r29, 0x3e	; 62
    136a:	89 83       	std	Y+1, r24	; 0x01
	OCRO=value;
    136c:	ec e5       	ldi	r30, 0x5C	; 92
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	89 81       	ldd	r24, Y+1	; 0x01
    1372:	80 83       	st	Z, r24
}
    1374:	0f 90       	pop	r0
    1376:	cf 91       	pop	r28
    1378:	df 91       	pop	r29
    137a:	08 95       	ret

0000137c <TIMER0_Vid_SetFpwm_Mode>:
void TIMER0_Vid_SetFpwm_Mode(et_TIMER0PWM mode)
{
    137c:	df 93       	push	r29
    137e:	cf 93       	push	r28
    1380:	00 d0       	rcall	.+0      	; 0x1382 <TIMER0_Vid_SetFpwm_Mode+0x6>
    1382:	0f 92       	push	r0
    1384:	cd b7       	in	r28, 0x3d	; 61
    1386:	de b7       	in	r29, 0x3e	; 62
    1388:	89 83       	std	Y+1, r24	; 0x01
	switch(mode)
    138a:	89 81       	ldd	r24, Y+1	; 0x01
    138c:	28 2f       	mov	r18, r24
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	3b 83       	std	Y+3, r19	; 0x03
    1392:	2a 83       	std	Y+2, r18	; 0x02
    1394:	8a 81       	ldd	r24, Y+2	; 0x02
    1396:	9b 81       	ldd	r25, Y+3	; 0x03
    1398:	00 97       	sbiw	r24, 0x00	; 0
    139a:	31 f0       	breq	.+12     	; 0x13a8 <TIMER0_Vid_SetFpwm_Mode+0x2c>
    139c:	2a 81       	ldd	r18, Y+2	; 0x02
    139e:	3b 81       	ldd	r19, Y+3	; 0x03
    13a0:	21 30       	cpi	r18, 0x01	; 1
    13a2:	31 05       	cpc	r19, r1
    13a4:	81 f0       	breq	.+32     	; 0x13c6 <TIMER0_Vid_SetFpwm_Mode+0x4a>
    13a6:	1d c0       	rjmp	.+58     	; 0x13e2 <TIMER0_Vid_SetFpwm_Mode+0x66>
	{
	case inverted:
		SET_BIT(TCCR0,TCCR0_COM01);
    13a8:	a3 e5       	ldi	r26, 0x53	; 83
    13aa:	b0 e0       	ldi	r27, 0x00	; 0
    13ac:	e3 e5       	ldi	r30, 0x53	; 83
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	80 81       	ld	r24, Z
    13b2:	80 62       	ori	r24, 0x20	; 32
    13b4:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_COM00);
    13b6:	a3 e5       	ldi	r26, 0x53	; 83
    13b8:	b0 e0       	ldi	r27, 0x00	; 0
    13ba:	e3 e5       	ldi	r30, 0x53	; 83
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	80 81       	ld	r24, Z
    13c0:	80 61       	ori	r24, 0x10	; 16
    13c2:	8c 93       	st	X, r24
    13c4:	0e c0       	rjmp	.+28     	; 0x13e2 <TIMER0_Vid_SetFpwm_Mode+0x66>
		break;
		//set on compare match,clear on top
	case non_inverted:
		SET_BIT(TCCR0,TCCR0_COM01);
    13c6:	a3 e5       	ldi	r26, 0x53	; 83
    13c8:	b0 e0       	ldi	r27, 0x00	; 0
    13ca:	e3 e5       	ldi	r30, 0x53	; 83
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	80 81       	ld	r24, Z
    13d0:	80 62       	ori	r24, 0x20	; 32
    13d2:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,TCCR0_COM00);
    13d4:	a3 e5       	ldi	r26, 0x53	; 83
    13d6:	b0 e0       	ldi	r27, 0x00	; 0
    13d8:	e3 e5       	ldi	r30, 0x53	; 83
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	80 81       	ld	r24, Z
    13de:	8f 7e       	andi	r24, 0xEF	; 239
    13e0:	8c 93       	st	X, r24
		break;
	}
}
    13e2:	0f 90       	pop	r0
    13e4:	0f 90       	pop	r0
    13e6:	0f 90       	pop	r0
    13e8:	cf 91       	pop	r28
    13ea:	df 91       	pop	r29
    13ec:	08 95       	ret

000013ee <TIMERS_u8Timer0SetCallBack>:




u8   TIMERS_u8Timer0SetCallBack(void(*Copy_pf)(void))
{
    13ee:	df 93       	push	r29
    13f0:	cf 93       	push	r28
    13f2:	00 d0       	rcall	.+0      	; 0x13f4 <TIMERS_u8Timer0SetCallBack+0x6>
    13f4:	0f 92       	push	r0
    13f6:	cd b7       	in	r28, 0x3d	; 61
    13f8:	de b7       	in	r29, 0x3e	; 62
    13fa:	9b 83       	std	Y+3, r25	; 0x03
    13fc:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = 1;
    13fe:	81 e0       	ldi	r24, 0x01	; 1
    1400:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL)
    1402:	8a 81       	ldd	r24, Y+2	; 0x02
    1404:	9b 81       	ldd	r25, Y+3	; 0x03
    1406:	00 97       	sbiw	r24, 0x00	; 0
    1408:	39 f0       	breq	.+14     	; 0x1418 <TIMERS_u8Timer0SetCallBack+0x2a>
	{
		TIMERS_pfTimer0OVF =Copy_pf;
    140a:	8a 81       	ldd	r24, Y+2	; 0x02
    140c:	9b 81       	ldd	r25, Y+3	; 0x03
    140e:	90 93 6d 00 	sts	0x006D, r25
    1412:	80 93 6c 00 	sts	0x006C, r24
    1416:	01 c0       	rjmp	.+2      	; 0x141a <TIMERS_u8Timer0SetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorState = 0;
    1418:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    141a:	89 81       	ldd	r24, Y+1	; 0x01
}
    141c:	0f 90       	pop	r0
    141e:	0f 90       	pop	r0
    1420:	0f 90       	pop	r0
    1422:	cf 91       	pop	r28
    1424:	df 91       	pop	r29
    1426:	08 95       	ret

00001428 <TIMERS_u8Timer0CTCSetCallBack>:

u8   TIMERS_u8Timer0CTCSetCallBack(void(*Copy_pf)(void))
{
    1428:	df 93       	push	r29
    142a:	cf 93       	push	r28
    142c:	00 d0       	rcall	.+0      	; 0x142e <TIMERS_u8Timer0CTCSetCallBack+0x6>
    142e:	0f 92       	push	r0
    1430:	cd b7       	in	r28, 0x3d	; 61
    1432:	de b7       	in	r29, 0x3e	; 62
    1434:	9b 83       	std	Y+3, r25	; 0x03
    1436:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = 1;
    1438:	81 e0       	ldi	r24, 0x01	; 1
    143a:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL)
    143c:	8a 81       	ldd	r24, Y+2	; 0x02
    143e:	9b 81       	ldd	r25, Y+3	; 0x03
    1440:	00 97       	sbiw	r24, 0x00	; 0
    1442:	39 f0       	breq	.+14     	; 0x1452 <TIMERS_u8Timer0CTCSetCallBack+0x2a>
	{
		TIMERS_pfTimer0CTC =Copy_pf;
    1444:	8a 81       	ldd	r24, Y+2	; 0x02
    1446:	9b 81       	ldd	r25, Y+3	; 0x03
    1448:	90 93 6f 00 	sts	0x006F, r25
    144c:	80 93 6e 00 	sts	0x006E, r24
    1450:	01 c0       	rjmp	.+2      	; 0x1454 <TIMERS_u8Timer0CTCSetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorState = 0;
    1452:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1454:	89 81       	ldd	r24, Y+1	; 0x01
}
    1456:	0f 90       	pop	r0
    1458:	0f 90       	pop	r0
    145a:	0f 90       	pop	r0
    145c:	cf 91       	pop	r28
    145e:	df 91       	pop	r29
    1460:	08 95       	ret

00001462 <__vector_11>:

/* Prototype for ISR of TIMER0 OVF */
void __vector_11(void)   __attribute__((signal));
void __vector_11(void)
{
    1462:	1f 92       	push	r1
    1464:	0f 92       	push	r0
    1466:	0f b6       	in	r0, 0x3f	; 63
    1468:	0f 92       	push	r0
    146a:	11 24       	eor	r1, r1
    146c:	2f 93       	push	r18
    146e:	3f 93       	push	r19
    1470:	4f 93       	push	r20
    1472:	5f 93       	push	r21
    1474:	6f 93       	push	r22
    1476:	7f 93       	push	r23
    1478:	8f 93       	push	r24
    147a:	9f 93       	push	r25
    147c:	af 93       	push	r26
    147e:	bf 93       	push	r27
    1480:	ef 93       	push	r30
    1482:	ff 93       	push	r31
    1484:	df 93       	push	r29
    1486:	cf 93       	push	r28
    1488:	cd b7       	in	r28, 0x3d	; 61
    148a:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16OCounterOVF = 0;
	Local_u16OCounterOVF++;
    148c:	80 91 70 00 	lds	r24, 0x0070
    1490:	90 91 71 00 	lds	r25, 0x0071
    1494:	01 96       	adiw	r24, 0x01	; 1
    1496:	90 93 71 00 	sts	0x0071, r25
    149a:	80 93 70 00 	sts	0x0070, r24
	if(Local_u16OCounterOVF == 3907)
    149e:	80 91 70 00 	lds	r24, 0x0070
    14a2:	90 91 71 00 	lds	r25, 0x0071
    14a6:	2f e0       	ldi	r18, 0x0F	; 15
    14a8:	83 34       	cpi	r24, 0x43	; 67
    14aa:	92 07       	cpc	r25, r18
    14ac:	99 f4       	brne	.+38     	; 0x14d4 <__vector_11+0x72>
	{
		/* UpdatePreload Value */
		TCNT0 = 192;
    14ae:	e2 e5       	ldi	r30, 0x52	; 82
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	80 ec       	ldi	r24, 0xC0	; 192
    14b4:	80 83       	st	Z, r24
		/* Clear the OVF Counter */
		Local_u16OCounterOVF = 0;
    14b6:	10 92 71 00 	sts	0x0071, r1
    14ba:	10 92 70 00 	sts	0x0070, r1
		/* Call App function */
		if(TIMERS_pfTimer0OVF != NULL)
    14be:	80 91 6c 00 	lds	r24, 0x006C
    14c2:	90 91 6d 00 	lds	r25, 0x006D
    14c6:	00 97       	sbiw	r24, 0x00	; 0
    14c8:	29 f0       	breq	.+10     	; 0x14d4 <__vector_11+0x72>
		{
			TIMERS_pfTimer0OVF();
    14ca:	e0 91 6c 00 	lds	r30, 0x006C
    14ce:	f0 91 6d 00 	lds	r31, 0x006D
    14d2:	09 95       	icall
		}
	}
}
    14d4:	cf 91       	pop	r28
    14d6:	df 91       	pop	r29
    14d8:	ff 91       	pop	r31
    14da:	ef 91       	pop	r30
    14dc:	bf 91       	pop	r27
    14de:	af 91       	pop	r26
    14e0:	9f 91       	pop	r25
    14e2:	8f 91       	pop	r24
    14e4:	7f 91       	pop	r23
    14e6:	6f 91       	pop	r22
    14e8:	5f 91       	pop	r21
    14ea:	4f 91       	pop	r20
    14ec:	3f 91       	pop	r19
    14ee:	2f 91       	pop	r18
    14f0:	0f 90       	pop	r0
    14f2:	0f be       	out	0x3f, r0	; 63
    14f4:	0f 90       	pop	r0
    14f6:	1f 90       	pop	r1
    14f8:	18 95       	reti

000014fa <__vector_10>:

/* Prototype for ISR of TIMER0 CTC */
void __vector_10(void)   __attribute__((signal));
void __vector_10(void)
{
    14fa:	1f 92       	push	r1
    14fc:	0f 92       	push	r0
    14fe:	0f b6       	in	r0, 0x3f	; 63
    1500:	0f 92       	push	r0
    1502:	11 24       	eor	r1, r1
    1504:	2f 93       	push	r18
    1506:	3f 93       	push	r19
    1508:	4f 93       	push	r20
    150a:	5f 93       	push	r21
    150c:	6f 93       	push	r22
    150e:	7f 93       	push	r23
    1510:	8f 93       	push	r24
    1512:	9f 93       	push	r25
    1514:	af 93       	push	r26
    1516:	bf 93       	push	r27
    1518:	ef 93       	push	r30
    151a:	ff 93       	push	r31
    151c:	df 93       	push	r29
    151e:	cf 93       	push	r28
    1520:	cd b7       	in	r28, 0x3d	; 61
    1522:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16OCounterCTC = 0;
	Local_u16OCounterCTC++;
    1524:	80 91 72 00 	lds	r24, 0x0072
    1528:	90 91 73 00 	lds	r25, 0x0073
    152c:	01 96       	adiw	r24, 0x01	; 1
    152e:	90 93 73 00 	sts	0x0073, r25
    1532:	80 93 72 00 	sts	0x0072, r24
	if(Local_u16OCounterCTC == 10000)
    1536:	80 91 72 00 	lds	r24, 0x0072
    153a:	90 91 73 00 	lds	r25, 0x0073
    153e:	27 e2       	ldi	r18, 0x27	; 39
    1540:	80 31       	cpi	r24, 0x10	; 16
    1542:	92 07       	cpc	r25, r18
    1544:	79 f4       	brne	.+30     	; 0x1564 <__vector_10+0x6a>
	{
      /* Clear CounterCTC = 0 */
		Local_u16OCounterCTC = 0;
    1546:	10 92 73 00 	sts	0x0073, r1
    154a:	10 92 72 00 	sts	0x0072, r1
		/* Call CallBack  function*/
		if(TIMERS_pfTimer0CTC != NULL)
    154e:	80 91 6e 00 	lds	r24, 0x006E
    1552:	90 91 6f 00 	lds	r25, 0x006F
    1556:	00 97       	sbiw	r24, 0x00	; 0
    1558:	29 f0       	breq	.+10     	; 0x1564 <__vector_10+0x6a>
		{
			TIMERS_pfTimer0CTC();
    155a:	e0 91 6e 00 	lds	r30, 0x006E
    155e:	f0 91 6f 00 	lds	r31, 0x006F
    1562:	09 95       	icall
		}
	}
}
    1564:	cf 91       	pop	r28
    1566:	df 91       	pop	r29
    1568:	ff 91       	pop	r31
    156a:	ef 91       	pop	r30
    156c:	bf 91       	pop	r27
    156e:	af 91       	pop	r26
    1570:	9f 91       	pop	r25
    1572:	8f 91       	pop	r24
    1574:	7f 91       	pop	r23
    1576:	6f 91       	pop	r22
    1578:	5f 91       	pop	r21
    157a:	4f 91       	pop	r20
    157c:	3f 91       	pop	r19
    157e:	2f 91       	pop	r18
    1580:	0f 90       	pop	r0
    1582:	0f be       	out	0x3f, r0	; 63
    1584:	0f 90       	pop	r0
    1586:	1f 90       	pop	r1
    1588:	18 95       	reti

0000158a <UART_VidSendData>:
#include"BIT_MATHS.h"
#include"UART_interface.h"
#include"UART_private.h"

void UART_VidSendData(u8 Copy_u8Data)
{
    158a:	df 93       	push	r29
    158c:	cf 93       	push	r28
    158e:	0f 92       	push	r0
    1590:	cd b7       	in	r28, 0x3d	; 61
    1592:	de b7       	in	r29, 0x3e	; 62
    1594:	89 83       	std	Y+1, r24	; 0x01
	while (GET_BIT(UCSRA,UDRE)!=1);
    1596:	eb e2       	ldi	r30, 0x2B	; 43
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	80 81       	ld	r24, Z
    159c:	82 95       	swap	r24
    159e:	86 95       	lsr	r24
    15a0:	87 70       	andi	r24, 0x07	; 7
    15a2:	88 2f       	mov	r24, r24
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	81 70       	andi	r24, 0x01	; 1
    15a8:	90 70       	andi	r25, 0x00	; 0
    15aa:	00 97       	sbiw	r24, 0x00	; 0
    15ac:	a1 f3       	breq	.-24     	; 0x1596 <UART_VidSendData+0xc>
	UDR=Copy_u8Data;
    15ae:	ec e2       	ldi	r30, 0x2C	; 44
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	89 81       	ldd	r24, Y+1	; 0x01
    15b4:	80 83       	st	Z, r24
}
    15b6:	0f 90       	pop	r0
    15b8:	cf 91       	pop	r28
    15ba:	df 91       	pop	r29
    15bc:	08 95       	ret

000015be <UART_VidReceiveData>:
u8 UART_VidReceiveData(void)
{
    15be:	df 93       	push	r29
    15c0:	cf 93       	push	r28
    15c2:	cd b7       	in	r28, 0x3d	; 61
    15c4:	de b7       	in	r29, 0x3e	; 62
	while (GET_BIT(UCSRA,RXC)!=1);
    15c6:	eb e2       	ldi	r30, 0x2B	; 43
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	80 81       	ld	r24, Z
    15cc:	88 1f       	adc	r24, r24
    15ce:	88 27       	eor	r24, r24
    15d0:	88 1f       	adc	r24, r24
    15d2:	81 30       	cpi	r24, 0x01	; 1
    15d4:	c1 f7       	brne	.-16     	; 0x15c6 <UART_VidReceiveData+0x8>
	return UDR;
    15d6:	ec e2       	ldi	r30, 0x2C	; 44
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	80 81       	ld	r24, Z
}
    15dc:	cf 91       	pop	r28
    15de:	df 91       	pop	r29
    15e0:	08 95       	ret

000015e2 <UART_VidInit>:
void UART_VidInit(void)
{
    15e2:	df 93       	push	r29
    15e4:	cf 93       	push	r28
    15e6:	0f 92       	push	r0
    15e8:	cd b7       	in	r28, 0x3d	; 61
    15ea:	de b7       	in	r29, 0x3e	; 62
	//Set frame format -> 8 data, 1 stop, no parity
	u8 local =0;
    15ec:	19 82       	std	Y+1, r1	; 0x01
	SET_BIT(local,URSEL);
    15ee:	89 81       	ldd	r24, Y+1	; 0x01
    15f0:	80 68       	ori	r24, 0x80	; 128
    15f2:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(local,UCSZ1);
    15f4:	89 81       	ldd	r24, Y+1	; 0x01
    15f6:	84 60       	ori	r24, 0x04	; 4
    15f8:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(local,UCSZ0);
    15fa:	89 81       	ldd	r24, Y+1	; 0x01
    15fc:	82 60       	ori	r24, 0x02	; 2
    15fe:	89 83       	std	Y+1, r24	; 0x01

	UCSRC=local;//or 0x68,0b100000110
    1600:	e0 e4       	ldi	r30, 0x40	; 64
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	89 81       	ldd	r24, Y+1	; 0x01
    1606:	80 83       	st	Z, r24

	//boud rate 9600........ table datasheet
	UBRRL=51;
    1608:	e9 e2       	ldi	r30, 0x29	; 41
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	83 e3       	ldi	r24, 0x33	; 51
    160e:	80 83       	st	Z, r24
	//rx enable and tx enable
	SET_BIT(UCSRB,RXEN);
    1610:	aa e2       	ldi	r26, 0x2A	; 42
    1612:	b0 e0       	ldi	r27, 0x00	; 0
    1614:	ea e2       	ldi	r30, 0x2A	; 42
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	80 81       	ld	r24, Z
    161a:	80 61       	ori	r24, 0x10	; 16
    161c:	8c 93       	st	X, r24
	SET_BIT(UCSRB,TXEN);
    161e:	aa e2       	ldi	r26, 0x2A	; 42
    1620:	b0 e0       	ldi	r27, 0x00	; 0
    1622:	ea e2       	ldi	r30, 0x2A	; 42
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	80 81       	ld	r24, Z
    1628:	88 60       	ori	r24, 0x08	; 8
    162a:	8c 93       	st	X, r24
}
    162c:	0f 90       	pop	r0
    162e:	cf 91       	pop	r28
    1630:	df 91       	pop	r29
    1632:	08 95       	ret

00001634 <MDIO_vidSetPinDirection>:
#include "bit_maths.h"

#include "dio.h"

void MDIO_vidSetPinDirection(u8 cpy_u8PortNumber, u8 cpy_u8PinNumber, u8 cpy_u8PinDirection)
{
    1634:	df 93       	push	r29
    1636:	cf 93       	push	r28
    1638:	cd b7       	in	r28, 0x3d	; 61
    163a:	de b7       	in	r29, 0x3e	; 62
    163c:	29 97       	sbiw	r28, 0x09	; 9
    163e:	0f b6       	in	r0, 0x3f	; 63
    1640:	f8 94       	cli
    1642:	de bf       	out	0x3e, r29	; 62
    1644:	0f be       	out	0x3f, r0	; 63
    1646:	cd bf       	out	0x3d, r28	; 61
    1648:	89 83       	std	Y+1, r24	; 0x01
    164a:	6a 83       	std	Y+2, r22	; 0x02
    164c:	4b 83       	std	Y+3, r20	; 0x03
	// DDRs
	switch (cpy_u8PinDirection)
    164e:	8b 81       	ldd	r24, Y+3	; 0x03
    1650:	28 2f       	mov	r18, r24
    1652:	30 e0       	ldi	r19, 0x00	; 0
    1654:	39 87       	std	Y+9, r19	; 0x09
    1656:	28 87       	std	Y+8, r18	; 0x08
    1658:	88 85       	ldd	r24, Y+8	; 0x08
    165a:	99 85       	ldd	r25, Y+9	; 0x09
    165c:	00 97       	sbiw	r24, 0x00	; 0
    165e:	09 f4       	brne	.+2      	; 0x1662 <MDIO_vidSetPinDirection+0x2e>
    1660:	76 c0       	rjmp	.+236    	; 0x174e <MDIO_vidSetPinDirection+0x11a>
    1662:	28 85       	ldd	r18, Y+8	; 0x08
    1664:	39 85       	ldd	r19, Y+9	; 0x09
    1666:	21 30       	cpi	r18, 0x01	; 1
    1668:	31 05       	cpc	r19, r1
    166a:	09 f0       	breq	.+2      	; 0x166e <MDIO_vidSetPinDirection+0x3a>
    166c:	e4 c0       	rjmp	.+456    	; 0x1836 <MDIO_vidSetPinDirection+0x202>
	{
	case	OUTPUT:	// set DDRs
		switch (cpy_u8PortNumber)
    166e:	89 81       	ldd	r24, Y+1	; 0x01
    1670:	28 2f       	mov	r18, r24
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	3f 83       	std	Y+7, r19	; 0x07
    1676:	2e 83       	std	Y+6, r18	; 0x06
    1678:	8e 81       	ldd	r24, Y+6	; 0x06
    167a:	9f 81       	ldd	r25, Y+7	; 0x07
    167c:	82 34       	cpi	r24, 0x42	; 66
    167e:	91 05       	cpc	r25, r1
    1680:	51 f1       	breq	.+84     	; 0x16d6 <MDIO_vidSetPinDirection+0xa2>
    1682:	2e 81       	ldd	r18, Y+6	; 0x06
    1684:	3f 81       	ldd	r19, Y+7	; 0x07
    1686:	23 34       	cpi	r18, 0x43	; 67
    1688:	31 05       	cpc	r19, r1
    168a:	34 f4       	brge	.+12     	; 0x1698 <MDIO_vidSetPinDirection+0x64>
    168c:	8e 81       	ldd	r24, Y+6	; 0x06
    168e:	9f 81       	ldd	r25, Y+7	; 0x07
    1690:	81 34       	cpi	r24, 0x41	; 65
    1692:	91 05       	cpc	r25, r1
    1694:	61 f0       	breq	.+24     	; 0x16ae <MDIO_vidSetPinDirection+0x7a>
    1696:	cf c0       	rjmp	.+414    	; 0x1836 <MDIO_vidSetPinDirection+0x202>
    1698:	2e 81       	ldd	r18, Y+6	; 0x06
    169a:	3f 81       	ldd	r19, Y+7	; 0x07
    169c:	23 34       	cpi	r18, 0x43	; 67
    169e:	31 05       	cpc	r19, r1
    16a0:	71 f1       	breq	.+92     	; 0x16fe <MDIO_vidSetPinDirection+0xca>
    16a2:	8e 81       	ldd	r24, Y+6	; 0x06
    16a4:	9f 81       	ldd	r25, Y+7	; 0x07
    16a6:	84 34       	cpi	r24, 0x44	; 68
    16a8:	91 05       	cpc	r25, r1
    16aa:	e9 f1       	breq	.+122    	; 0x1726 <MDIO_vidSetPinDirection+0xf2>
    16ac:	c4 c0       	rjmp	.+392    	; 0x1836 <MDIO_vidSetPinDirection+0x202>
		{
			case	PORT_A:	SET_BIT(DDRA, cpy_u8PinNumber);	break;
    16ae:	aa e3       	ldi	r26, 0x3A	; 58
    16b0:	b0 e0       	ldi	r27, 0x00	; 0
    16b2:	ea e3       	ldi	r30, 0x3A	; 58
    16b4:	f0 e0       	ldi	r31, 0x00	; 0
    16b6:	80 81       	ld	r24, Z
    16b8:	48 2f       	mov	r20, r24
    16ba:	8a 81       	ldd	r24, Y+2	; 0x02
    16bc:	28 2f       	mov	r18, r24
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	02 2e       	mov	r0, r18
    16c6:	02 c0       	rjmp	.+4      	; 0x16cc <MDIO_vidSetPinDirection+0x98>
    16c8:	88 0f       	add	r24, r24
    16ca:	99 1f       	adc	r25, r25
    16cc:	0a 94       	dec	r0
    16ce:	e2 f7       	brpl	.-8      	; 0x16c8 <MDIO_vidSetPinDirection+0x94>
    16d0:	84 2b       	or	r24, r20
    16d2:	8c 93       	st	X, r24
    16d4:	b0 c0       	rjmp	.+352    	; 0x1836 <MDIO_vidSetPinDirection+0x202>
			case 	PORT_B:	SET_BIT(DDRB, cpy_u8PinNumber);	break;
    16d6:	a7 e3       	ldi	r26, 0x37	; 55
    16d8:	b0 e0       	ldi	r27, 0x00	; 0
    16da:	e7 e3       	ldi	r30, 0x37	; 55
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	80 81       	ld	r24, Z
    16e0:	48 2f       	mov	r20, r24
    16e2:	8a 81       	ldd	r24, Y+2	; 0x02
    16e4:	28 2f       	mov	r18, r24
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	81 e0       	ldi	r24, 0x01	; 1
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	02 2e       	mov	r0, r18
    16ee:	02 c0       	rjmp	.+4      	; 0x16f4 <MDIO_vidSetPinDirection+0xc0>
    16f0:	88 0f       	add	r24, r24
    16f2:	99 1f       	adc	r25, r25
    16f4:	0a 94       	dec	r0
    16f6:	e2 f7       	brpl	.-8      	; 0x16f0 <MDIO_vidSetPinDirection+0xbc>
    16f8:	84 2b       	or	r24, r20
    16fa:	8c 93       	st	X, r24
    16fc:	9c c0       	rjmp	.+312    	; 0x1836 <MDIO_vidSetPinDirection+0x202>
			case	PORT_C:	SET_BIT(DDRC, cpy_u8PinNumber);	break;
    16fe:	a4 e3       	ldi	r26, 0x34	; 52
    1700:	b0 e0       	ldi	r27, 0x00	; 0
    1702:	e4 e3       	ldi	r30, 0x34	; 52
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	80 81       	ld	r24, Z
    1708:	48 2f       	mov	r20, r24
    170a:	8a 81       	ldd	r24, Y+2	; 0x02
    170c:	28 2f       	mov	r18, r24
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	02 2e       	mov	r0, r18
    1716:	02 c0       	rjmp	.+4      	; 0x171c <MDIO_vidSetPinDirection+0xe8>
    1718:	88 0f       	add	r24, r24
    171a:	99 1f       	adc	r25, r25
    171c:	0a 94       	dec	r0
    171e:	e2 f7       	brpl	.-8      	; 0x1718 <MDIO_vidSetPinDirection+0xe4>
    1720:	84 2b       	or	r24, r20
    1722:	8c 93       	st	X, r24
    1724:	88 c0       	rjmp	.+272    	; 0x1836 <MDIO_vidSetPinDirection+0x202>
			case	PORT_D:	SET_BIT(DDRD, cpy_u8PinNumber);	break;
    1726:	a1 e3       	ldi	r26, 0x31	; 49
    1728:	b0 e0       	ldi	r27, 0x00	; 0
    172a:	e1 e3       	ldi	r30, 0x31	; 49
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	80 81       	ld	r24, Z
    1730:	48 2f       	mov	r20, r24
    1732:	8a 81       	ldd	r24, Y+2	; 0x02
    1734:	28 2f       	mov	r18, r24
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	81 e0       	ldi	r24, 0x01	; 1
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	02 2e       	mov	r0, r18
    173e:	02 c0       	rjmp	.+4      	; 0x1744 <MDIO_vidSetPinDirection+0x110>
    1740:	88 0f       	add	r24, r24
    1742:	99 1f       	adc	r25, r25
    1744:	0a 94       	dec	r0
    1746:	e2 f7       	brpl	.-8      	; 0x1740 <MDIO_vidSetPinDirection+0x10c>
    1748:	84 2b       	or	r24, r20
    174a:	8c 93       	st	X, r24
    174c:	74 c0       	rjmp	.+232    	; 0x1836 <MDIO_vidSetPinDirection+0x202>
			default:	/* wrong port number*/	break;
		}
		break;
	case	INPUT:	// clear
		switch (cpy_u8PortNumber)
    174e:	89 81       	ldd	r24, Y+1	; 0x01
    1750:	28 2f       	mov	r18, r24
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	3d 83       	std	Y+5, r19	; 0x05
    1756:	2c 83       	std	Y+4, r18	; 0x04
    1758:	8c 81       	ldd	r24, Y+4	; 0x04
    175a:	9d 81       	ldd	r25, Y+5	; 0x05
    175c:	82 34       	cpi	r24, 0x42	; 66
    175e:	91 05       	cpc	r25, r1
    1760:	61 f1       	breq	.+88     	; 0x17ba <MDIO_vidSetPinDirection+0x186>
    1762:	2c 81       	ldd	r18, Y+4	; 0x04
    1764:	3d 81       	ldd	r19, Y+5	; 0x05
    1766:	23 34       	cpi	r18, 0x43	; 67
    1768:	31 05       	cpc	r19, r1
    176a:	34 f4       	brge	.+12     	; 0x1778 <MDIO_vidSetPinDirection+0x144>
    176c:	8c 81       	ldd	r24, Y+4	; 0x04
    176e:	9d 81       	ldd	r25, Y+5	; 0x05
    1770:	81 34       	cpi	r24, 0x41	; 65
    1772:	91 05       	cpc	r25, r1
    1774:	69 f0       	breq	.+26     	; 0x1790 <MDIO_vidSetPinDirection+0x15c>
    1776:	5f c0       	rjmp	.+190    	; 0x1836 <MDIO_vidSetPinDirection+0x202>
    1778:	2c 81       	ldd	r18, Y+4	; 0x04
    177a:	3d 81       	ldd	r19, Y+5	; 0x05
    177c:	23 34       	cpi	r18, 0x43	; 67
    177e:	31 05       	cpc	r19, r1
    1780:	89 f1       	breq	.+98     	; 0x17e4 <MDIO_vidSetPinDirection+0x1b0>
    1782:	8c 81       	ldd	r24, Y+4	; 0x04
    1784:	9d 81       	ldd	r25, Y+5	; 0x05
    1786:	84 34       	cpi	r24, 0x44	; 68
    1788:	91 05       	cpc	r25, r1
    178a:	09 f4       	brne	.+2      	; 0x178e <MDIO_vidSetPinDirection+0x15a>
    178c:	40 c0       	rjmp	.+128    	; 0x180e <MDIO_vidSetPinDirection+0x1da>
    178e:	53 c0       	rjmp	.+166    	; 0x1836 <MDIO_vidSetPinDirection+0x202>
		{
			case	PORT_A:	CLR_BIT(DDRA, cpy_u8PinNumber);	break;
    1790:	aa e3       	ldi	r26, 0x3A	; 58
    1792:	b0 e0       	ldi	r27, 0x00	; 0
    1794:	ea e3       	ldi	r30, 0x3A	; 58
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	80 81       	ld	r24, Z
    179a:	48 2f       	mov	r20, r24
    179c:	8a 81       	ldd	r24, Y+2	; 0x02
    179e:	28 2f       	mov	r18, r24
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	81 e0       	ldi	r24, 0x01	; 1
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	02 2e       	mov	r0, r18
    17a8:	02 c0       	rjmp	.+4      	; 0x17ae <MDIO_vidSetPinDirection+0x17a>
    17aa:	88 0f       	add	r24, r24
    17ac:	99 1f       	adc	r25, r25
    17ae:	0a 94       	dec	r0
    17b0:	e2 f7       	brpl	.-8      	; 0x17aa <MDIO_vidSetPinDirection+0x176>
    17b2:	80 95       	com	r24
    17b4:	84 23       	and	r24, r20
    17b6:	8c 93       	st	X, r24
    17b8:	3e c0       	rjmp	.+124    	; 0x1836 <MDIO_vidSetPinDirection+0x202>
			case 	PORT_B:	CLR_BIT(DDRB, cpy_u8PinNumber);	break;
    17ba:	a7 e3       	ldi	r26, 0x37	; 55
    17bc:	b0 e0       	ldi	r27, 0x00	; 0
    17be:	e7 e3       	ldi	r30, 0x37	; 55
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	80 81       	ld	r24, Z
    17c4:	48 2f       	mov	r20, r24
    17c6:	8a 81       	ldd	r24, Y+2	; 0x02
    17c8:	28 2f       	mov	r18, r24
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	81 e0       	ldi	r24, 0x01	; 1
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	02 2e       	mov	r0, r18
    17d2:	02 c0       	rjmp	.+4      	; 0x17d8 <MDIO_vidSetPinDirection+0x1a4>
    17d4:	88 0f       	add	r24, r24
    17d6:	99 1f       	adc	r25, r25
    17d8:	0a 94       	dec	r0
    17da:	e2 f7       	brpl	.-8      	; 0x17d4 <MDIO_vidSetPinDirection+0x1a0>
    17dc:	80 95       	com	r24
    17de:	84 23       	and	r24, r20
    17e0:	8c 93       	st	X, r24
    17e2:	29 c0       	rjmp	.+82     	; 0x1836 <MDIO_vidSetPinDirection+0x202>
			case	PORT_C:	CLR_BIT(DDRC, cpy_u8PinNumber);	break;
    17e4:	a4 e3       	ldi	r26, 0x34	; 52
    17e6:	b0 e0       	ldi	r27, 0x00	; 0
    17e8:	e4 e3       	ldi	r30, 0x34	; 52
    17ea:	f0 e0       	ldi	r31, 0x00	; 0
    17ec:	80 81       	ld	r24, Z
    17ee:	48 2f       	mov	r20, r24
    17f0:	8a 81       	ldd	r24, Y+2	; 0x02
    17f2:	28 2f       	mov	r18, r24
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	81 e0       	ldi	r24, 0x01	; 1
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	02 2e       	mov	r0, r18
    17fc:	02 c0       	rjmp	.+4      	; 0x1802 <MDIO_vidSetPinDirection+0x1ce>
    17fe:	88 0f       	add	r24, r24
    1800:	99 1f       	adc	r25, r25
    1802:	0a 94       	dec	r0
    1804:	e2 f7       	brpl	.-8      	; 0x17fe <MDIO_vidSetPinDirection+0x1ca>
    1806:	80 95       	com	r24
    1808:	84 23       	and	r24, r20
    180a:	8c 93       	st	X, r24
    180c:	14 c0       	rjmp	.+40     	; 0x1836 <MDIO_vidSetPinDirection+0x202>
			case	PORT_D:	CLR_BIT(DDRD, cpy_u8PinNumber);	break;
    180e:	a1 e3       	ldi	r26, 0x31	; 49
    1810:	b0 e0       	ldi	r27, 0x00	; 0
    1812:	e1 e3       	ldi	r30, 0x31	; 49
    1814:	f0 e0       	ldi	r31, 0x00	; 0
    1816:	80 81       	ld	r24, Z
    1818:	48 2f       	mov	r20, r24
    181a:	8a 81       	ldd	r24, Y+2	; 0x02
    181c:	28 2f       	mov	r18, r24
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	02 2e       	mov	r0, r18
    1826:	02 c0       	rjmp	.+4      	; 0x182c <MDIO_vidSetPinDirection+0x1f8>
    1828:	88 0f       	add	r24, r24
    182a:	99 1f       	adc	r25, r25
    182c:	0a 94       	dec	r0
    182e:	e2 f7       	brpl	.-8      	; 0x1828 <MDIO_vidSetPinDirection+0x1f4>
    1830:	80 95       	com	r24
    1832:	84 23       	and	r24, r20
    1834:	8c 93       	st	X, r24
		break;
	default:
		/* wrong direction */
		break;
	}
}
    1836:	29 96       	adiw	r28, 0x09	; 9
    1838:	0f b6       	in	r0, 0x3f	; 63
    183a:	f8 94       	cli
    183c:	de bf       	out	0x3e, r29	; 62
    183e:	0f be       	out	0x3f, r0	; 63
    1840:	cd bf       	out	0x3d, r28	; 61
    1842:	cf 91       	pop	r28
    1844:	df 91       	pop	r29
    1846:	08 95       	ret

00001848 <MDIO_vidSetPinValue>:



void MDIO_vidSetPinValue(u8 cpy_u8PortNumber, u8 cpy_u8PinNumber, u8 cpy_u8PinValue)
{
    1848:	df 93       	push	r29
    184a:	cf 93       	push	r28
    184c:	cd b7       	in	r28, 0x3d	; 61
    184e:	de b7       	in	r29, 0x3e	; 62
    1850:	29 97       	sbiw	r28, 0x09	; 9
    1852:	0f b6       	in	r0, 0x3f	; 63
    1854:	f8 94       	cli
    1856:	de bf       	out	0x3e, r29	; 62
    1858:	0f be       	out	0x3f, r0	; 63
    185a:	cd bf       	out	0x3d, r28	; 61
    185c:	89 83       	std	Y+1, r24	; 0x01
    185e:	6a 83       	std	Y+2, r22	; 0x02
    1860:	4b 83       	std	Y+3, r20	; 0x03
	// PORTs registers
	switch (cpy_u8PinValue)
    1862:	8b 81       	ldd	r24, Y+3	; 0x03
    1864:	28 2f       	mov	r18, r24
    1866:	30 e0       	ldi	r19, 0x00	; 0
    1868:	39 87       	std	Y+9, r19	; 0x09
    186a:	28 87       	std	Y+8, r18	; 0x08
    186c:	88 85       	ldd	r24, Y+8	; 0x08
    186e:	99 85       	ldd	r25, Y+9	; 0x09
    1870:	00 97       	sbiw	r24, 0x00	; 0
    1872:	09 f4       	brne	.+2      	; 0x1876 <MDIO_vidSetPinValue+0x2e>
    1874:	76 c0       	rjmp	.+236    	; 0x1962 <MDIO_vidSetPinValue+0x11a>
    1876:	28 85       	ldd	r18, Y+8	; 0x08
    1878:	39 85       	ldd	r19, Y+9	; 0x09
    187a:	21 30       	cpi	r18, 0x01	; 1
    187c:	31 05       	cpc	r19, r1
    187e:	09 f0       	breq	.+2      	; 0x1882 <MDIO_vidSetPinValue+0x3a>
    1880:	e4 c0       	rjmp	.+456    	; 0x1a4a <MDIO_vidSetPinValue+0x202>
	{
	case	HIGH:	// set
		switch (cpy_u8PortNumber)
    1882:	89 81       	ldd	r24, Y+1	; 0x01
    1884:	28 2f       	mov	r18, r24
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	3f 83       	std	Y+7, r19	; 0x07
    188a:	2e 83       	std	Y+6, r18	; 0x06
    188c:	8e 81       	ldd	r24, Y+6	; 0x06
    188e:	9f 81       	ldd	r25, Y+7	; 0x07
    1890:	82 34       	cpi	r24, 0x42	; 66
    1892:	91 05       	cpc	r25, r1
    1894:	51 f1       	breq	.+84     	; 0x18ea <MDIO_vidSetPinValue+0xa2>
    1896:	2e 81       	ldd	r18, Y+6	; 0x06
    1898:	3f 81       	ldd	r19, Y+7	; 0x07
    189a:	23 34       	cpi	r18, 0x43	; 67
    189c:	31 05       	cpc	r19, r1
    189e:	34 f4       	brge	.+12     	; 0x18ac <MDIO_vidSetPinValue+0x64>
    18a0:	8e 81       	ldd	r24, Y+6	; 0x06
    18a2:	9f 81       	ldd	r25, Y+7	; 0x07
    18a4:	81 34       	cpi	r24, 0x41	; 65
    18a6:	91 05       	cpc	r25, r1
    18a8:	61 f0       	breq	.+24     	; 0x18c2 <MDIO_vidSetPinValue+0x7a>
    18aa:	cf c0       	rjmp	.+414    	; 0x1a4a <MDIO_vidSetPinValue+0x202>
    18ac:	2e 81       	ldd	r18, Y+6	; 0x06
    18ae:	3f 81       	ldd	r19, Y+7	; 0x07
    18b0:	23 34       	cpi	r18, 0x43	; 67
    18b2:	31 05       	cpc	r19, r1
    18b4:	71 f1       	breq	.+92     	; 0x1912 <MDIO_vidSetPinValue+0xca>
    18b6:	8e 81       	ldd	r24, Y+6	; 0x06
    18b8:	9f 81       	ldd	r25, Y+7	; 0x07
    18ba:	84 34       	cpi	r24, 0x44	; 68
    18bc:	91 05       	cpc	r25, r1
    18be:	e9 f1       	breq	.+122    	; 0x193a <MDIO_vidSetPinValue+0xf2>
    18c0:	c4 c0       	rjmp	.+392    	; 0x1a4a <MDIO_vidSetPinValue+0x202>
		{
		case 	PORT_A:	SET_BIT(PORTA, cpy_u8PinNumber);	break;
    18c2:	ab e3       	ldi	r26, 0x3B	; 59
    18c4:	b0 e0       	ldi	r27, 0x00	; 0
    18c6:	eb e3       	ldi	r30, 0x3B	; 59
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	80 81       	ld	r24, Z
    18cc:	48 2f       	mov	r20, r24
    18ce:	8a 81       	ldd	r24, Y+2	; 0x02
    18d0:	28 2f       	mov	r18, r24
    18d2:	30 e0       	ldi	r19, 0x00	; 0
    18d4:	81 e0       	ldi	r24, 0x01	; 1
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	02 2e       	mov	r0, r18
    18da:	02 c0       	rjmp	.+4      	; 0x18e0 <MDIO_vidSetPinValue+0x98>
    18dc:	88 0f       	add	r24, r24
    18de:	99 1f       	adc	r25, r25
    18e0:	0a 94       	dec	r0
    18e2:	e2 f7       	brpl	.-8      	; 0x18dc <MDIO_vidSetPinValue+0x94>
    18e4:	84 2b       	or	r24, r20
    18e6:	8c 93       	st	X, r24
    18e8:	b0 c0       	rjmp	.+352    	; 0x1a4a <MDIO_vidSetPinValue+0x202>
		case	PORT_B:	SET_BIT(PORTB, cpy_u8PinNumber);	break;
    18ea:	a8 e3       	ldi	r26, 0x38	; 56
    18ec:	b0 e0       	ldi	r27, 0x00	; 0
    18ee:	e8 e3       	ldi	r30, 0x38	; 56
    18f0:	f0 e0       	ldi	r31, 0x00	; 0
    18f2:	80 81       	ld	r24, Z
    18f4:	48 2f       	mov	r20, r24
    18f6:	8a 81       	ldd	r24, Y+2	; 0x02
    18f8:	28 2f       	mov	r18, r24
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	81 e0       	ldi	r24, 0x01	; 1
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	02 2e       	mov	r0, r18
    1902:	02 c0       	rjmp	.+4      	; 0x1908 <MDIO_vidSetPinValue+0xc0>
    1904:	88 0f       	add	r24, r24
    1906:	99 1f       	adc	r25, r25
    1908:	0a 94       	dec	r0
    190a:	e2 f7       	brpl	.-8      	; 0x1904 <MDIO_vidSetPinValue+0xbc>
    190c:	84 2b       	or	r24, r20
    190e:	8c 93       	st	X, r24
    1910:	9c c0       	rjmp	.+312    	; 0x1a4a <MDIO_vidSetPinValue+0x202>
		case	PORT_C:	SET_BIT(PORTC, cpy_u8PinNumber);	break;
    1912:	a5 e3       	ldi	r26, 0x35	; 53
    1914:	b0 e0       	ldi	r27, 0x00	; 0
    1916:	e5 e3       	ldi	r30, 0x35	; 53
    1918:	f0 e0       	ldi	r31, 0x00	; 0
    191a:	80 81       	ld	r24, Z
    191c:	48 2f       	mov	r20, r24
    191e:	8a 81       	ldd	r24, Y+2	; 0x02
    1920:	28 2f       	mov	r18, r24
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	81 e0       	ldi	r24, 0x01	; 1
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	02 2e       	mov	r0, r18
    192a:	02 c0       	rjmp	.+4      	; 0x1930 <MDIO_vidSetPinValue+0xe8>
    192c:	88 0f       	add	r24, r24
    192e:	99 1f       	adc	r25, r25
    1930:	0a 94       	dec	r0
    1932:	e2 f7       	brpl	.-8      	; 0x192c <MDIO_vidSetPinValue+0xe4>
    1934:	84 2b       	or	r24, r20
    1936:	8c 93       	st	X, r24
    1938:	88 c0       	rjmp	.+272    	; 0x1a4a <MDIO_vidSetPinValue+0x202>
		case	PORT_D:	SET_BIT(PORTD, cpy_u8PinNumber);	break;
    193a:	a2 e3       	ldi	r26, 0x32	; 50
    193c:	b0 e0       	ldi	r27, 0x00	; 0
    193e:	e2 e3       	ldi	r30, 0x32	; 50
    1940:	f0 e0       	ldi	r31, 0x00	; 0
    1942:	80 81       	ld	r24, Z
    1944:	48 2f       	mov	r20, r24
    1946:	8a 81       	ldd	r24, Y+2	; 0x02
    1948:	28 2f       	mov	r18, r24
    194a:	30 e0       	ldi	r19, 0x00	; 0
    194c:	81 e0       	ldi	r24, 0x01	; 1
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	02 2e       	mov	r0, r18
    1952:	02 c0       	rjmp	.+4      	; 0x1958 <MDIO_vidSetPinValue+0x110>
    1954:	88 0f       	add	r24, r24
    1956:	99 1f       	adc	r25, r25
    1958:	0a 94       	dec	r0
    195a:	e2 f7       	brpl	.-8      	; 0x1954 <MDIO_vidSetPinValue+0x10c>
    195c:	84 2b       	or	r24, r20
    195e:	8c 93       	st	X, r24
    1960:	74 c0       	rjmp	.+232    	; 0x1a4a <MDIO_vidSetPinValue+0x202>
		default:	/* wrong port number */	break;
		}
		break;
	case	LOW:	// clear
		switch (cpy_u8PortNumber)
    1962:	89 81       	ldd	r24, Y+1	; 0x01
    1964:	28 2f       	mov	r18, r24
    1966:	30 e0       	ldi	r19, 0x00	; 0
    1968:	3d 83       	std	Y+5, r19	; 0x05
    196a:	2c 83       	std	Y+4, r18	; 0x04
    196c:	8c 81       	ldd	r24, Y+4	; 0x04
    196e:	9d 81       	ldd	r25, Y+5	; 0x05
    1970:	82 34       	cpi	r24, 0x42	; 66
    1972:	91 05       	cpc	r25, r1
    1974:	61 f1       	breq	.+88     	; 0x19ce <MDIO_vidSetPinValue+0x186>
    1976:	2c 81       	ldd	r18, Y+4	; 0x04
    1978:	3d 81       	ldd	r19, Y+5	; 0x05
    197a:	23 34       	cpi	r18, 0x43	; 67
    197c:	31 05       	cpc	r19, r1
    197e:	34 f4       	brge	.+12     	; 0x198c <MDIO_vidSetPinValue+0x144>
    1980:	8c 81       	ldd	r24, Y+4	; 0x04
    1982:	9d 81       	ldd	r25, Y+5	; 0x05
    1984:	81 34       	cpi	r24, 0x41	; 65
    1986:	91 05       	cpc	r25, r1
    1988:	69 f0       	breq	.+26     	; 0x19a4 <MDIO_vidSetPinValue+0x15c>
    198a:	5f c0       	rjmp	.+190    	; 0x1a4a <MDIO_vidSetPinValue+0x202>
    198c:	2c 81       	ldd	r18, Y+4	; 0x04
    198e:	3d 81       	ldd	r19, Y+5	; 0x05
    1990:	23 34       	cpi	r18, 0x43	; 67
    1992:	31 05       	cpc	r19, r1
    1994:	89 f1       	breq	.+98     	; 0x19f8 <MDIO_vidSetPinValue+0x1b0>
    1996:	8c 81       	ldd	r24, Y+4	; 0x04
    1998:	9d 81       	ldd	r25, Y+5	; 0x05
    199a:	84 34       	cpi	r24, 0x44	; 68
    199c:	91 05       	cpc	r25, r1
    199e:	09 f4       	brne	.+2      	; 0x19a2 <MDIO_vidSetPinValue+0x15a>
    19a0:	40 c0       	rjmp	.+128    	; 0x1a22 <MDIO_vidSetPinValue+0x1da>
    19a2:	53 c0       	rjmp	.+166    	; 0x1a4a <MDIO_vidSetPinValue+0x202>
		{
		case 	PORT_A:	CLR_BIT(PORTA, cpy_u8PinNumber);	break;
    19a4:	ab e3       	ldi	r26, 0x3B	; 59
    19a6:	b0 e0       	ldi	r27, 0x00	; 0
    19a8:	eb e3       	ldi	r30, 0x3B	; 59
    19aa:	f0 e0       	ldi	r31, 0x00	; 0
    19ac:	80 81       	ld	r24, Z
    19ae:	48 2f       	mov	r20, r24
    19b0:	8a 81       	ldd	r24, Y+2	; 0x02
    19b2:	28 2f       	mov	r18, r24
    19b4:	30 e0       	ldi	r19, 0x00	; 0
    19b6:	81 e0       	ldi	r24, 0x01	; 1
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	02 2e       	mov	r0, r18
    19bc:	02 c0       	rjmp	.+4      	; 0x19c2 <MDIO_vidSetPinValue+0x17a>
    19be:	88 0f       	add	r24, r24
    19c0:	99 1f       	adc	r25, r25
    19c2:	0a 94       	dec	r0
    19c4:	e2 f7       	brpl	.-8      	; 0x19be <MDIO_vidSetPinValue+0x176>
    19c6:	80 95       	com	r24
    19c8:	84 23       	and	r24, r20
    19ca:	8c 93       	st	X, r24
    19cc:	3e c0       	rjmp	.+124    	; 0x1a4a <MDIO_vidSetPinValue+0x202>
		case	PORT_B:	CLR_BIT(PORTB, cpy_u8PinNumber);	break;
    19ce:	a8 e3       	ldi	r26, 0x38	; 56
    19d0:	b0 e0       	ldi	r27, 0x00	; 0
    19d2:	e8 e3       	ldi	r30, 0x38	; 56
    19d4:	f0 e0       	ldi	r31, 0x00	; 0
    19d6:	80 81       	ld	r24, Z
    19d8:	48 2f       	mov	r20, r24
    19da:	8a 81       	ldd	r24, Y+2	; 0x02
    19dc:	28 2f       	mov	r18, r24
    19de:	30 e0       	ldi	r19, 0x00	; 0
    19e0:	81 e0       	ldi	r24, 0x01	; 1
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	02 2e       	mov	r0, r18
    19e6:	02 c0       	rjmp	.+4      	; 0x19ec <MDIO_vidSetPinValue+0x1a4>
    19e8:	88 0f       	add	r24, r24
    19ea:	99 1f       	adc	r25, r25
    19ec:	0a 94       	dec	r0
    19ee:	e2 f7       	brpl	.-8      	; 0x19e8 <MDIO_vidSetPinValue+0x1a0>
    19f0:	80 95       	com	r24
    19f2:	84 23       	and	r24, r20
    19f4:	8c 93       	st	X, r24
    19f6:	29 c0       	rjmp	.+82     	; 0x1a4a <MDIO_vidSetPinValue+0x202>
		case	PORT_C:	CLR_BIT(PORTC, cpy_u8PinNumber);	break;
    19f8:	a5 e3       	ldi	r26, 0x35	; 53
    19fa:	b0 e0       	ldi	r27, 0x00	; 0
    19fc:	e5 e3       	ldi	r30, 0x35	; 53
    19fe:	f0 e0       	ldi	r31, 0x00	; 0
    1a00:	80 81       	ld	r24, Z
    1a02:	48 2f       	mov	r20, r24
    1a04:	8a 81       	ldd	r24, Y+2	; 0x02
    1a06:	28 2f       	mov	r18, r24
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	81 e0       	ldi	r24, 0x01	; 1
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	02 2e       	mov	r0, r18
    1a10:	02 c0       	rjmp	.+4      	; 0x1a16 <MDIO_vidSetPinValue+0x1ce>
    1a12:	88 0f       	add	r24, r24
    1a14:	99 1f       	adc	r25, r25
    1a16:	0a 94       	dec	r0
    1a18:	e2 f7       	brpl	.-8      	; 0x1a12 <MDIO_vidSetPinValue+0x1ca>
    1a1a:	80 95       	com	r24
    1a1c:	84 23       	and	r24, r20
    1a1e:	8c 93       	st	X, r24
    1a20:	14 c0       	rjmp	.+40     	; 0x1a4a <MDIO_vidSetPinValue+0x202>
		case	PORT_D:	CLR_BIT(PORTD, cpy_u8PinNumber);	break;
    1a22:	a2 e3       	ldi	r26, 0x32	; 50
    1a24:	b0 e0       	ldi	r27, 0x00	; 0
    1a26:	e2 e3       	ldi	r30, 0x32	; 50
    1a28:	f0 e0       	ldi	r31, 0x00	; 0
    1a2a:	80 81       	ld	r24, Z
    1a2c:	48 2f       	mov	r20, r24
    1a2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a30:	28 2f       	mov	r18, r24
    1a32:	30 e0       	ldi	r19, 0x00	; 0
    1a34:	81 e0       	ldi	r24, 0x01	; 1
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	02 2e       	mov	r0, r18
    1a3a:	02 c0       	rjmp	.+4      	; 0x1a40 <MDIO_vidSetPinValue+0x1f8>
    1a3c:	88 0f       	add	r24, r24
    1a3e:	99 1f       	adc	r25, r25
    1a40:	0a 94       	dec	r0
    1a42:	e2 f7       	brpl	.-8      	; 0x1a3c <MDIO_vidSetPinValue+0x1f4>
    1a44:	80 95       	com	r24
    1a46:	84 23       	and	r24, r20
    1a48:	8c 93       	st	X, r24
	default:
		/* wrong value */
		break;
	}

}
    1a4a:	29 96       	adiw	r28, 0x09	; 9
    1a4c:	0f b6       	in	r0, 0x3f	; 63
    1a4e:	f8 94       	cli
    1a50:	de bf       	out	0x3e, r29	; 62
    1a52:	0f be       	out	0x3f, r0	; 63
    1a54:	cd bf       	out	0x3d, r28	; 61
    1a56:	cf 91       	pop	r28
    1a58:	df 91       	pop	r29
    1a5a:	08 95       	ret

00001a5c <MDIO_vidGetPinValue>:



void MDIO_vidGetPinValue(u8 cpy_u8PortNumber, u8 cpy_u8PinNumber, u8* buf_u8PinValue)
{
    1a5c:	df 93       	push	r29
    1a5e:	cf 93       	push	r28
    1a60:	00 d0       	rcall	.+0      	; 0x1a62 <MDIO_vidGetPinValue+0x6>
    1a62:	00 d0       	rcall	.+0      	; 0x1a64 <MDIO_vidGetPinValue+0x8>
    1a64:	00 d0       	rcall	.+0      	; 0x1a66 <MDIO_vidGetPinValue+0xa>
    1a66:	cd b7       	in	r28, 0x3d	; 61
    1a68:	de b7       	in	r29, 0x3e	; 62
    1a6a:	89 83       	std	Y+1, r24	; 0x01
    1a6c:	6a 83       	std	Y+2, r22	; 0x02
    1a6e:	5c 83       	std	Y+4, r21	; 0x04
    1a70:	4b 83       	std	Y+3, r20	; 0x03
	// PINs registers
	switch (cpy_u8PortNumber)	// get bit
    1a72:	89 81       	ldd	r24, Y+1	; 0x01
    1a74:	28 2f       	mov	r18, r24
    1a76:	30 e0       	ldi	r19, 0x00	; 0
    1a78:	3e 83       	std	Y+6, r19	; 0x06
    1a7a:	2d 83       	std	Y+5, r18	; 0x05
    1a7c:	4d 81       	ldd	r20, Y+5	; 0x05
    1a7e:	5e 81       	ldd	r21, Y+6	; 0x06
    1a80:	42 34       	cpi	r20, 0x42	; 66
    1a82:	51 05       	cpc	r21, r1
    1a84:	59 f1       	breq	.+86     	; 0x1adc <MDIO_vidGetPinValue+0x80>
    1a86:	8d 81       	ldd	r24, Y+5	; 0x05
    1a88:	9e 81       	ldd	r25, Y+6	; 0x06
    1a8a:	83 34       	cpi	r24, 0x43	; 67
    1a8c:	91 05       	cpc	r25, r1
    1a8e:	34 f4       	brge	.+12     	; 0x1a9c <MDIO_vidGetPinValue+0x40>
    1a90:	2d 81       	ldd	r18, Y+5	; 0x05
    1a92:	3e 81       	ldd	r19, Y+6	; 0x06
    1a94:	21 34       	cpi	r18, 0x41	; 65
    1a96:	31 05       	cpc	r19, r1
    1a98:	69 f0       	breq	.+26     	; 0x1ab4 <MDIO_vidGetPinValue+0x58>
    1a9a:	5b c0       	rjmp	.+182    	; 0x1b52 <MDIO_vidGetPinValue+0xf6>
    1a9c:	4d 81       	ldd	r20, Y+5	; 0x05
    1a9e:	5e 81       	ldd	r21, Y+6	; 0x06
    1aa0:	43 34       	cpi	r20, 0x43	; 67
    1aa2:	51 05       	cpc	r21, r1
    1aa4:	79 f1       	breq	.+94     	; 0x1b04 <MDIO_vidGetPinValue+0xa8>
    1aa6:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa8:	9e 81       	ldd	r25, Y+6	; 0x06
    1aaa:	84 34       	cpi	r24, 0x44	; 68
    1aac:	91 05       	cpc	r25, r1
    1aae:	09 f4       	brne	.+2      	; 0x1ab2 <MDIO_vidGetPinValue+0x56>
    1ab0:	3d c0       	rjmp	.+122    	; 0x1b2c <MDIO_vidGetPinValue+0xd0>
    1ab2:	4f c0       	rjmp	.+158    	; 0x1b52 <MDIO_vidGetPinValue+0xf6>
	{
	case	PORT_A:	*buf_u8PinValue = GET_BIT(PINA, cpy_u8PinNumber);	break;
    1ab4:	e9 e3       	ldi	r30, 0x39	; 57
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	80 81       	ld	r24, Z
    1aba:	28 2f       	mov	r18, r24
    1abc:	30 e0       	ldi	r19, 0x00	; 0
    1abe:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac0:	88 2f       	mov	r24, r24
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	a9 01       	movw	r20, r18
    1ac6:	02 c0       	rjmp	.+4      	; 0x1acc <MDIO_vidGetPinValue+0x70>
    1ac8:	55 95       	asr	r21
    1aca:	47 95       	ror	r20
    1acc:	8a 95       	dec	r24
    1ace:	e2 f7       	brpl	.-8      	; 0x1ac8 <MDIO_vidGetPinValue+0x6c>
    1ad0:	ca 01       	movw	r24, r20
    1ad2:	81 70       	andi	r24, 0x01	; 1
    1ad4:	eb 81       	ldd	r30, Y+3	; 0x03
    1ad6:	fc 81       	ldd	r31, Y+4	; 0x04
    1ad8:	80 83       	st	Z, r24
    1ada:	3b c0       	rjmp	.+118    	; 0x1b52 <MDIO_vidGetPinValue+0xf6>
	case	PORT_B:	*buf_u8PinValue = GET_BIT(PINB, cpy_u8PinNumber);	break;
    1adc:	e6 e3       	ldi	r30, 0x36	; 54
    1ade:	f0 e0       	ldi	r31, 0x00	; 0
    1ae0:	80 81       	ld	r24, Z
    1ae2:	28 2f       	mov	r18, r24
    1ae4:	30 e0       	ldi	r19, 0x00	; 0
    1ae6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae8:	88 2f       	mov	r24, r24
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	a9 01       	movw	r20, r18
    1aee:	02 c0       	rjmp	.+4      	; 0x1af4 <MDIO_vidGetPinValue+0x98>
    1af0:	55 95       	asr	r21
    1af2:	47 95       	ror	r20
    1af4:	8a 95       	dec	r24
    1af6:	e2 f7       	brpl	.-8      	; 0x1af0 <MDIO_vidGetPinValue+0x94>
    1af8:	ca 01       	movw	r24, r20
    1afa:	81 70       	andi	r24, 0x01	; 1
    1afc:	eb 81       	ldd	r30, Y+3	; 0x03
    1afe:	fc 81       	ldd	r31, Y+4	; 0x04
    1b00:	80 83       	st	Z, r24
    1b02:	27 c0       	rjmp	.+78     	; 0x1b52 <MDIO_vidGetPinValue+0xf6>
	case	PORT_C:	*buf_u8PinValue = GET_BIT(PINC, cpy_u8PinNumber);	break;
    1b04:	e3 e3       	ldi	r30, 0x33	; 51
    1b06:	f0 e0       	ldi	r31, 0x00	; 0
    1b08:	80 81       	ld	r24, Z
    1b0a:	28 2f       	mov	r18, r24
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b10:	88 2f       	mov	r24, r24
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	a9 01       	movw	r20, r18
    1b16:	02 c0       	rjmp	.+4      	; 0x1b1c <MDIO_vidGetPinValue+0xc0>
    1b18:	55 95       	asr	r21
    1b1a:	47 95       	ror	r20
    1b1c:	8a 95       	dec	r24
    1b1e:	e2 f7       	brpl	.-8      	; 0x1b18 <MDIO_vidGetPinValue+0xbc>
    1b20:	ca 01       	movw	r24, r20
    1b22:	81 70       	andi	r24, 0x01	; 1
    1b24:	eb 81       	ldd	r30, Y+3	; 0x03
    1b26:	fc 81       	ldd	r31, Y+4	; 0x04
    1b28:	80 83       	st	Z, r24
    1b2a:	13 c0       	rjmp	.+38     	; 0x1b52 <MDIO_vidGetPinValue+0xf6>
	case	PORT_D:	*buf_u8PinValue = GET_BIT(PIND, cpy_u8PinNumber);	break;
    1b2c:	e0 e3       	ldi	r30, 0x30	; 48
    1b2e:	f0 e0       	ldi	r31, 0x00	; 0
    1b30:	80 81       	ld	r24, Z
    1b32:	28 2f       	mov	r18, r24
    1b34:	30 e0       	ldi	r19, 0x00	; 0
    1b36:	8a 81       	ldd	r24, Y+2	; 0x02
    1b38:	88 2f       	mov	r24, r24
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	a9 01       	movw	r20, r18
    1b3e:	02 c0       	rjmp	.+4      	; 0x1b44 <MDIO_vidGetPinValue+0xe8>
    1b40:	55 95       	asr	r21
    1b42:	47 95       	ror	r20
    1b44:	8a 95       	dec	r24
    1b46:	e2 f7       	brpl	.-8      	; 0x1b40 <MDIO_vidGetPinValue+0xe4>
    1b48:	ca 01       	movw	r24, r20
    1b4a:	81 70       	andi	r24, 0x01	; 1
    1b4c:	eb 81       	ldd	r30, Y+3	; 0x03
    1b4e:	fc 81       	ldd	r31, Y+4	; 0x04
    1b50:	80 83       	st	Z, r24
	default:	/* wrong port number */	break;
	}
}
    1b52:	26 96       	adiw	r28, 0x06	; 6
    1b54:	0f b6       	in	r0, 0x3f	; 63
    1b56:	f8 94       	cli
    1b58:	de bf       	out	0x3e, r29	; 62
    1b5a:	0f be       	out	0x3f, r0	; 63
    1b5c:	cd bf       	out	0x3d, r28	; 61
    1b5e:	cf 91       	pop	r28
    1b60:	df 91       	pop	r29
    1b62:	08 95       	ret

00001b64 <MDIO_vidSetPortDirection>:



void MDIO_vidSetPortDirection(u8 cpy_u8PortNumber, u8 cpy_u8PortDirection)
{
    1b64:	df 93       	push	r29
    1b66:	cf 93       	push	r28
    1b68:	00 d0       	rcall	.+0      	; 0x1b6a <MDIO_vidSetPortDirection+0x6>
    1b6a:	00 d0       	rcall	.+0      	; 0x1b6c <MDIO_vidSetPortDirection+0x8>
    1b6c:	cd b7       	in	r28, 0x3d	; 61
    1b6e:	de b7       	in	r29, 0x3e	; 62
    1b70:	89 83       	std	Y+1, r24	; 0x01
    1b72:	6a 83       	std	Y+2, r22	; 0x02
	// DDRs
	switch (cpy_u8PortNumber)
    1b74:	89 81       	ldd	r24, Y+1	; 0x01
    1b76:	28 2f       	mov	r18, r24
    1b78:	30 e0       	ldi	r19, 0x00	; 0
    1b7a:	3c 83       	std	Y+4, r19	; 0x04
    1b7c:	2b 83       	std	Y+3, r18	; 0x03
    1b7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b80:	9c 81       	ldd	r25, Y+4	; 0x04
    1b82:	82 34       	cpi	r24, 0x42	; 66
    1b84:	91 05       	cpc	r25, r1
    1b86:	d9 f0       	breq	.+54     	; 0x1bbe <MDIO_vidSetPortDirection+0x5a>
    1b88:	2b 81       	ldd	r18, Y+3	; 0x03
    1b8a:	3c 81       	ldd	r19, Y+4	; 0x04
    1b8c:	23 34       	cpi	r18, 0x43	; 67
    1b8e:	31 05       	cpc	r19, r1
    1b90:	34 f4       	brge	.+12     	; 0x1b9e <MDIO_vidSetPortDirection+0x3a>
    1b92:	8b 81       	ldd	r24, Y+3	; 0x03
    1b94:	9c 81       	ldd	r25, Y+4	; 0x04
    1b96:	81 34       	cpi	r24, 0x41	; 65
    1b98:	91 05       	cpc	r25, r1
    1b9a:	61 f0       	breq	.+24     	; 0x1bb4 <MDIO_vidSetPortDirection+0x50>
    1b9c:	1e c0       	rjmp	.+60     	; 0x1bda <MDIO_vidSetPortDirection+0x76>
    1b9e:	2b 81       	ldd	r18, Y+3	; 0x03
    1ba0:	3c 81       	ldd	r19, Y+4	; 0x04
    1ba2:	23 34       	cpi	r18, 0x43	; 67
    1ba4:	31 05       	cpc	r19, r1
    1ba6:	81 f0       	breq	.+32     	; 0x1bc8 <MDIO_vidSetPortDirection+0x64>
    1ba8:	8b 81       	ldd	r24, Y+3	; 0x03
    1baa:	9c 81       	ldd	r25, Y+4	; 0x04
    1bac:	84 34       	cpi	r24, 0x44	; 68
    1bae:	91 05       	cpc	r25, r1
    1bb0:	81 f0       	breq	.+32     	; 0x1bd2 <MDIO_vidSetPortDirection+0x6e>
    1bb2:	13 c0       	rjmp	.+38     	; 0x1bda <MDIO_vidSetPortDirection+0x76>
	{
	case 	PORT_A:	DDRA = cpy_u8PortDirection;	break;
    1bb4:	ea e3       	ldi	r30, 0x3A	; 58
    1bb6:	f0 e0       	ldi	r31, 0x00	; 0
    1bb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bba:	80 83       	st	Z, r24
    1bbc:	0e c0       	rjmp	.+28     	; 0x1bda <MDIO_vidSetPortDirection+0x76>
	case	PORT_B:	DDRB = cpy_u8PortDirection;	break;
    1bbe:	e7 e3       	ldi	r30, 0x37	; 55
    1bc0:	f0 e0       	ldi	r31, 0x00	; 0
    1bc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc4:	80 83       	st	Z, r24
    1bc6:	09 c0       	rjmp	.+18     	; 0x1bda <MDIO_vidSetPortDirection+0x76>
	case	PORT_C:	DDRC = cpy_u8PortDirection;	break;
    1bc8:	e4 e3       	ldi	r30, 0x34	; 52
    1bca:	f0 e0       	ldi	r31, 0x00	; 0
    1bcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bce:	80 83       	st	Z, r24
    1bd0:	04 c0       	rjmp	.+8      	; 0x1bda <MDIO_vidSetPortDirection+0x76>
	case	PORT_D:	DDRD = cpy_u8PortDirection;	break;
    1bd2:	e1 e3       	ldi	r30, 0x31	; 49
    1bd4:	f0 e0       	ldi	r31, 0x00	; 0
    1bd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd8:	80 83       	st	Z, r24
	default:/* wrong port number */	break;
	}
}
    1bda:	0f 90       	pop	r0
    1bdc:	0f 90       	pop	r0
    1bde:	0f 90       	pop	r0
    1be0:	0f 90       	pop	r0
    1be2:	cf 91       	pop	r28
    1be4:	df 91       	pop	r29
    1be6:	08 95       	ret

00001be8 <MDIO_vidSetPortValue>:

void MDIO_vidSetPortValue(u8 cpy_u8PortNumber, u8 cpy_u8PortValue)
{
    1be8:	df 93       	push	r29
    1bea:	cf 93       	push	r28
    1bec:	00 d0       	rcall	.+0      	; 0x1bee <MDIO_vidSetPortValue+0x6>
    1bee:	00 d0       	rcall	.+0      	; 0x1bf0 <MDIO_vidSetPortValue+0x8>
    1bf0:	cd b7       	in	r28, 0x3d	; 61
    1bf2:	de b7       	in	r29, 0x3e	; 62
    1bf4:	89 83       	std	Y+1, r24	; 0x01
    1bf6:	6a 83       	std	Y+2, r22	; 0x02
	// PORTs registers
	switch (cpy_u8PortNumber)
    1bf8:	89 81       	ldd	r24, Y+1	; 0x01
    1bfa:	28 2f       	mov	r18, r24
    1bfc:	30 e0       	ldi	r19, 0x00	; 0
    1bfe:	3c 83       	std	Y+4, r19	; 0x04
    1c00:	2b 83       	std	Y+3, r18	; 0x03
    1c02:	8b 81       	ldd	r24, Y+3	; 0x03
    1c04:	9c 81       	ldd	r25, Y+4	; 0x04
    1c06:	82 34       	cpi	r24, 0x42	; 66
    1c08:	91 05       	cpc	r25, r1
    1c0a:	d9 f0       	breq	.+54     	; 0x1c42 <MDIO_vidSetPortValue+0x5a>
    1c0c:	2b 81       	ldd	r18, Y+3	; 0x03
    1c0e:	3c 81       	ldd	r19, Y+4	; 0x04
    1c10:	23 34       	cpi	r18, 0x43	; 67
    1c12:	31 05       	cpc	r19, r1
    1c14:	34 f4       	brge	.+12     	; 0x1c22 <MDIO_vidSetPortValue+0x3a>
    1c16:	8b 81       	ldd	r24, Y+3	; 0x03
    1c18:	9c 81       	ldd	r25, Y+4	; 0x04
    1c1a:	81 34       	cpi	r24, 0x41	; 65
    1c1c:	91 05       	cpc	r25, r1
    1c1e:	61 f0       	breq	.+24     	; 0x1c38 <MDIO_vidSetPortValue+0x50>
    1c20:	1e c0       	rjmp	.+60     	; 0x1c5e <MDIO_vidSetPortValue+0x76>
    1c22:	2b 81       	ldd	r18, Y+3	; 0x03
    1c24:	3c 81       	ldd	r19, Y+4	; 0x04
    1c26:	23 34       	cpi	r18, 0x43	; 67
    1c28:	31 05       	cpc	r19, r1
    1c2a:	81 f0       	breq	.+32     	; 0x1c4c <MDIO_vidSetPortValue+0x64>
    1c2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c30:	84 34       	cpi	r24, 0x44	; 68
    1c32:	91 05       	cpc	r25, r1
    1c34:	81 f0       	breq	.+32     	; 0x1c56 <MDIO_vidSetPortValue+0x6e>
    1c36:	13 c0       	rjmp	.+38     	; 0x1c5e <MDIO_vidSetPortValue+0x76>
	{
	case 	PORT_A:	PORTA = cpy_u8PortValue;	break;
    1c38:	eb e3       	ldi	r30, 0x3B	; 59
    1c3a:	f0 e0       	ldi	r31, 0x00	; 0
    1c3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3e:	80 83       	st	Z, r24
    1c40:	0e c0       	rjmp	.+28     	; 0x1c5e <MDIO_vidSetPortValue+0x76>
	case	PORT_B:	PORTB = cpy_u8PortValue;	break;
    1c42:	e8 e3       	ldi	r30, 0x38	; 56
    1c44:	f0 e0       	ldi	r31, 0x00	; 0
    1c46:	8a 81       	ldd	r24, Y+2	; 0x02
    1c48:	80 83       	st	Z, r24
    1c4a:	09 c0       	rjmp	.+18     	; 0x1c5e <MDIO_vidSetPortValue+0x76>
	case	PORT_C:	PORTC = cpy_u8PortValue;	break;
    1c4c:	e5 e3       	ldi	r30, 0x35	; 53
    1c4e:	f0 e0       	ldi	r31, 0x00	; 0
    1c50:	8a 81       	ldd	r24, Y+2	; 0x02
    1c52:	80 83       	st	Z, r24
    1c54:	04 c0       	rjmp	.+8      	; 0x1c5e <MDIO_vidSetPortValue+0x76>
	case	PORT_D:	PORTD = cpy_u8PortValue;	break;
    1c56:	e2 e3       	ldi	r30, 0x32	; 50
    1c58:	f0 e0       	ldi	r31, 0x00	; 0
    1c5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5c:	80 83       	st	Z, r24
	default:	/* wrong port number */	break;
	}
}
    1c5e:	0f 90       	pop	r0
    1c60:	0f 90       	pop	r0
    1c62:	0f 90       	pop	r0
    1c64:	0f 90       	pop	r0
    1c66:	cf 91       	pop	r28
    1c68:	df 91       	pop	r29
    1c6a:	08 95       	ret

00001c6c <MDIO_vidGetPortValue>:

void MDIO_vidGetPortValue(u8 cpy_u8PortNumber, u8* buf_u8PortValue)
{
    1c6c:	df 93       	push	r29
    1c6e:	cf 93       	push	r28
    1c70:	00 d0       	rcall	.+0      	; 0x1c72 <MDIO_vidGetPortValue+0x6>
    1c72:	00 d0       	rcall	.+0      	; 0x1c74 <MDIO_vidGetPortValue+0x8>
    1c74:	0f 92       	push	r0
    1c76:	cd b7       	in	r28, 0x3d	; 61
    1c78:	de b7       	in	r29, 0x3e	; 62
    1c7a:	89 83       	std	Y+1, r24	; 0x01
    1c7c:	7b 83       	std	Y+3, r23	; 0x03
    1c7e:	6a 83       	std	Y+2, r22	; 0x02
	// PINs registers
	switch (cpy_u8PortNumber)
    1c80:	89 81       	ldd	r24, Y+1	; 0x01
    1c82:	28 2f       	mov	r18, r24
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	3d 83       	std	Y+5, r19	; 0x05
    1c88:	2c 83       	std	Y+4, r18	; 0x04
    1c8a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c8c:	9d 81       	ldd	r25, Y+5	; 0x05
    1c8e:	82 34       	cpi	r24, 0x42	; 66
    1c90:	91 05       	cpc	r25, r1
    1c92:	e9 f0       	breq	.+58     	; 0x1cce <MDIO_vidGetPortValue+0x62>
    1c94:	2c 81       	ldd	r18, Y+4	; 0x04
    1c96:	3d 81       	ldd	r19, Y+5	; 0x05
    1c98:	23 34       	cpi	r18, 0x43	; 67
    1c9a:	31 05       	cpc	r19, r1
    1c9c:	34 f4       	brge	.+12     	; 0x1caa <MDIO_vidGetPortValue+0x3e>
    1c9e:	8c 81       	ldd	r24, Y+4	; 0x04
    1ca0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ca2:	81 34       	cpi	r24, 0x41	; 65
    1ca4:	91 05       	cpc	r25, r1
    1ca6:	61 f0       	breq	.+24     	; 0x1cc0 <MDIO_vidGetPortValue+0x54>
    1ca8:	26 c0       	rjmp	.+76     	; 0x1cf6 <MDIO_vidGetPortValue+0x8a>
    1caa:	2c 81       	ldd	r18, Y+4	; 0x04
    1cac:	3d 81       	ldd	r19, Y+5	; 0x05
    1cae:	23 34       	cpi	r18, 0x43	; 67
    1cb0:	31 05       	cpc	r19, r1
    1cb2:	a1 f0       	breq	.+40     	; 0x1cdc <MDIO_vidGetPortValue+0x70>
    1cb4:	8c 81       	ldd	r24, Y+4	; 0x04
    1cb6:	9d 81       	ldd	r25, Y+5	; 0x05
    1cb8:	84 34       	cpi	r24, 0x44	; 68
    1cba:	91 05       	cpc	r25, r1
    1cbc:	b1 f0       	breq	.+44     	; 0x1cea <MDIO_vidGetPortValue+0x7e>
    1cbe:	1b c0       	rjmp	.+54     	; 0x1cf6 <MDIO_vidGetPortValue+0x8a>
	{
	case 	PORT_A:	*buf_u8PortValue = PINA;	break;
    1cc0:	e9 e3       	ldi	r30, 0x39	; 57
    1cc2:	f0 e0       	ldi	r31, 0x00	; 0
    1cc4:	80 81       	ld	r24, Z
    1cc6:	ea 81       	ldd	r30, Y+2	; 0x02
    1cc8:	fb 81       	ldd	r31, Y+3	; 0x03
    1cca:	80 83       	st	Z, r24
    1ccc:	14 c0       	rjmp	.+40     	; 0x1cf6 <MDIO_vidGetPortValue+0x8a>
	case	PORT_B:	*buf_u8PortValue = PINB;	break;
    1cce:	e6 e3       	ldi	r30, 0x36	; 54
    1cd0:	f0 e0       	ldi	r31, 0x00	; 0
    1cd2:	80 81       	ld	r24, Z
    1cd4:	ea 81       	ldd	r30, Y+2	; 0x02
    1cd6:	fb 81       	ldd	r31, Y+3	; 0x03
    1cd8:	80 83       	st	Z, r24
    1cda:	0d c0       	rjmp	.+26     	; 0x1cf6 <MDIO_vidGetPortValue+0x8a>
	case	PORT_C:	*buf_u8PortValue = PINC;	break;
    1cdc:	e3 e3       	ldi	r30, 0x33	; 51
    1cde:	f0 e0       	ldi	r31, 0x00	; 0
    1ce0:	80 81       	ld	r24, Z
    1ce2:	ea 81       	ldd	r30, Y+2	; 0x02
    1ce4:	fb 81       	ldd	r31, Y+3	; 0x03
    1ce6:	80 83       	st	Z, r24
    1ce8:	06 c0       	rjmp	.+12     	; 0x1cf6 <MDIO_vidGetPortValue+0x8a>
	case	PORT_D:	*buf_u8PortValue = PIND;	break;
    1cea:	e0 e3       	ldi	r30, 0x30	; 48
    1cec:	f0 e0       	ldi	r31, 0x00	; 0
    1cee:	80 81       	ld	r24, Z
    1cf0:	ea 81       	ldd	r30, Y+2	; 0x02
    1cf2:	fb 81       	ldd	r31, Y+3	; 0x03
    1cf4:	80 83       	st	Z, r24
	default:	/* wrong port number */	break;
	}
}
    1cf6:	0f 90       	pop	r0
    1cf8:	0f 90       	pop	r0
    1cfa:	0f 90       	pop	r0
    1cfc:	0f 90       	pop	r0
    1cfe:	0f 90       	pop	r0
    1d00:	cf 91       	pop	r28
    1d02:	df 91       	pop	r29
    1d04:	08 95       	ret

00001d06 <MGIE_vidEnable>:




void MGIE_vidEnable()
{
    1d06:	df 93       	push	r29
    1d08:	cf 93       	push	r28
    1d0a:	cd b7       	in	r28, 0x3d	; 61
    1d0c:	de b7       	in	r29, 0x3e	; 62
	/*set bit #7 at the status register*/
	SET_BIT(SREG,I);
    1d0e:	af e5       	ldi	r26, 0x5F	; 95
    1d10:	b0 e0       	ldi	r27, 0x00	; 0
    1d12:	ef e5       	ldi	r30, 0x5F	; 95
    1d14:	f0 e0       	ldi	r31, 0x00	; 0
    1d16:	80 81       	ld	r24, Z
    1d18:	80 68       	ori	r24, 0x80	; 128
    1d1a:	8c 93       	st	X, r24
}
    1d1c:	cf 91       	pop	r28
    1d1e:	df 91       	pop	r29
    1d20:	08 95       	ret

00001d22 <MGIE_vidDisable>:
void MGIE_vidDisable()
{
    1d22:	df 93       	push	r29
    1d24:	cf 93       	push	r28
    1d26:	cd b7       	in	r28, 0x3d	; 61
    1d28:	de b7       	in	r29, 0x3e	; 62
	/*Clear bit #7 at the status register*/
	CLR_BIT(SREG,I);
    1d2a:	af e5       	ldi	r26, 0x5F	; 95
    1d2c:	b0 e0       	ldi	r27, 0x00	; 0
    1d2e:	ef e5       	ldi	r30, 0x5F	; 95
    1d30:	f0 e0       	ldi	r31, 0x00	; 0
    1d32:	80 81       	ld	r24, Z
    1d34:	8f 77       	andi	r24, 0x7F	; 127
    1d36:	8c 93       	st	X, r24

}
    1d38:	cf 91       	pop	r28
    1d3a:	df 91       	pop	r29
    1d3c:	08 95       	ret

00001d3e <TurnOnHeater>:
//{
//	TIMER0_Vid_SetCompMatchValue((DutyCycle/100)*255);
//}

void TurnOnHeater()
{
    1d3e:	df 93       	push	r29
    1d40:	cf 93       	push	r28
    1d42:	cd b7       	in	r28, 0x3d	; 61
    1d44:	de b7       	in	r29, 0x3e	; 62


	MDIO_vidSetPinDirection(PORT_B,3,OUTPUT);
    1d46:	82 e4       	ldi	r24, 0x42	; 66
    1d48:	63 e0       	ldi	r22, 0x03	; 3
    1d4a:	41 e0       	ldi	r20, 0x01	; 1
    1d4c:	0e 94 1a 0b 	call	0x1634	; 0x1634 <MDIO_vidSetPinDirection>
	TIMER0_Vid_init(TIMER0_FASTPWM_MODE,clk_64_prescaler);
    1d50:	83 e0       	ldi	r24, 0x03	; 3
    1d52:	63 e0       	ldi	r22, 0x03	; 3
    1d54:	0e 94 1b 09 	call	0x1236	; 0x1236 <TIMER0_Vid_init>
	TIMER0_Vid_SetFpwm_Mode(non_inverted);
    1d58:	81 e0       	ldi	r24, 0x01	; 1
    1d5a:	0e 94 be 09 	call	0x137c	; 0x137c <TIMER0_Vid_SetFpwm_Mode>
	TIMER0_Vid_SetCompMatchValue((DutyCycle/100)*255);
    1d5e:	80 91 68 00 	lds	r24, 0x0068
    1d62:	90 91 69 00 	lds	r25, 0x0069
    1d66:	a0 91 6a 00 	lds	r26, 0x006A
    1d6a:	b0 91 6b 00 	lds	r27, 0x006B
    1d6e:	bc 01       	movw	r22, r24
    1d70:	cd 01       	movw	r24, r26
    1d72:	20 e0       	ldi	r18, 0x00	; 0
    1d74:	30 e0       	ldi	r19, 0x00	; 0
    1d76:	48 ec       	ldi	r20, 0xC8	; 200
    1d78:	52 e4       	ldi	r21, 0x42	; 66
    1d7a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1d7e:	dc 01       	movw	r26, r24
    1d80:	cb 01       	movw	r24, r22
    1d82:	bc 01       	movw	r22, r24
    1d84:	cd 01       	movw	r24, r26
    1d86:	20 e0       	ldi	r18, 0x00	; 0
    1d88:	30 e0       	ldi	r19, 0x00	; 0
    1d8a:	4f e7       	ldi	r20, 0x7F	; 127
    1d8c:	53 e4       	ldi	r21, 0x43	; 67
    1d8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d92:	dc 01       	movw	r26, r24
    1d94:	cb 01       	movw	r24, r22
    1d96:	bc 01       	movw	r22, r24
    1d98:	cd 01       	movw	r24, r26
    1d9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d9e:	dc 01       	movw	r26, r24
    1da0:	cb 01       	movw	r24, r22
    1da2:	0e 94 b0 09 	call	0x1360	; 0x1360 <TIMER0_Vid_SetCompMatchValue>

	MDIO_vidSetPinDirection(PORT_D,5,OUTPUT);
    1da6:	84 e4       	ldi	r24, 0x44	; 68
    1da8:	65 e0       	ldi	r22, 0x05	; 5
    1daa:	41 e0       	ldi	r20, 0x01	; 1
    1dac:	0e 94 1a 0b 	call	0x1634	; 0x1634 <MDIO_vidSetPinDirection>
	MDIO_vidSetPinValue(PORT_D,5,LOW);
    1db0:	84 e4       	ldi	r24, 0x44	; 68
    1db2:	65 e0       	ldi	r22, 0x05	; 5
    1db4:	40 e0       	ldi	r20, 0x00	; 0
    1db6:	0e 94 24 0c 	call	0x1848	; 0x1848 <MDIO_vidSetPinValue>

	MDIO_vidSetPinDirection(PORT_D,6,OUTPUT);
    1dba:	84 e4       	ldi	r24, 0x44	; 68
    1dbc:	66 e0       	ldi	r22, 0x06	; 6
    1dbe:	41 e0       	ldi	r20, 0x01	; 1
    1dc0:	0e 94 1a 0b 	call	0x1634	; 0x1634 <MDIO_vidSetPinDirection>
	MDIO_vidSetPinValue(PORT_D,6,LOW);
    1dc4:	84 e4       	ldi	r24, 0x44	; 68
    1dc6:	66 e0       	ldi	r22, 0x06	; 6
    1dc8:	40 e0       	ldi	r20, 0x00	; 0
    1dca:	0e 94 24 0c 	call	0x1848	; 0x1848 <MDIO_vidSetPinValue>

	MDIO_vidSetPinDirection(PORT_D,7,OUTPUT);
    1dce:	84 e4       	ldi	r24, 0x44	; 68
    1dd0:	67 e0       	ldi	r22, 0x07	; 7
    1dd2:	41 e0       	ldi	r20, 0x01	; 1
    1dd4:	0e 94 1a 0b 	call	0x1634	; 0x1634 <MDIO_vidSetPinDirection>
	MDIO_vidSetPinValue(PORT_D,7,LOW);
    1dd8:	84 e4       	ldi	r24, 0x44	; 68
    1dda:	67 e0       	ldi	r22, 0x07	; 7
    1ddc:	40 e0       	ldi	r20, 0x00	; 0
    1dde:	0e 94 24 0c 	call	0x1848	; 0x1848 <MDIO_vidSetPinValue>

//	TIMER0_Interrupt_Enable();
//	MGIE_vidEnable();
//
//	TIMERS_u8Timer0SetCallBack(&OverFlowInterrupt);
}
    1de2:	cf 91       	pop	r28
    1de4:	df 91       	pop	r29
    1de6:	08 95       	ret

00001de8 <TurnOnCooler>:

void TurnOnCooler()
{
    1de8:	df 93       	push	r29
    1dea:	cf 93       	push	r28
    1dec:	cd b7       	in	r28, 0x3d	; 61
    1dee:	de b7       	in	r29, 0x3e	; 62


	MDIO_vidSetPinDirection(PORT_B,3,OUTPUT);
    1df0:	82 e4       	ldi	r24, 0x42	; 66
    1df2:	63 e0       	ldi	r22, 0x03	; 3
    1df4:	41 e0       	ldi	r20, 0x01	; 1
    1df6:	0e 94 1a 0b 	call	0x1634	; 0x1634 <MDIO_vidSetPinDirection>
	TIMER0_Vid_init(TIMER0_FASTPWM_MODE,clk_64_prescaler);
    1dfa:	83 e0       	ldi	r24, 0x03	; 3
    1dfc:	63 e0       	ldi	r22, 0x03	; 3
    1dfe:	0e 94 1b 09 	call	0x1236	; 0x1236 <TIMER0_Vid_init>
	TIMER0_Vid_SetFpwm_Mode(non_inverted);
    1e02:	81 e0       	ldi	r24, 0x01	; 1
    1e04:	0e 94 be 09 	call	0x137c	; 0x137c <TIMER0_Vid_SetFpwm_Mode>
	TIMER0_Vid_SetCompMatchValue((DutyCycle/100)*255);
    1e08:	80 91 68 00 	lds	r24, 0x0068
    1e0c:	90 91 69 00 	lds	r25, 0x0069
    1e10:	a0 91 6a 00 	lds	r26, 0x006A
    1e14:	b0 91 6b 00 	lds	r27, 0x006B
    1e18:	bc 01       	movw	r22, r24
    1e1a:	cd 01       	movw	r24, r26
    1e1c:	20 e0       	ldi	r18, 0x00	; 0
    1e1e:	30 e0       	ldi	r19, 0x00	; 0
    1e20:	48 ec       	ldi	r20, 0xC8	; 200
    1e22:	52 e4       	ldi	r21, 0x42	; 66
    1e24:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1e28:	dc 01       	movw	r26, r24
    1e2a:	cb 01       	movw	r24, r22
    1e2c:	bc 01       	movw	r22, r24
    1e2e:	cd 01       	movw	r24, r26
    1e30:	20 e0       	ldi	r18, 0x00	; 0
    1e32:	30 e0       	ldi	r19, 0x00	; 0
    1e34:	4f e7       	ldi	r20, 0x7F	; 127
    1e36:	53 e4       	ldi	r21, 0x43	; 67
    1e38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e3c:	dc 01       	movw	r26, r24
    1e3e:	cb 01       	movw	r24, r22
    1e40:	bc 01       	movw	r22, r24
    1e42:	cd 01       	movw	r24, r26
    1e44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e48:	dc 01       	movw	r26, r24
    1e4a:	cb 01       	movw	r24, r22
    1e4c:	0e 94 b0 09 	call	0x1360	; 0x1360 <TIMER0_Vid_SetCompMatchValue>

	MDIO_vidSetPinDirection(PORT_D,5,OUTPUT);
    1e50:	84 e4       	ldi	r24, 0x44	; 68
    1e52:	65 e0       	ldi	r22, 0x05	; 5
    1e54:	41 e0       	ldi	r20, 0x01	; 1
    1e56:	0e 94 1a 0b 	call	0x1634	; 0x1634 <MDIO_vidSetPinDirection>
	MDIO_vidSetPinValue(PORT_D,5,LOW);
    1e5a:	84 e4       	ldi	r24, 0x44	; 68
    1e5c:	65 e0       	ldi	r22, 0x05	; 5
    1e5e:	40 e0       	ldi	r20, 0x00	; 0
    1e60:	0e 94 24 0c 	call	0x1848	; 0x1848 <MDIO_vidSetPinValue>

	MDIO_vidSetPinDirection(PORT_D,6,OUTPUT);
    1e64:	84 e4       	ldi	r24, 0x44	; 68
    1e66:	66 e0       	ldi	r22, 0x06	; 6
    1e68:	41 e0       	ldi	r20, 0x01	; 1
    1e6a:	0e 94 1a 0b 	call	0x1634	; 0x1634 <MDIO_vidSetPinDirection>
	MDIO_vidSetPinValue(PORT_D,6,LOW);
    1e6e:	84 e4       	ldi	r24, 0x44	; 68
    1e70:	66 e0       	ldi	r22, 0x06	; 6
    1e72:	40 e0       	ldi	r20, 0x00	; 0
    1e74:	0e 94 24 0c 	call	0x1848	; 0x1848 <MDIO_vidSetPinValue>

	MDIO_vidSetPinDirection(PORT_D,7,OUTPUT);
    1e78:	84 e4       	ldi	r24, 0x44	; 68
    1e7a:	67 e0       	ldi	r22, 0x07	; 7
    1e7c:	41 e0       	ldi	r20, 0x01	; 1
    1e7e:	0e 94 1a 0b 	call	0x1634	; 0x1634 <MDIO_vidSetPinDirection>
	MDIO_vidSetPinValue(PORT_D,7,HIGH);
    1e82:	84 e4       	ldi	r24, 0x44	; 68
    1e84:	67 e0       	ldi	r22, 0x07	; 7
    1e86:	41 e0       	ldi	r20, 0x01	; 1
    1e88:	0e 94 24 0c 	call	0x1848	; 0x1848 <MDIO_vidSetPinValue>

//	TIMER0_Interrupt_Enable();
//	MGIE_vidEnable();

	//TIMERS_u8Timer0SetCallBack(&OverFlowInterrupt);
}
    1e8c:	cf 91       	pop	r28
    1e8e:	df 91       	pop	r29
    1e90:	08 95       	ret

00001e92 <TurnOnEqualLed>:

void TurnOnEqualLed()
{
    1e92:	df 93       	push	r29
    1e94:	cf 93       	push	r28
    1e96:	cd b7       	in	r28, 0x3d	; 61
    1e98:	de b7       	in	r29, 0x3e	; 62
	MDIO_vidSetPinDirection(PORT_D,5,OUTPUT);
    1e9a:	84 e4       	ldi	r24, 0x44	; 68
    1e9c:	65 e0       	ldi	r22, 0x05	; 5
    1e9e:	41 e0       	ldi	r20, 0x01	; 1
    1ea0:	0e 94 1a 0b 	call	0x1634	; 0x1634 <MDIO_vidSetPinDirection>
	MDIO_vidSetPinDirection(PORT_D,6,OUTPUT);
    1ea4:	84 e4       	ldi	r24, 0x44	; 68
    1ea6:	66 e0       	ldi	r22, 0x06	; 6
    1ea8:	41 e0       	ldi	r20, 0x01	; 1
    1eaa:	0e 94 1a 0b 	call	0x1634	; 0x1634 <MDIO_vidSetPinDirection>

	MDIO_vidSetPinValue(PORT_D,5,HIGH);
    1eae:	84 e4       	ldi	r24, 0x44	; 68
    1eb0:	65 e0       	ldi	r22, 0x05	; 5
    1eb2:	41 e0       	ldi	r20, 0x01	; 1
    1eb4:	0e 94 24 0c 	call	0x1848	; 0x1848 <MDIO_vidSetPinValue>
	MDIO_vidSetPinValue(PORT_D,6,HIGH);
    1eb8:	84 e4       	ldi	r24, 0x44	; 68
    1eba:	66 e0       	ldi	r22, 0x06	; 6
    1ebc:	41 e0       	ldi	r20, 0x01	; 1
    1ebe:	0e 94 24 0c 	call	0x1848	; 0x1848 <MDIO_vidSetPinValue>

//				MDIO_vidSetPinDirection(PORT_D,1,OUTPUT);
//				MDIO_vidSetPinValue(PORT_D,1,LOW);
	//_delay_ms(10);
}
    1ec2:	cf 91       	pop	r28
    1ec4:	df 91       	pop	r29
    1ec6:	08 95       	ret

00001ec8 <CompareTemp>:

void CompareTemp(u8 CurrentTemp,u8 DesiredTemp)
{
    1ec8:	df 93       	push	r29
    1eca:	cf 93       	push	r28
    1ecc:	00 d0       	rcall	.+0      	; 0x1ece <CompareTemp+0x6>
    1ece:	cd b7       	in	r28, 0x3d	; 61
    1ed0:	de b7       	in	r29, 0x3e	; 62
    1ed2:	89 83       	std	Y+1, r24	; 0x01
    1ed4:	6a 83       	std	Y+2, r22	; 0x02
	if(CurrentTemp<DesiredTemp)
    1ed6:	99 81       	ldd	r25, Y+1	; 0x01
    1ed8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eda:	98 17       	cp	r25, r24
    1edc:	30 f4       	brcc	.+12     	; 0x1eea <CompareTemp+0x22>
	{
		TurnOnHeater();
    1ede:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <TurnOnHeater>
		//return HEATING;
		UART_VidSendData(HEATING);
    1ee2:	80 e0       	ldi	r24, 0x00	; 0
    1ee4:	0e 94 c5 0a 	call	0x158a	; 0x158a <UART_VidSendData>
    1ee8:	0f c0       	rjmp	.+30     	; 0x1f08 <CompareTemp+0x40>
	}


	else if(CurrentTemp>DesiredTemp)
    1eea:	99 81       	ldd	r25, Y+1	; 0x01
    1eec:	8a 81       	ldd	r24, Y+2	; 0x02
    1eee:	89 17       	cp	r24, r25
    1ef0:	30 f4       	brcc	.+12     	; 0x1efe <CompareTemp+0x36>
	{
		TurnOnCooler();
    1ef2:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <TurnOnCooler>
		//return COOLING;
		UART_VidSendData(COOLING);
    1ef6:	81 e0       	ldi	r24, 0x01	; 1
    1ef8:	0e 94 c5 0a 	call	0x158a	; 0x158a <UART_VidSendData>
    1efc:	05 c0       	rjmp	.+10     	; 0x1f08 <CompareTemp+0x40>
	}
	else
	{
		TurnOnEqualLed();
    1efe:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <TurnOnEqualLed>
		//return NoOperation;
		UART_VidSendData(NoOperation);
    1f02:	82 e0       	ldi	r24, 0x02	; 2
    1f04:	0e 94 c5 0a 	call	0x158a	; 0x158a <UART_VidSendData>
	}
}
    1f08:	0f 90       	pop	r0
    1f0a:	0f 90       	pop	r0
    1f0c:	cf 91       	pop	r28
    1f0e:	df 91       	pop	r29
    1f10:	08 95       	ret

00001f12 <main>:

int main()
{
    1f12:	0f 93       	push	r16
    1f14:	1f 93       	push	r17
    1f16:	df 93       	push	r29
    1f18:	cf 93       	push	r28
    1f1a:	cd b7       	in	r28, 0x3d	; 61
    1f1c:	de b7       	in	r29, 0x3e	; 62
    1f1e:	c9 54       	subi	r28, 0x49	; 73
    1f20:	d0 40       	sbci	r29, 0x00	; 0
    1f22:	0f b6       	in	r0, 0x3f	; 63
    1f24:	f8 94       	cli
    1f26:	de bf       	out	0x3e, r29	; 62
    1f28:	0f be       	out	0x3f, r0	; 63
    1f2a:	cd bf       	out	0x3d, r28	; 61

	//MDIO_vidSetPinDirection(PORT_A,7,OUTPUT);

	//SPI_VidSlaveInit();

	MDIO_vidSetPinDirection(PORT_D,0,INPUT);
    1f2c:	84 e4       	ldi	r24, 0x44	; 68
    1f2e:	60 e0       	ldi	r22, 0x00	; 0
    1f30:	40 e0       	ldi	r20, 0x00	; 0
    1f32:	0e 94 1a 0b 	call	0x1634	; 0x1634 <MDIO_vidSetPinDirection>
	MDIO_vidSetPinDirection(PORT_D,1,OUTPUT);
    1f36:	84 e4       	ldi	r24, 0x44	; 68
    1f38:	61 e0       	ldi	r22, 0x01	; 1
    1f3a:	41 e0       	ldi	r20, 0x01	; 1
    1f3c:	0e 94 1a 0b 	call	0x1634	; 0x1634 <MDIO_vidSetPinDirection>

	TWI_voidInitMaster(0);
    1f40:	80 e0       	ldi	r24, 0x00	; 0
    1f42:	0e 94 71 07 	call	0xee2	; 0xee2 <TWI_voidInitMaster>
	UART_VidInit();
    1f46:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <UART_VidInit>

	u8 CurrentTemp;
	u8 DesiredTemp;

	EEP_WriteByte(0x01,25);
    1f4a:	81 e0       	ldi	r24, 0x01	; 1
    1f4c:	69 e1       	ldi	r22, 0x19	; 25
    1f4e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <EEP_WriteByte>
    1f52:	fe 01       	movw	r30, r28
    1f54:	ed 5b       	subi	r30, 0xBD	; 189
    1f56:	ff 4f       	sbci	r31, 0xFF	; 255
    1f58:	80 e0       	ldi	r24, 0x00	; 0
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	a0 ea       	ldi	r26, 0xA0	; 160
    1f5e:	b1 e4       	ldi	r27, 0x41	; 65
    1f60:	80 83       	st	Z, r24
    1f62:	91 83       	std	Z+1, r25	; 0x01
    1f64:	a2 83       	std	Z+2, r26	; 0x02
    1f66:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f68:	8e 01       	movw	r16, r28
    1f6a:	01 5c       	subi	r16, 0xC1	; 193
    1f6c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f6e:	fe 01       	movw	r30, r28
    1f70:	ed 5b       	subi	r30, 0xBD	; 189
    1f72:	ff 4f       	sbci	r31, 0xFF	; 255
    1f74:	60 81       	ld	r22, Z
    1f76:	71 81       	ldd	r23, Z+1	; 0x01
    1f78:	82 81       	ldd	r24, Z+2	; 0x02
    1f7a:	93 81       	ldd	r25, Z+3	; 0x03
    1f7c:	20 e0       	ldi	r18, 0x00	; 0
    1f7e:	30 e0       	ldi	r19, 0x00	; 0
    1f80:	4a ef       	ldi	r20, 0xFA	; 250
    1f82:	54 e4       	ldi	r21, 0x44	; 68
    1f84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f88:	dc 01       	movw	r26, r24
    1f8a:	cb 01       	movw	r24, r22
    1f8c:	f8 01       	movw	r30, r16
    1f8e:	80 83       	st	Z, r24
    1f90:	91 83       	std	Z+1, r25	; 0x01
    1f92:	a2 83       	std	Z+2, r26	; 0x02
    1f94:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f96:	fe 01       	movw	r30, r28
    1f98:	ff 96       	adiw	r30, 0x3f	; 63
    1f9a:	60 81       	ld	r22, Z
    1f9c:	71 81       	ldd	r23, Z+1	; 0x01
    1f9e:	82 81       	ldd	r24, Z+2	; 0x02
    1fa0:	93 81       	ldd	r25, Z+3	; 0x03
    1fa2:	20 e0       	ldi	r18, 0x00	; 0
    1fa4:	30 e0       	ldi	r19, 0x00	; 0
    1fa6:	40 e8       	ldi	r20, 0x80	; 128
    1fa8:	5f e3       	ldi	r21, 0x3F	; 63
    1faa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fae:	88 23       	and	r24, r24
    1fb0:	2c f4       	brge	.+10     	; 0x1fbc <main+0xaa>
		__ticks = 1;
    1fb2:	81 e0       	ldi	r24, 0x01	; 1
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	9e af       	std	Y+62, r25	; 0x3e
    1fb8:	8d af       	std	Y+61, r24	; 0x3d
    1fba:	46 c0       	rjmp	.+140    	; 0x2048 <main+0x136>
	else if (__tmp > 65535)
    1fbc:	fe 01       	movw	r30, r28
    1fbe:	ff 96       	adiw	r30, 0x3f	; 63
    1fc0:	60 81       	ld	r22, Z
    1fc2:	71 81       	ldd	r23, Z+1	; 0x01
    1fc4:	82 81       	ldd	r24, Z+2	; 0x02
    1fc6:	93 81       	ldd	r25, Z+3	; 0x03
    1fc8:	20 e0       	ldi	r18, 0x00	; 0
    1fca:	3f ef       	ldi	r19, 0xFF	; 255
    1fcc:	4f e7       	ldi	r20, 0x7F	; 127
    1fce:	57 e4       	ldi	r21, 0x47	; 71
    1fd0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fd4:	18 16       	cp	r1, r24
    1fd6:	64 f5       	brge	.+88     	; 0x2030 <main+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fd8:	fe 01       	movw	r30, r28
    1fda:	ed 5b       	subi	r30, 0xBD	; 189
    1fdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fde:	60 81       	ld	r22, Z
    1fe0:	71 81       	ldd	r23, Z+1	; 0x01
    1fe2:	82 81       	ldd	r24, Z+2	; 0x02
    1fe4:	93 81       	ldd	r25, Z+3	; 0x03
    1fe6:	20 e0       	ldi	r18, 0x00	; 0
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	40 e2       	ldi	r20, 0x20	; 32
    1fec:	51 e4       	ldi	r21, 0x41	; 65
    1fee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ff2:	dc 01       	movw	r26, r24
    1ff4:	cb 01       	movw	r24, r22
    1ff6:	bc 01       	movw	r22, r24
    1ff8:	cd 01       	movw	r24, r26
    1ffa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ffe:	dc 01       	movw	r26, r24
    2000:	cb 01       	movw	r24, r22
    2002:	9e af       	std	Y+62, r25	; 0x3e
    2004:	8d af       	std	Y+61, r24	; 0x3d
    2006:	0f c0       	rjmp	.+30     	; 0x2026 <main+0x114>
    2008:	88 ec       	ldi	r24, 0xC8	; 200
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	9c af       	std	Y+60, r25	; 0x3c
    200e:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2010:	8b ad       	ldd	r24, Y+59	; 0x3b
    2012:	9c ad       	ldd	r25, Y+60	; 0x3c
    2014:	01 97       	sbiw	r24, 0x01	; 1
    2016:	f1 f7       	brne	.-4      	; 0x2014 <main+0x102>
    2018:	9c af       	std	Y+60, r25	; 0x3c
    201a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    201c:	8d ad       	ldd	r24, Y+61	; 0x3d
    201e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2020:	01 97       	sbiw	r24, 0x01	; 1
    2022:	9e af       	std	Y+62, r25	; 0x3e
    2024:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2026:	8d ad       	ldd	r24, Y+61	; 0x3d
    2028:	9e ad       	ldd	r25, Y+62	; 0x3e
    202a:	00 97       	sbiw	r24, 0x00	; 0
    202c:	69 f7       	brne	.-38     	; 0x2008 <main+0xf6>
    202e:	16 c0       	rjmp	.+44     	; 0x205c <main+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2030:	fe 01       	movw	r30, r28
    2032:	ff 96       	adiw	r30, 0x3f	; 63
    2034:	60 81       	ld	r22, Z
    2036:	71 81       	ldd	r23, Z+1	; 0x01
    2038:	82 81       	ldd	r24, Z+2	; 0x02
    203a:	93 81       	ldd	r25, Z+3	; 0x03
    203c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2040:	dc 01       	movw	r26, r24
    2042:	cb 01       	movw	r24, r22
    2044:	9e af       	std	Y+62, r25	; 0x3e
    2046:	8d af       	std	Y+61, r24	; 0x3d
    2048:	8d ad       	ldd	r24, Y+61	; 0x3d
    204a:	9e ad       	ldd	r25, Y+62	; 0x3e
    204c:	9a af       	std	Y+58, r25	; 0x3a
    204e:	89 af       	std	Y+57, r24	; 0x39
    2050:	89 ad       	ldd	r24, Y+57	; 0x39
    2052:	9a ad       	ldd	r25, Y+58	; 0x3a
    2054:	01 97       	sbiw	r24, 0x01	; 1
    2056:	f1 f7       	brne	.-4      	; 0x2054 <main+0x142>
    2058:	9a af       	std	Y+58, r25	; 0x3a
    205a:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(20);

	EEP_WriteByte(0x02,30);
    205c:	82 e0       	ldi	r24, 0x02	; 2
    205e:	6e e1       	ldi	r22, 0x1E	; 30
    2060:	0e 94 4f 06 	call	0xc9e	; 0xc9e <EEP_WriteByte>
    2064:	80 e0       	ldi	r24, 0x00	; 0
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	a0 ea       	ldi	r26, 0xA0	; 160
    206a:	b1 e4       	ldi	r27, 0x41	; 65
    206c:	8d ab       	std	Y+53, r24	; 0x35
    206e:	9e ab       	std	Y+54, r25	; 0x36
    2070:	af ab       	std	Y+55, r26	; 0x37
    2072:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2074:	6d a9       	ldd	r22, Y+53	; 0x35
    2076:	7e a9       	ldd	r23, Y+54	; 0x36
    2078:	8f a9       	ldd	r24, Y+55	; 0x37
    207a:	98 ad       	ldd	r25, Y+56	; 0x38
    207c:	20 e0       	ldi	r18, 0x00	; 0
    207e:	30 e0       	ldi	r19, 0x00	; 0
    2080:	4a ef       	ldi	r20, 0xFA	; 250
    2082:	54 e4       	ldi	r21, 0x44	; 68
    2084:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2088:	dc 01       	movw	r26, r24
    208a:	cb 01       	movw	r24, r22
    208c:	89 ab       	std	Y+49, r24	; 0x31
    208e:	9a ab       	std	Y+50, r25	; 0x32
    2090:	ab ab       	std	Y+51, r26	; 0x33
    2092:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2094:	69 a9       	ldd	r22, Y+49	; 0x31
    2096:	7a a9       	ldd	r23, Y+50	; 0x32
    2098:	8b a9       	ldd	r24, Y+51	; 0x33
    209a:	9c a9       	ldd	r25, Y+52	; 0x34
    209c:	20 e0       	ldi	r18, 0x00	; 0
    209e:	30 e0       	ldi	r19, 0x00	; 0
    20a0:	40 e8       	ldi	r20, 0x80	; 128
    20a2:	5f e3       	ldi	r21, 0x3F	; 63
    20a4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20a8:	88 23       	and	r24, r24
    20aa:	2c f4       	brge	.+10     	; 0x20b6 <main+0x1a4>
		__ticks = 1;
    20ac:	81 e0       	ldi	r24, 0x01	; 1
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	98 ab       	std	Y+48, r25	; 0x30
    20b2:	8f a7       	std	Y+47, r24	; 0x2f
    20b4:	3f c0       	rjmp	.+126    	; 0x2134 <main+0x222>
	else if (__tmp > 65535)
    20b6:	69 a9       	ldd	r22, Y+49	; 0x31
    20b8:	7a a9       	ldd	r23, Y+50	; 0x32
    20ba:	8b a9       	ldd	r24, Y+51	; 0x33
    20bc:	9c a9       	ldd	r25, Y+52	; 0x34
    20be:	20 e0       	ldi	r18, 0x00	; 0
    20c0:	3f ef       	ldi	r19, 0xFF	; 255
    20c2:	4f e7       	ldi	r20, 0x7F	; 127
    20c4:	57 e4       	ldi	r21, 0x47	; 71
    20c6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20ca:	18 16       	cp	r1, r24
    20cc:	4c f5       	brge	.+82     	; 0x2120 <main+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20ce:	6d a9       	ldd	r22, Y+53	; 0x35
    20d0:	7e a9       	ldd	r23, Y+54	; 0x36
    20d2:	8f a9       	ldd	r24, Y+55	; 0x37
    20d4:	98 ad       	ldd	r25, Y+56	; 0x38
    20d6:	20 e0       	ldi	r18, 0x00	; 0
    20d8:	30 e0       	ldi	r19, 0x00	; 0
    20da:	40 e2       	ldi	r20, 0x20	; 32
    20dc:	51 e4       	ldi	r21, 0x41	; 65
    20de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20e2:	dc 01       	movw	r26, r24
    20e4:	cb 01       	movw	r24, r22
    20e6:	bc 01       	movw	r22, r24
    20e8:	cd 01       	movw	r24, r26
    20ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ee:	dc 01       	movw	r26, r24
    20f0:	cb 01       	movw	r24, r22
    20f2:	98 ab       	std	Y+48, r25	; 0x30
    20f4:	8f a7       	std	Y+47, r24	; 0x2f
    20f6:	0f c0       	rjmp	.+30     	; 0x2116 <main+0x204>
    20f8:	88 ec       	ldi	r24, 0xC8	; 200
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	9e a7       	std	Y+46, r25	; 0x2e
    20fe:	8d a7       	std	Y+45, r24	; 0x2d
    2100:	8d a5       	ldd	r24, Y+45	; 0x2d
    2102:	9e a5       	ldd	r25, Y+46	; 0x2e
    2104:	01 97       	sbiw	r24, 0x01	; 1
    2106:	f1 f7       	brne	.-4      	; 0x2104 <main+0x1f2>
    2108:	9e a7       	std	Y+46, r25	; 0x2e
    210a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    210c:	8f a5       	ldd	r24, Y+47	; 0x2f
    210e:	98 a9       	ldd	r25, Y+48	; 0x30
    2110:	01 97       	sbiw	r24, 0x01	; 1
    2112:	98 ab       	std	Y+48, r25	; 0x30
    2114:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2116:	8f a5       	ldd	r24, Y+47	; 0x2f
    2118:	98 a9       	ldd	r25, Y+48	; 0x30
    211a:	00 97       	sbiw	r24, 0x00	; 0
    211c:	69 f7       	brne	.-38     	; 0x20f8 <main+0x1e6>
    211e:	14 c0       	rjmp	.+40     	; 0x2148 <main+0x236>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2120:	69 a9       	ldd	r22, Y+49	; 0x31
    2122:	7a a9       	ldd	r23, Y+50	; 0x32
    2124:	8b a9       	ldd	r24, Y+51	; 0x33
    2126:	9c a9       	ldd	r25, Y+52	; 0x34
    2128:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    212c:	dc 01       	movw	r26, r24
    212e:	cb 01       	movw	r24, r22
    2130:	98 ab       	std	Y+48, r25	; 0x30
    2132:	8f a7       	std	Y+47, r24	; 0x2f
    2134:	8f a5       	ldd	r24, Y+47	; 0x2f
    2136:	98 a9       	ldd	r25, Y+48	; 0x30
    2138:	9c a7       	std	Y+44, r25	; 0x2c
    213a:	8b a7       	std	Y+43, r24	; 0x2b
    213c:	8b a5       	ldd	r24, Y+43	; 0x2b
    213e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2140:	01 97       	sbiw	r24, 0x01	; 1
    2142:	f1 f7       	brne	.-4      	; 0x2140 <main+0x22e>
    2144:	9c a7       	std	Y+44, r25	; 0x2c
    2146:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(20);

    EEP_ReadByte(0x01 , & DesiredTemp);
    2148:	9e 01       	movw	r18, r28
    214a:	27 5b       	subi	r18, 0xB7	; 183
    214c:	3f 4f       	sbci	r19, 0xFF	; 255
    214e:	81 e0       	ldi	r24, 0x01	; 1
    2150:	b9 01       	movw	r22, r18
    2152:	0e 94 9b 06 	call	0xd36	; 0xd36 <EEP_ReadByte>
    2156:	80 e0       	ldi	r24, 0x00	; 0
    2158:	90 e0       	ldi	r25, 0x00	; 0
    215a:	a0 ea       	ldi	r26, 0xA0	; 160
    215c:	b1 e4       	ldi	r27, 0x41	; 65
    215e:	8f a3       	std	Y+39, r24	; 0x27
    2160:	98 a7       	std	Y+40, r25	; 0x28
    2162:	a9 a7       	std	Y+41, r26	; 0x29
    2164:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2166:	6f a1       	ldd	r22, Y+39	; 0x27
    2168:	78 a5       	ldd	r23, Y+40	; 0x28
    216a:	89 a5       	ldd	r24, Y+41	; 0x29
    216c:	9a a5       	ldd	r25, Y+42	; 0x2a
    216e:	20 e0       	ldi	r18, 0x00	; 0
    2170:	30 e0       	ldi	r19, 0x00	; 0
    2172:	4a ef       	ldi	r20, 0xFA	; 250
    2174:	54 e4       	ldi	r21, 0x44	; 68
    2176:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    217a:	dc 01       	movw	r26, r24
    217c:	cb 01       	movw	r24, r22
    217e:	8b a3       	std	Y+35, r24	; 0x23
    2180:	9c a3       	std	Y+36, r25	; 0x24
    2182:	ad a3       	std	Y+37, r26	; 0x25
    2184:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2186:	6b a1       	ldd	r22, Y+35	; 0x23
    2188:	7c a1       	ldd	r23, Y+36	; 0x24
    218a:	8d a1       	ldd	r24, Y+37	; 0x25
    218c:	9e a1       	ldd	r25, Y+38	; 0x26
    218e:	20 e0       	ldi	r18, 0x00	; 0
    2190:	30 e0       	ldi	r19, 0x00	; 0
    2192:	40 e8       	ldi	r20, 0x80	; 128
    2194:	5f e3       	ldi	r21, 0x3F	; 63
    2196:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    219a:	88 23       	and	r24, r24
    219c:	2c f4       	brge	.+10     	; 0x21a8 <main+0x296>
		__ticks = 1;
    219e:	81 e0       	ldi	r24, 0x01	; 1
    21a0:	90 e0       	ldi	r25, 0x00	; 0
    21a2:	9a a3       	std	Y+34, r25	; 0x22
    21a4:	89 a3       	std	Y+33, r24	; 0x21
    21a6:	3f c0       	rjmp	.+126    	; 0x2226 <main+0x314>
	else if (__tmp > 65535)
    21a8:	6b a1       	ldd	r22, Y+35	; 0x23
    21aa:	7c a1       	ldd	r23, Y+36	; 0x24
    21ac:	8d a1       	ldd	r24, Y+37	; 0x25
    21ae:	9e a1       	ldd	r25, Y+38	; 0x26
    21b0:	20 e0       	ldi	r18, 0x00	; 0
    21b2:	3f ef       	ldi	r19, 0xFF	; 255
    21b4:	4f e7       	ldi	r20, 0x7F	; 127
    21b6:	57 e4       	ldi	r21, 0x47	; 71
    21b8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21bc:	18 16       	cp	r1, r24
    21be:	4c f5       	brge	.+82     	; 0x2212 <main+0x300>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21c0:	6f a1       	ldd	r22, Y+39	; 0x27
    21c2:	78 a5       	ldd	r23, Y+40	; 0x28
    21c4:	89 a5       	ldd	r24, Y+41	; 0x29
    21c6:	9a a5       	ldd	r25, Y+42	; 0x2a
    21c8:	20 e0       	ldi	r18, 0x00	; 0
    21ca:	30 e0       	ldi	r19, 0x00	; 0
    21cc:	40 e2       	ldi	r20, 0x20	; 32
    21ce:	51 e4       	ldi	r21, 0x41	; 65
    21d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21d4:	dc 01       	movw	r26, r24
    21d6:	cb 01       	movw	r24, r22
    21d8:	bc 01       	movw	r22, r24
    21da:	cd 01       	movw	r24, r26
    21dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21e0:	dc 01       	movw	r26, r24
    21e2:	cb 01       	movw	r24, r22
    21e4:	9a a3       	std	Y+34, r25	; 0x22
    21e6:	89 a3       	std	Y+33, r24	; 0x21
    21e8:	0f c0       	rjmp	.+30     	; 0x2208 <main+0x2f6>
    21ea:	88 ec       	ldi	r24, 0xC8	; 200
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	98 a3       	std	Y+32, r25	; 0x20
    21f0:	8f 8f       	std	Y+31, r24	; 0x1f
    21f2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    21f4:	98 a1       	ldd	r25, Y+32	; 0x20
    21f6:	01 97       	sbiw	r24, 0x01	; 1
    21f8:	f1 f7       	brne	.-4      	; 0x21f6 <main+0x2e4>
    21fa:	98 a3       	std	Y+32, r25	; 0x20
    21fc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21fe:	89 a1       	ldd	r24, Y+33	; 0x21
    2200:	9a a1       	ldd	r25, Y+34	; 0x22
    2202:	01 97       	sbiw	r24, 0x01	; 1
    2204:	9a a3       	std	Y+34, r25	; 0x22
    2206:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2208:	89 a1       	ldd	r24, Y+33	; 0x21
    220a:	9a a1       	ldd	r25, Y+34	; 0x22
    220c:	00 97       	sbiw	r24, 0x00	; 0
    220e:	69 f7       	brne	.-38     	; 0x21ea <main+0x2d8>
    2210:	14 c0       	rjmp	.+40     	; 0x223a <main+0x328>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2212:	6b a1       	ldd	r22, Y+35	; 0x23
    2214:	7c a1       	ldd	r23, Y+36	; 0x24
    2216:	8d a1       	ldd	r24, Y+37	; 0x25
    2218:	9e a1       	ldd	r25, Y+38	; 0x26
    221a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    221e:	dc 01       	movw	r26, r24
    2220:	cb 01       	movw	r24, r22
    2222:	9a a3       	std	Y+34, r25	; 0x22
    2224:	89 a3       	std	Y+33, r24	; 0x21
    2226:	89 a1       	ldd	r24, Y+33	; 0x21
    2228:	9a a1       	ldd	r25, Y+34	; 0x22
    222a:	9e 8f       	std	Y+30, r25	; 0x1e
    222c:	8d 8f       	std	Y+29, r24	; 0x1d
    222e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2230:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2232:	01 97       	sbiw	r24, 0x01	; 1
    2234:	f1 f7       	brne	.-4      	; 0x2232 <main+0x320>
    2236:	9e 8f       	std	Y+30, r25	; 0x1e
    2238:	8d 8f       	std	Y+29, r24	; 0x1d
	while(1)
	{
		//u8 x,y;

		u8 Buffer;
		Buffer=UART_VidReceiveData();
    223a:	0e 94 df 0a 	call	0x15be	; 0x15be <UART_VidReceiveData>
    223e:	fe 01       	movw	r30, r28
    2240:	e9 5b       	subi	r30, 0xB9	; 185
    2242:	ff 4f       	sbci	r31, 0xFF	; 255
    2244:	80 83       	st	Z, r24
		if(Buffer==2)
    2246:	fe 01       	movw	r30, r28
    2248:	e9 5b       	subi	r30, 0xB9	; 185
    224a:	ff 4f       	sbci	r31, 0xFF	; 255
    224c:	80 81       	ld	r24, Z
    224e:	82 30       	cpi	r24, 0x02	; 2
    2250:	39 f4       	brne	.+14     	; 0x2260 <main+0x34e>
		{
			UART_VidSendData(DesiredTemp);
    2252:	fe 01       	movw	r30, r28
    2254:	e7 5b       	subi	r30, 0xB7	; 183
    2256:	ff 4f       	sbci	r31, 0xFF	; 255
    2258:	80 81       	ld	r24, Z
    225a:	0e 94 c5 0a 	call	0x158a	; 0x158a <UART_VidSendData>
    225e:	08 c0       	rjmp	.+16     	; 0x2270 <main+0x35e>
		}
		//_delay_ms(10);

		else
		{
			DesiredTemp=Buffer;
    2260:	fe 01       	movw	r30, r28
    2262:	e7 5b       	subi	r30, 0xB7	; 183
    2264:	ff 4f       	sbci	r31, 0xFF	; 255
    2266:	de 01       	movw	r26, r28
    2268:	a9 5b       	subi	r26, 0xB9	; 185
    226a:	bf 4f       	sbci	r27, 0xFF	; 255
    226c:	8c 91       	ld	r24, X
    226e:	80 83       	st	Z, r24
		}
		CurrentTemp=UART_VidReceiveData();
    2270:	0e 94 df 0a 	call	0x15be	; 0x15be <UART_VidReceiveData>
    2274:	fe 01       	movw	r30, r28
    2276:	e8 5b       	subi	r30, 0xB8	; 184
    2278:	ff 4f       	sbci	r31, 0xFF	; 255
    227a:	80 83       	st	Z, r24

		CompareTemp(CurrentTemp,DesiredTemp);
    227c:	fe 01       	movw	r30, r28
    227e:	e7 5b       	subi	r30, 0xB7	; 183
    2280:	ff 4f       	sbci	r31, 0xFF	; 255
    2282:	90 81       	ld	r25, Z
    2284:	fe 01       	movw	r30, r28
    2286:	e8 5b       	subi	r30, 0xB8	; 184
    2288:	ff 4f       	sbci	r31, 0xFF	; 255
    228a:	80 81       	ld	r24, Z
    228c:	69 2f       	mov	r22, r25
    228e:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <CompareTemp>

		EEP_WriteByte(0x01,DesiredTemp);
    2292:	fe 01       	movw	r30, r28
    2294:	e7 5b       	subi	r30, 0xB7	; 183
    2296:	ff 4f       	sbci	r31, 0xFF	; 255
    2298:	90 81       	ld	r25, Z
    229a:	81 e0       	ldi	r24, 0x01	; 1
    229c:	69 2f       	mov	r22, r25
    229e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <EEP_WriteByte>
    22a2:	80 e0       	ldi	r24, 0x00	; 0
    22a4:	90 e0       	ldi	r25, 0x00	; 0
    22a6:	a0 ea       	ldi	r26, 0xA0	; 160
    22a8:	b1 e4       	ldi	r27, 0x41	; 65
    22aa:	89 8f       	std	Y+25, r24	; 0x19
    22ac:	9a 8f       	std	Y+26, r25	; 0x1a
    22ae:	ab 8f       	std	Y+27, r26	; 0x1b
    22b0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22b2:	69 8d       	ldd	r22, Y+25	; 0x19
    22b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22ba:	20 e0       	ldi	r18, 0x00	; 0
    22bc:	30 e0       	ldi	r19, 0x00	; 0
    22be:	4a ef       	ldi	r20, 0xFA	; 250
    22c0:	54 e4       	ldi	r21, 0x44	; 68
    22c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22c6:	dc 01       	movw	r26, r24
    22c8:	cb 01       	movw	r24, r22
    22ca:	8d 8b       	std	Y+21, r24	; 0x15
    22cc:	9e 8b       	std	Y+22, r25	; 0x16
    22ce:	af 8b       	std	Y+23, r26	; 0x17
    22d0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    22d2:	6d 89       	ldd	r22, Y+21	; 0x15
    22d4:	7e 89       	ldd	r23, Y+22	; 0x16
    22d6:	8f 89       	ldd	r24, Y+23	; 0x17
    22d8:	98 8d       	ldd	r25, Y+24	; 0x18
    22da:	20 e0       	ldi	r18, 0x00	; 0
    22dc:	30 e0       	ldi	r19, 0x00	; 0
    22de:	40 e8       	ldi	r20, 0x80	; 128
    22e0:	5f e3       	ldi	r21, 0x3F	; 63
    22e2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22e6:	88 23       	and	r24, r24
    22e8:	2c f4       	brge	.+10     	; 0x22f4 <main+0x3e2>
		__ticks = 1;
    22ea:	81 e0       	ldi	r24, 0x01	; 1
    22ec:	90 e0       	ldi	r25, 0x00	; 0
    22ee:	9c 8b       	std	Y+20, r25	; 0x14
    22f0:	8b 8b       	std	Y+19, r24	; 0x13
    22f2:	3f c0       	rjmp	.+126    	; 0x2372 <main+0x460>
	else if (__tmp > 65535)
    22f4:	6d 89       	ldd	r22, Y+21	; 0x15
    22f6:	7e 89       	ldd	r23, Y+22	; 0x16
    22f8:	8f 89       	ldd	r24, Y+23	; 0x17
    22fa:	98 8d       	ldd	r25, Y+24	; 0x18
    22fc:	20 e0       	ldi	r18, 0x00	; 0
    22fe:	3f ef       	ldi	r19, 0xFF	; 255
    2300:	4f e7       	ldi	r20, 0x7F	; 127
    2302:	57 e4       	ldi	r21, 0x47	; 71
    2304:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2308:	18 16       	cp	r1, r24
    230a:	4c f5       	brge	.+82     	; 0x235e <main+0x44c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    230c:	69 8d       	ldd	r22, Y+25	; 0x19
    230e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2310:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2312:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2314:	20 e0       	ldi	r18, 0x00	; 0
    2316:	30 e0       	ldi	r19, 0x00	; 0
    2318:	40 e2       	ldi	r20, 0x20	; 32
    231a:	51 e4       	ldi	r21, 0x41	; 65
    231c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2320:	dc 01       	movw	r26, r24
    2322:	cb 01       	movw	r24, r22
    2324:	bc 01       	movw	r22, r24
    2326:	cd 01       	movw	r24, r26
    2328:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    232c:	dc 01       	movw	r26, r24
    232e:	cb 01       	movw	r24, r22
    2330:	9c 8b       	std	Y+20, r25	; 0x14
    2332:	8b 8b       	std	Y+19, r24	; 0x13
    2334:	0f c0       	rjmp	.+30     	; 0x2354 <main+0x442>
    2336:	88 ec       	ldi	r24, 0xC8	; 200
    2338:	90 e0       	ldi	r25, 0x00	; 0
    233a:	9a 8b       	std	Y+18, r25	; 0x12
    233c:	89 8b       	std	Y+17, r24	; 0x11
    233e:	89 89       	ldd	r24, Y+17	; 0x11
    2340:	9a 89       	ldd	r25, Y+18	; 0x12
    2342:	01 97       	sbiw	r24, 0x01	; 1
    2344:	f1 f7       	brne	.-4      	; 0x2342 <main+0x430>
    2346:	9a 8b       	std	Y+18, r25	; 0x12
    2348:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    234a:	8b 89       	ldd	r24, Y+19	; 0x13
    234c:	9c 89       	ldd	r25, Y+20	; 0x14
    234e:	01 97       	sbiw	r24, 0x01	; 1
    2350:	9c 8b       	std	Y+20, r25	; 0x14
    2352:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2354:	8b 89       	ldd	r24, Y+19	; 0x13
    2356:	9c 89       	ldd	r25, Y+20	; 0x14
    2358:	00 97       	sbiw	r24, 0x00	; 0
    235a:	69 f7       	brne	.-38     	; 0x2336 <main+0x424>
    235c:	14 c0       	rjmp	.+40     	; 0x2386 <main+0x474>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    235e:	6d 89       	ldd	r22, Y+21	; 0x15
    2360:	7e 89       	ldd	r23, Y+22	; 0x16
    2362:	8f 89       	ldd	r24, Y+23	; 0x17
    2364:	98 8d       	ldd	r25, Y+24	; 0x18
    2366:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    236a:	dc 01       	movw	r26, r24
    236c:	cb 01       	movw	r24, r22
    236e:	9c 8b       	std	Y+20, r25	; 0x14
    2370:	8b 8b       	std	Y+19, r24	; 0x13
    2372:	8b 89       	ldd	r24, Y+19	; 0x13
    2374:	9c 89       	ldd	r25, Y+20	; 0x14
    2376:	98 8b       	std	Y+16, r25	; 0x10
    2378:	8f 87       	std	Y+15, r24	; 0x0f
    237a:	8f 85       	ldd	r24, Y+15	; 0x0f
    237c:	98 89       	ldd	r25, Y+16	; 0x10
    237e:	01 97       	sbiw	r24, 0x01	; 1
    2380:	f1 f7       	brne	.-4      	; 0x237e <main+0x46c>
    2382:	98 8b       	std	Y+16, r25	; 0x10
    2384:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(20);

		EEP_WriteByte(0x02,CurrentTemp);
    2386:	fe 01       	movw	r30, r28
    2388:	e8 5b       	subi	r30, 0xB8	; 184
    238a:	ff 4f       	sbci	r31, 0xFF	; 255
    238c:	82 e0       	ldi	r24, 0x02	; 2
    238e:	60 81       	ld	r22, Z
    2390:	0e 94 4f 06 	call	0xc9e	; 0xc9e <EEP_WriteByte>
    2394:	80 e0       	ldi	r24, 0x00	; 0
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	a0 ea       	ldi	r26, 0xA0	; 160
    239a:	b1 e4       	ldi	r27, 0x41	; 65
    239c:	8b 87       	std	Y+11, r24	; 0x0b
    239e:	9c 87       	std	Y+12, r25	; 0x0c
    23a0:	ad 87       	std	Y+13, r26	; 0x0d
    23a2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    23a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    23a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    23aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    23ac:	20 e0       	ldi	r18, 0x00	; 0
    23ae:	30 e0       	ldi	r19, 0x00	; 0
    23b0:	4a ef       	ldi	r20, 0xFA	; 250
    23b2:	54 e4       	ldi	r21, 0x44	; 68
    23b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23b8:	dc 01       	movw	r26, r24
    23ba:	cb 01       	movw	r24, r22
    23bc:	8f 83       	std	Y+7, r24	; 0x07
    23be:	98 87       	std	Y+8, r25	; 0x08
    23c0:	a9 87       	std	Y+9, r26	; 0x09
    23c2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23c4:	6f 81       	ldd	r22, Y+7	; 0x07
    23c6:	78 85       	ldd	r23, Y+8	; 0x08
    23c8:	89 85       	ldd	r24, Y+9	; 0x09
    23ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    23cc:	20 e0       	ldi	r18, 0x00	; 0
    23ce:	30 e0       	ldi	r19, 0x00	; 0
    23d0:	40 e8       	ldi	r20, 0x80	; 128
    23d2:	5f e3       	ldi	r21, 0x3F	; 63
    23d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23d8:	88 23       	and	r24, r24
    23da:	2c f4       	brge	.+10     	; 0x23e6 <main+0x4d4>
		__ticks = 1;
    23dc:	81 e0       	ldi	r24, 0x01	; 1
    23de:	90 e0       	ldi	r25, 0x00	; 0
    23e0:	9e 83       	std	Y+6, r25	; 0x06
    23e2:	8d 83       	std	Y+5, r24	; 0x05
    23e4:	3f c0       	rjmp	.+126    	; 0x2464 <main+0x552>
	else if (__tmp > 65535)
    23e6:	6f 81       	ldd	r22, Y+7	; 0x07
    23e8:	78 85       	ldd	r23, Y+8	; 0x08
    23ea:	89 85       	ldd	r24, Y+9	; 0x09
    23ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    23ee:	20 e0       	ldi	r18, 0x00	; 0
    23f0:	3f ef       	ldi	r19, 0xFF	; 255
    23f2:	4f e7       	ldi	r20, 0x7F	; 127
    23f4:	57 e4       	ldi	r21, 0x47	; 71
    23f6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23fa:	18 16       	cp	r1, r24
    23fc:	4c f5       	brge	.+82     	; 0x2450 <main+0x53e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2400:	7c 85       	ldd	r23, Y+12	; 0x0c
    2402:	8d 85       	ldd	r24, Y+13	; 0x0d
    2404:	9e 85       	ldd	r25, Y+14	; 0x0e
    2406:	20 e0       	ldi	r18, 0x00	; 0
    2408:	30 e0       	ldi	r19, 0x00	; 0
    240a:	40 e2       	ldi	r20, 0x20	; 32
    240c:	51 e4       	ldi	r21, 0x41	; 65
    240e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2412:	dc 01       	movw	r26, r24
    2414:	cb 01       	movw	r24, r22
    2416:	bc 01       	movw	r22, r24
    2418:	cd 01       	movw	r24, r26
    241a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    241e:	dc 01       	movw	r26, r24
    2420:	cb 01       	movw	r24, r22
    2422:	9e 83       	std	Y+6, r25	; 0x06
    2424:	8d 83       	std	Y+5, r24	; 0x05
    2426:	0f c0       	rjmp	.+30     	; 0x2446 <main+0x534>
    2428:	88 ec       	ldi	r24, 0xC8	; 200
    242a:	90 e0       	ldi	r25, 0x00	; 0
    242c:	9c 83       	std	Y+4, r25	; 0x04
    242e:	8b 83       	std	Y+3, r24	; 0x03
    2430:	8b 81       	ldd	r24, Y+3	; 0x03
    2432:	9c 81       	ldd	r25, Y+4	; 0x04
    2434:	01 97       	sbiw	r24, 0x01	; 1
    2436:	f1 f7       	brne	.-4      	; 0x2434 <main+0x522>
    2438:	9c 83       	std	Y+4, r25	; 0x04
    243a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    243c:	8d 81       	ldd	r24, Y+5	; 0x05
    243e:	9e 81       	ldd	r25, Y+6	; 0x06
    2440:	01 97       	sbiw	r24, 0x01	; 1
    2442:	9e 83       	std	Y+6, r25	; 0x06
    2444:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2446:	8d 81       	ldd	r24, Y+5	; 0x05
    2448:	9e 81       	ldd	r25, Y+6	; 0x06
    244a:	00 97       	sbiw	r24, 0x00	; 0
    244c:	69 f7       	brne	.-38     	; 0x2428 <main+0x516>
    244e:	f5 ce       	rjmp	.-534    	; 0x223a <main+0x328>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2450:	6f 81       	ldd	r22, Y+7	; 0x07
    2452:	78 85       	ldd	r23, Y+8	; 0x08
    2454:	89 85       	ldd	r24, Y+9	; 0x09
    2456:	9a 85       	ldd	r25, Y+10	; 0x0a
    2458:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    245c:	dc 01       	movw	r26, r24
    245e:	cb 01       	movw	r24, r22
    2460:	9e 83       	std	Y+6, r25	; 0x06
    2462:	8d 83       	std	Y+5, r24	; 0x05
    2464:	8d 81       	ldd	r24, Y+5	; 0x05
    2466:	9e 81       	ldd	r25, Y+6	; 0x06
    2468:	9a 83       	std	Y+2, r25	; 0x02
    246a:	89 83       	std	Y+1, r24	; 0x01
    246c:	89 81       	ldd	r24, Y+1	; 0x01
    246e:	9a 81       	ldd	r25, Y+2	; 0x02
    2470:	01 97       	sbiw	r24, 0x01	; 1
    2472:	f1 f7       	brne	.-4      	; 0x2470 <main+0x55e>
    2474:	9a 83       	std	Y+2, r25	; 0x02
    2476:	89 83       	std	Y+1, r24	; 0x01
    2478:	e0 ce       	rjmp	.-576    	; 0x223a <main+0x328>

0000247a <__prologue_saves__>:
    247a:	2f 92       	push	r2
    247c:	3f 92       	push	r3
    247e:	4f 92       	push	r4
    2480:	5f 92       	push	r5
    2482:	6f 92       	push	r6
    2484:	7f 92       	push	r7
    2486:	8f 92       	push	r8
    2488:	9f 92       	push	r9
    248a:	af 92       	push	r10
    248c:	bf 92       	push	r11
    248e:	cf 92       	push	r12
    2490:	df 92       	push	r13
    2492:	ef 92       	push	r14
    2494:	ff 92       	push	r15
    2496:	0f 93       	push	r16
    2498:	1f 93       	push	r17
    249a:	cf 93       	push	r28
    249c:	df 93       	push	r29
    249e:	cd b7       	in	r28, 0x3d	; 61
    24a0:	de b7       	in	r29, 0x3e	; 62
    24a2:	ca 1b       	sub	r28, r26
    24a4:	db 0b       	sbc	r29, r27
    24a6:	0f b6       	in	r0, 0x3f	; 63
    24a8:	f8 94       	cli
    24aa:	de bf       	out	0x3e, r29	; 62
    24ac:	0f be       	out	0x3f, r0	; 63
    24ae:	cd bf       	out	0x3d, r28	; 61
    24b0:	09 94       	ijmp

000024b2 <__epilogue_restores__>:
    24b2:	2a 88       	ldd	r2, Y+18	; 0x12
    24b4:	39 88       	ldd	r3, Y+17	; 0x11
    24b6:	48 88       	ldd	r4, Y+16	; 0x10
    24b8:	5f 84       	ldd	r5, Y+15	; 0x0f
    24ba:	6e 84       	ldd	r6, Y+14	; 0x0e
    24bc:	7d 84       	ldd	r7, Y+13	; 0x0d
    24be:	8c 84       	ldd	r8, Y+12	; 0x0c
    24c0:	9b 84       	ldd	r9, Y+11	; 0x0b
    24c2:	aa 84       	ldd	r10, Y+10	; 0x0a
    24c4:	b9 84       	ldd	r11, Y+9	; 0x09
    24c6:	c8 84       	ldd	r12, Y+8	; 0x08
    24c8:	df 80       	ldd	r13, Y+7	; 0x07
    24ca:	ee 80       	ldd	r14, Y+6	; 0x06
    24cc:	fd 80       	ldd	r15, Y+5	; 0x05
    24ce:	0c 81       	ldd	r16, Y+4	; 0x04
    24d0:	1b 81       	ldd	r17, Y+3	; 0x03
    24d2:	aa 81       	ldd	r26, Y+2	; 0x02
    24d4:	b9 81       	ldd	r27, Y+1	; 0x01
    24d6:	ce 0f       	add	r28, r30
    24d8:	d1 1d       	adc	r29, r1
    24da:	0f b6       	in	r0, 0x3f	; 63
    24dc:	f8 94       	cli
    24de:	de bf       	out	0x3e, r29	; 62
    24e0:	0f be       	out	0x3f, r0	; 63
    24e2:	cd bf       	out	0x3d, r28	; 61
    24e4:	ed 01       	movw	r28, r26
    24e6:	08 95       	ret

000024e8 <_exit>:
    24e8:	f8 94       	cli

000024ea <__stop_program>:
    24ea:	ff cf       	rjmp	.-2      	; 0x24ea <__stop_program>
